//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./line_types');
//HELPER FUNCTIONS AND STRUCTURES

LineService_getRSAKey_args = function(args) {
};
LineService_getRSAKey_args.prototype = {};
LineService_getRSAKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRSAKey_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRSAKey_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRSAKey_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RSAKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getRSAKey_result.prototype = {};
LineService_getRSAKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RSAKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRSAKey_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRSAKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyEmailConfirmationResult_args = function(args) {
  this.parameterMap = null;
  if (args) {
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
LineService_notifyEmailConfirmationResult_args.prototype = {};
LineService_notifyEmailConfirmationResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size376 = 0;
        var _rtmp3380;
        this.parameterMap = {};
        var _ktype377 = 0;
        var _vtype378 = 0;
        _rtmp3380 = input.readMapBegin();
        _ktype377 = _rtmp3380.ktype;
        _vtype378 = _rtmp3380.vtype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var key382 = null;
          var val383 = null;
          key382 = input.readString();
          val383 = input.readString();
          this.parameterMap[key382] = val383;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyEmailConfirmationResult_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyEmailConfirmationResult_args');
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter384 in this.parameterMap)
    {
      if (this.parameterMap.hasOwnProperty(kiter384))
      {
        var viter385 = this.parameterMap[kiter384];
        output.writeString(kiter384);
        output.writeString(viter385);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyEmailConfirmationResult_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyEmailConfirmationResult_result.prototype = {};
LineService_notifyEmailConfirmationResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyEmailConfirmationResult_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyEmailConfirmationResult_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerVirtualAccount_args = function(args) {
  this.locale = null;
  this.encryptedVirtualUserId = null;
  this.encryptedPassword = null;
  if (args) {
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
    if (args.encryptedVirtualUserId !== undefined && args.encryptedVirtualUserId !== null) {
      this.encryptedVirtualUserId = args.encryptedVirtualUserId;
    }
    if (args.encryptedPassword !== undefined && args.encryptedPassword !== null) {
      this.encryptedPassword = args.encryptedPassword;
    }
  }
};
LineService_registerVirtualAccount_args.prototype = {};
LineService_registerVirtualAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedVirtualUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerVirtualAccount_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerVirtualAccount_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 2);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  if (this.encryptedVirtualUserId !== null && this.encryptedVirtualUserId !== undefined) {
    output.writeFieldBegin('encryptedVirtualUserId', Thrift.Type.STRING, 3);
    output.writeString(this.encryptedVirtualUserId);
    output.writeFieldEnd();
  }
  if (this.encryptedPassword !== null && this.encryptedPassword !== undefined) {
    output.writeFieldBegin('encryptedPassword', Thrift.Type.STRING, 4);
    output.writeString(this.encryptedPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerVirtualAccount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerVirtualAccount_result.prototype = {};
LineService_registerVirtualAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerVirtualAccount_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerVirtualAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordChange_args = function(args) {
  this.virtualMid = null;
  this.encryptedVirtualUserId = null;
  this.encryptedOldPassword = null;
  this.encryptedNewPassword = null;
  if (args) {
    if (args.virtualMid !== undefined && args.virtualMid !== null) {
      this.virtualMid = args.virtualMid;
    }
    if (args.encryptedVirtualUserId !== undefined && args.encryptedVirtualUserId !== null) {
      this.encryptedVirtualUserId = args.encryptedVirtualUserId;
    }
    if (args.encryptedOldPassword !== undefined && args.encryptedOldPassword !== null) {
      this.encryptedOldPassword = args.encryptedOldPassword;
    }
    if (args.encryptedNewPassword !== undefined && args.encryptedNewPassword !== null) {
      this.encryptedNewPassword = args.encryptedNewPassword;
    }
  }
};
LineService_requestVirtualAccountPasswordChange_args.prototype = {};
LineService_requestVirtualAccountPasswordChange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.virtualMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedVirtualUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedOldPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedNewPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordChange_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestVirtualAccountPasswordChange_args');
  if (this.virtualMid !== null && this.virtualMid !== undefined) {
    output.writeFieldBegin('virtualMid', Thrift.Type.STRING, 2);
    output.writeString(this.virtualMid);
    output.writeFieldEnd();
  }
  if (this.encryptedVirtualUserId !== null && this.encryptedVirtualUserId !== undefined) {
    output.writeFieldBegin('encryptedVirtualUserId', Thrift.Type.STRING, 3);
    output.writeString(this.encryptedVirtualUserId);
    output.writeFieldEnd();
  }
  if (this.encryptedOldPassword !== null && this.encryptedOldPassword !== undefined) {
    output.writeFieldBegin('encryptedOldPassword', Thrift.Type.STRING, 4);
    output.writeString(this.encryptedOldPassword);
    output.writeFieldEnd();
  }
  if (this.encryptedNewPassword !== null && this.encryptedNewPassword !== undefined) {
    output.writeFieldBegin('encryptedNewPassword', Thrift.Type.STRING, 5);
    output.writeString(this.encryptedNewPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordChange_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_requestVirtualAccountPasswordChange_result.prototype = {};
LineService_requestVirtualAccountPasswordChange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordChange_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestVirtualAccountPasswordChange_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordSet_args = function(args) {
  this.virtualMid = null;
  this.encryptedVirtualUserId = null;
  this.encryptedNewPassword = null;
  if (args) {
    if (args.virtualMid !== undefined && args.virtualMid !== null) {
      this.virtualMid = args.virtualMid;
    }
    if (args.encryptedVirtualUserId !== undefined && args.encryptedVirtualUserId !== null) {
      this.encryptedVirtualUserId = args.encryptedVirtualUserId;
    }
    if (args.encryptedNewPassword !== undefined && args.encryptedNewPassword !== null) {
      this.encryptedNewPassword = args.encryptedNewPassword;
    }
  }
};
LineService_requestVirtualAccountPasswordSet_args.prototype = {};
LineService_requestVirtualAccountPasswordSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.virtualMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedVirtualUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedNewPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordSet_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestVirtualAccountPasswordSet_args');
  if (this.virtualMid !== null && this.virtualMid !== undefined) {
    output.writeFieldBegin('virtualMid', Thrift.Type.STRING, 2);
    output.writeString(this.virtualMid);
    output.writeFieldEnd();
  }
  if (this.encryptedVirtualUserId !== null && this.encryptedVirtualUserId !== undefined) {
    output.writeFieldBegin('encryptedVirtualUserId', Thrift.Type.STRING, 3);
    output.writeString(this.encryptedVirtualUserId);
    output.writeFieldEnd();
  }
  if (this.encryptedNewPassword !== null && this.encryptedNewPassword !== undefined) {
    output.writeFieldBegin('encryptedNewPassword', Thrift.Type.STRING, 4);
    output.writeString(this.encryptedNewPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordSet_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_requestVirtualAccountPasswordSet_result.prototype = {};
LineService_requestVirtualAccountPasswordSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestVirtualAccountPasswordSet_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestVirtualAccountPasswordSet_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterVirtualAccount_args = function(args) {
  this.virtualMid = null;
  if (args) {
    if (args.virtualMid !== undefined && args.virtualMid !== null) {
      this.virtualMid = args.virtualMid;
    }
  }
};
LineService_unregisterVirtualAccount_args.prototype = {};
LineService_unregisterVirtualAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.virtualMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterVirtualAccount_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterVirtualAccount_args');
  if (this.virtualMid !== null && this.virtualMid !== undefined) {
    output.writeFieldBegin('virtualMid', Thrift.Type.STRING, 2);
    output.writeString(this.virtualMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterVirtualAccount_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unregisterVirtualAccount_result.prototype = {};
LineService_unregisterVirtualAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterVirtualAccount_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterVirtualAccount_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_checkUserAge_args = function(args) {
  this.carrier = null;
  this.sessionId = null;
  this.verifier = null;
  this.standardAge = null;
  if (args) {
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.standardAge !== undefined && args.standardAge !== null) {
      this.standardAge = args.standardAge;
    }
  }
};
LineService_checkUserAge_args.prototype = {};
LineService_checkUserAge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.standardAge = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_checkUserAge_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_checkUserAge_args');
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 3);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.standardAge !== null && this.standardAge !== undefined) {
    output.writeFieldBegin('standardAge', Thrift.Type.I32, 5);
    output.writeI32(this.standardAge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_checkUserAge_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_checkUserAge_result.prototype = {};
LineService_checkUserAge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_checkUserAge_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_checkUserAge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_checkUserAgeWithDocomo_args = function(args) {
  this.openIdRedirectUrl = null;
  this.standardAge = null;
  this.verifier = null;
  if (args) {
    if (args.openIdRedirectUrl !== undefined && args.openIdRedirectUrl !== null) {
      this.openIdRedirectUrl = args.openIdRedirectUrl;
    }
    if (args.standardAge !== undefined && args.standardAge !== null) {
      this.standardAge = args.standardAge;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_checkUserAgeWithDocomo_args.prototype = {};
LineService_checkUserAgeWithDocomo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.openIdRedirectUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.standardAge = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_checkUserAgeWithDocomo_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_checkUserAgeWithDocomo_args');
  if (this.openIdRedirectUrl !== null && this.openIdRedirectUrl !== undefined) {
    output.writeFieldBegin('openIdRedirectUrl', Thrift.Type.STRING, 2);
    output.writeString(this.openIdRedirectUrl);
    output.writeFieldEnd();
  }
  if (this.standardAge !== null && this.standardAge !== undefined) {
    output.writeFieldBegin('standardAge', Thrift.Type.I32, 3);
    output.writeI32(this.standardAge);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_checkUserAgeWithDocomo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AgeCheckDocomoResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_checkUserAgeWithDocomo_result.prototype = {};
LineService_checkUserAgeWithDocomo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AgeCheckDocomoResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_checkUserAgeWithDocomo_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_checkUserAgeWithDocomo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_retrieveOpenIdAuthUrlWithDocomo_args = function(args) {
};
LineService_retrieveOpenIdAuthUrlWithDocomo_args.prototype = {};
LineService_retrieveOpenIdAuthUrlWithDocomo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_retrieveOpenIdAuthUrlWithDocomo_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_retrieveOpenIdAuthUrlWithDocomo_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_retrieveOpenIdAuthUrlWithDocomo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_retrieveOpenIdAuthUrlWithDocomo_result.prototype = {};
LineService_retrieveOpenIdAuthUrlWithDocomo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_retrieveOpenIdAuthUrlWithDocomo_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_retrieveOpenIdAuthUrlWithDocomo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_retrieveRequestToken_args = function(args) {
  this.carrier = null;
  if (args) {
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
  }
};
LineService_retrieveRequestToken_args.prototype = {};
LineService_retrieveRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_retrieveRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_retrieveRequestToken_args');
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_retrieveRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AgeCheckRequestResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_retrieveRequestToken_result.prototype = {};
LineService_retrieveRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AgeCheckRequestResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_retrieveRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_retrieveRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addBuddyMember_args = function(args) {
  this.requestId = null;
  this.userMid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMid !== undefined && args.userMid !== null) {
      this.userMid = args.userMid;
    }
  }
};
LineService_addBuddyMember_args.prototype = {};
LineService_addBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_addBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMid !== null && this.userMid !== undefined) {
    output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
    output.writeString(this.userMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_addBuddyMember_result.prototype = {};
LineService_addBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_addBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addBuddyMembers_args = function(args) {
  this.requestId = null;
  this.userMids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMids !== undefined && args.userMids !== null) {
      this.userMids = Thrift.copyList(args.userMids, [null]);
    }
  }
};
LineService_addBuddyMembers_args.prototype = {};
LineService_addBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size386 = 0;
        var _rtmp3390;
        this.userMids = [];
        var _etype389 = 0;
        _rtmp3390 = input.readListBegin();
        _etype389 = _rtmp3390.etype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          var elem392 = null;
          elem392 = input.readString();
          this.userMids.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_addBuddyMembers_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMids !== null && this.userMids !== undefined) {
    output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
    for (var iter393 in this.userMids)
    {
      if (this.userMids.hasOwnProperty(iter393))
      {
        iter393 = this.userMids[iter393];
        output.writeString(iter393);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addBuddyMembers_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_addBuddyMembers_result.prototype = {};
LineService_addBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_addBuddyMembers_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_blockBuddyMember_args = function(args) {
  this.requestId = null;
  this.mid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_blockBuddyMember_args.prototype = {};
LineService_blockBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_blockBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_blockBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_blockBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_blockBuddyMember_result.prototype = {};
LineService_blockBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_blockBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_blockBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessagesToAll_args = function(args) {
  this.requestIdList = null;
  if (args) {
    if (args.requestIdList !== undefined && args.requestIdList !== null) {
      this.requestIdList = Thrift.copyList(args.requestIdList, [null]);
    }
  }
};
LineService_commitSendMessagesToAll_args.prototype = {};
LineService_commitSendMessagesToAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size394 = 0;
        var _rtmp3398;
        this.requestIdList = [];
        var _etype397 = 0;
        _rtmp3398 = input.readListBegin();
        _etype397 = _rtmp3398.etype;
        _size394 = _rtmp3398.size;
        for (var _i399 = 0; _i399 < _size394; ++_i399)
        {
          var elem400 = null;
          elem400 = input.readString();
          this.requestIdList.push(elem400);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessagesToAll_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessagesToAll_args');
  if (this.requestIdList !== null && this.requestIdList !== undefined) {
    output.writeFieldBegin('requestIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.requestIdList.length);
    for (var iter401 in this.requestIdList)
    {
      if (this.requestIdList.hasOwnProperty(iter401))
      {
        iter401 = this.requestIdList[iter401];
        output.writeString(iter401);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessagesToAll_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.SendBuddyMessageResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_commitSendMessagesToAll_result.prototype = {};
LineService_commitSendMessagesToAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size402 = 0;
        var _rtmp3406;
        this.success = [];
        var _etype405 = 0;
        _rtmp3406 = input.readListBegin();
        _etype405 = _rtmp3406.etype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var elem408 = null;
          elem408 = new ttypes.SendBuddyMessageResult();
          elem408.read(input);
          this.success.push(elem408);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessagesToAll_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessagesToAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter409 in this.success)
    {
      if (this.success.hasOwnProperty(iter409))
      {
        iter409 = this.success[iter409];
        iter409.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessagesToMids_args = function(args) {
  this.requestIdList = null;
  this.mids = null;
  if (args) {
    if (args.requestIdList !== undefined && args.requestIdList !== null) {
      this.requestIdList = Thrift.copyList(args.requestIdList, [null]);
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
LineService_commitSendMessagesToMids_args.prototype = {};
LineService_commitSendMessagesToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size410 = 0;
        var _rtmp3414;
        this.requestIdList = [];
        var _etype413 = 0;
        _rtmp3414 = input.readListBegin();
        _etype413 = _rtmp3414.etype;
        _size410 = _rtmp3414.size;
        for (var _i415 = 0; _i415 < _size410; ++_i415)
        {
          var elem416 = null;
          elem416 = input.readString();
          this.requestIdList.push(elem416);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size417 = 0;
        var _rtmp3421;
        this.mids = [];
        var _etype420 = 0;
        _rtmp3421 = input.readListBegin();
        _etype420 = _rtmp3421.etype;
        _size417 = _rtmp3421.size;
        for (var _i422 = 0; _i422 < _size417; ++_i422)
        {
          var elem423 = null;
          elem423 = input.readString();
          this.mids.push(elem423);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessagesToMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessagesToMids_args');
  if (this.requestIdList !== null && this.requestIdList !== undefined) {
    output.writeFieldBegin('requestIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.requestIdList.length);
    for (var iter424 in this.requestIdList)
    {
      if (this.requestIdList.hasOwnProperty(iter424))
      {
        iter424 = this.requestIdList[iter424];
        output.writeString(iter424);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter425 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter425))
      {
        iter425 = this.mids[iter425];
        output.writeString(iter425);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessagesToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.SendBuddyMessageResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_commitSendMessagesToMids_result.prototype = {};
LineService_commitSendMessagesToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size426 = 0;
        var _rtmp3430;
        this.success = [];
        var _etype429 = 0;
        _rtmp3430 = input.readListBegin();
        _etype429 = _rtmp3430.etype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          var elem432 = null;
          elem432 = new ttypes.SendBuddyMessageResult();
          elem432.read(input);
          this.success.push(elem432);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessagesToMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessagesToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter433 in this.success)
    {
      if (this.success.hasOwnProperty(iter433))
      {
        iter433 = this.success[iter433];
        iter433.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_containsBuddyMember_args = function(args) {
  this.requestId = null;
  this.userMid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMid !== undefined && args.userMid !== null) {
      this.userMid = args.userMid;
    }
  }
};
LineService_containsBuddyMember_args.prototype = {};
LineService_containsBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_containsBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_containsBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMid !== null && this.userMid !== undefined) {
    output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
    output.writeString(this.userMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_containsBuddyMember_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_containsBuddyMember_result.prototype = {};
LineService_containsBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_containsBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_containsBuddyMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadMessageContent_args = function(args) {
  this.requestId = null;
  this.messageId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
LineService_downloadMessageContent_args.prototype = {};
LineService_downloadMessageContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadMessageContent_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadMessageContent_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadMessageContent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_downloadMessageContent_result.prototype = {};
LineService_downloadMessageContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadMessageContent_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadMessageContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadMessageContentPreview_args = function(args) {
  this.requestId = null;
  this.messageId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
LineService_downloadMessageContentPreview_args.prototype = {};
LineService_downloadMessageContentPreview_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadMessageContentPreview_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadMessageContentPreview_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadMessageContentPreview_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_downloadMessageContentPreview_result.prototype = {};
LineService_downloadMessageContentPreview_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadMessageContentPreview_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadMessageContentPreview_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadProfileImage_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
LineService_downloadProfileImage_args.prototype = {};
LineService_downloadProfileImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadProfileImage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadProfileImage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadProfileImage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_downloadProfileImage_result.prototype = {};
LineService_downloadProfileImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadProfileImage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadProfileImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadProfileImagePreview_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
LineService_downloadProfileImagePreview_args.prototype = {};
LineService_downloadProfileImagePreview_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadProfileImagePreview_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadProfileImagePreview_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_downloadProfileImagePreview_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_downloadProfileImagePreview_result.prototype = {};
LineService_downloadProfileImagePreview_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_downloadProfileImagePreview_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_downloadProfileImagePreview_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActiveMemberCountByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getActiveMemberCountByBuddyMid_args.prototype = {};
LineService_getActiveMemberCountByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActiveMemberCountByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActiveMemberCountByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActiveMemberCountByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getActiveMemberCountByBuddyMid_result.prototype = {};
LineService_getActiveMemberCountByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActiveMemberCountByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActiveMemberCountByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActiveMemberMidsByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getActiveMemberMidsByBuddyMid_args.prototype = {};
LineService_getActiveMemberMidsByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActiveMemberMidsByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActiveMemberMidsByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActiveMemberMidsByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getActiveMemberMidsByBuddyMid_result.prototype = {};
LineService_getActiveMemberMidsByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size434 = 0;
        var _rtmp3438;
        this.success = [];
        var _etype437 = 0;
        _rtmp3438 = input.readListBegin();
        _etype437 = _rtmp3438.etype;
        _size434 = _rtmp3438.size;
        for (var _i439 = 0; _i439 < _size434; ++_i439)
        {
          var elem440 = null;
          elem440 = input.readString();
          this.success.push(elem440);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActiveMemberMidsByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActiveMemberMidsByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter441 in this.success)
    {
      if (this.success.hasOwnProperty(iter441))
      {
        iter441 = this.success[iter441];
        output.writeString(iter441);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAllBuddyMembers_args = function(args) {
};
LineService_getAllBuddyMembers_args.prototype = {};
LineService_getAllBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAllBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAllBuddyMembers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAllBuddyMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getAllBuddyMembers_result.prototype = {};
LineService_getAllBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size442 = 0;
        var _rtmp3446;
        this.success = [];
        var _etype445 = 0;
        _rtmp3446 = input.readListBegin();
        _etype445 = _rtmp3446.etype;
        _size442 = _rtmp3446.size;
        for (var _i447 = 0; _i447 < _size442; ++_i447)
        {
          var elem448 = null;
          elem448 = input.readString();
          this.success.push(elem448);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAllBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAllBuddyMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter449 in this.success)
    {
      if (this.success.hasOwnProperty(iter449))
      {
        iter449 = this.success[iter449];
        output.writeString(iter449);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedBuddyMembers_args = function(args) {
};
LineService_getBlockedBuddyMembers_args.prototype = {};
LineService_getBlockedBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedBuddyMembers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedBuddyMembers_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBlockedBuddyMembers_result.prototype = {};
LineService_getBlockedBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size450 = 0;
        var _rtmp3454;
        this.success = [];
        var _etype453 = 0;
        _rtmp3454 = input.readListBegin();
        _etype453 = _rtmp3454.etype;
        _size450 = _rtmp3454.size;
        for (var _i455 = 0; _i455 < _size450; ++_i455)
        {
          var elem456 = null;
          elem456 = input.readString();
          this.success.push(elem456);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedBuddyMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter457 in this.success)
    {
      if (this.success.hasOwnProperty(iter457))
      {
        iter457 = this.success[iter457];
        output.writeString(iter457);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockerCountByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getBlockerCountByBuddyMid_args.prototype = {};
LineService_getBlockerCountByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockerCountByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockerCountByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockerCountByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBlockerCountByBuddyMid_result.prototype = {};
LineService_getBlockerCountByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockerCountByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockerCountByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyDetailByMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getBuddyDetailByMid_args.prototype = {};
LineService_getBuddyDetailByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyDetailByMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyDetailByMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyDetailByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuddyDetail(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyDetailByMid_result.prototype = {};
LineService_getBuddyDetailByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuddyDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyDetailByMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyDetailByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyProfile_args = function(args) {
};
LineService_getBuddyProfile_args.prototype = {};
LineService_getBuddyProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuddyProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyProfile_result.prototype = {};
LineService_getBuddyProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuddyProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContactTicket_args = function(args) {
};
LineService_getContactTicket_args.prototype = {};
LineService_getContactTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContactTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContactTicket_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContactTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getContactTicket_result.prototype = {};
LineService_getContactTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContactTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContactTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMemberCountByBuddyMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getMemberCountByBuddyMid_args.prototype = {};
LineService_getMemberCountByBuddyMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMemberCountByBuddyMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMemberCountByBuddyMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMemberCountByBuddyMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMemberCountByBuddyMid_result.prototype = {};
LineService_getMemberCountByBuddyMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMemberCountByBuddyMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMemberCountByBuddyMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSendBuddyMessageResult_args = function(args) {
  this.sendBuddyMessageRequestId = null;
  if (args) {
    if (args.sendBuddyMessageRequestId !== undefined && args.sendBuddyMessageRequestId !== null) {
      this.sendBuddyMessageRequestId = args.sendBuddyMessageRequestId;
    }
  }
};
LineService_getSendBuddyMessageResult_args.prototype = {};
LineService_getSendBuddyMessageResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sendBuddyMessageRequestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSendBuddyMessageResult_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSendBuddyMessageResult_args');
  if (this.sendBuddyMessageRequestId !== null && this.sendBuddyMessageRequestId !== undefined) {
    output.writeFieldBegin('sendBuddyMessageRequestId', Thrift.Type.STRING, 1);
    output.writeString(this.sendBuddyMessageRequestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSendBuddyMessageResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSendBuddyMessageResult_result.prototype = {};
LineService_getSendBuddyMessageResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSendBuddyMessageResult_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSendBuddyMessageResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSetBuddyOnAirResult_args = function(args) {
  this.setBuddyOnAirRequestId = null;
  if (args) {
    if (args.setBuddyOnAirRequestId !== undefined && args.setBuddyOnAirRequestId !== null) {
      this.setBuddyOnAirRequestId = args.setBuddyOnAirRequestId;
    }
  }
};
LineService_getSetBuddyOnAirResult_args.prototype = {};
LineService_getSetBuddyOnAirResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.setBuddyOnAirRequestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSetBuddyOnAirResult_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSetBuddyOnAirResult_args');
  if (this.setBuddyOnAirRequestId !== null && this.setBuddyOnAirRequestId !== undefined) {
    output.writeFieldBegin('setBuddyOnAirRequestId', Thrift.Type.STRING, 1);
    output.writeString(this.setBuddyOnAirRequestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSetBuddyOnAirResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SetBuddyOnAirResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSetBuddyOnAirResult_result.prototype = {};
LineService_getSetBuddyOnAirResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SetBuddyOnAirResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSetBuddyOnAirResult_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSetBuddyOnAirResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUpdateBuddyProfileResult_args = function(args) {
  this.updateBuddyProfileRequestId = null;
  if (args) {
    if (args.updateBuddyProfileRequestId !== undefined && args.updateBuddyProfileRequestId !== null) {
      this.updateBuddyProfileRequestId = args.updateBuddyProfileRequestId;
    }
  }
};
LineService_getUpdateBuddyProfileResult_args.prototype = {};
LineService_getUpdateBuddyProfileResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.updateBuddyProfileRequestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUpdateBuddyProfileResult_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUpdateBuddyProfileResult_args');
  if (this.updateBuddyProfileRequestId !== null && this.updateBuddyProfileRequestId !== undefined) {
    output.writeFieldBegin('updateBuddyProfileRequestId', Thrift.Type.STRING, 1);
    output.writeString(this.updateBuddyProfileRequestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUpdateBuddyProfileResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateBuddyProfileResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUpdateBuddyProfileResult_result.prototype = {};
LineService_getUpdateBuddyProfileResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateBuddyProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUpdateBuddyProfileResult_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUpdateBuddyProfileResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isBuddyOnAirByMid_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_isBuddyOnAirByMid_args.prototype = {};
LineService_isBuddyOnAirByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isBuddyOnAirByMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_isBuddyOnAirByMid_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isBuddyOnAirByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_isBuddyOnAirByMid_result.prototype = {};
LineService_isBuddyOnAirByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isBuddyOnAirByMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_isBuddyOnAirByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToAllAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.sourceContentId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
      this.sourceContentId = args.sourceContentId;
    }
  }
};
LineService_linkAndSendBuddyContentMessageToAllAsync_args.prototype = {};
LineService_linkAndSendBuddyContentMessageToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceContentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_linkAndSendBuddyContentMessageToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
    output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
    output.writeString(this.sourceContentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToAllAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_linkAndSendBuddyContentMessageToAllAsync_result.prototype = {};
LineService_linkAndSendBuddyContentMessageToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_linkAndSendBuddyContentMessageToAllAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToMids_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.sourceContentId = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
      this.sourceContentId = args.sourceContentId;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
LineService_linkAndSendBuddyContentMessageToMids_args.prototype = {};
LineService_linkAndSendBuddyContentMessageToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceContentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size458 = 0;
        var _rtmp3462;
        this.mids = [];
        var _etype461 = 0;
        _rtmp3462 = input.readListBegin();
        _etype461 = _rtmp3462.etype;
        _size458 = _rtmp3462.size;
        for (var _i463 = 0; _i463 < _size458; ++_i463)
        {
          var elem464 = null;
          elem464 = input.readString();
          this.mids.push(elem464);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_linkAndSendBuddyContentMessageToMids_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
    output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 3);
    output.writeString(this.sourceContentId);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter465 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter465))
      {
        iter465 = this.mids[iter465];
        output.writeString(iter465);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_linkAndSendBuddyContentMessageToMids_result.prototype = {};
LineService_linkAndSendBuddyContentMessageToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_linkAndSendBuddyContentMessageToMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_linkAndSendBuddyContentMessageToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyBuddyBlocked_args = function(args) {
  this.buddyMid = null;
  this.blockerMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.blockerMid !== undefined && args.blockerMid !== null) {
      this.blockerMid = args.blockerMid;
    }
  }
};
LineService_notifyBuddyBlocked_args.prototype = {};
LineService_notifyBuddyBlocked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.blockerMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyBuddyBlocked_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyBuddyBlocked_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.blockerMid !== null && this.blockerMid !== undefined) {
    output.writeFieldBegin('blockerMid', Thrift.Type.STRING, 2);
    output.writeString(this.blockerMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyBuddyBlocked_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyBuddyBlocked_result.prototype = {};
LineService_notifyBuddyBlocked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyBuddyBlocked_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyBuddyBlocked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyBuddyUnblocked_args = function(args) {
  this.buddyMid = null;
  this.blockerMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.blockerMid !== undefined && args.blockerMid !== null) {
      this.blockerMid = args.blockerMid;
    }
  }
};
LineService_notifyBuddyUnblocked_args.prototype = {};
LineService_notifyBuddyUnblocked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.blockerMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyBuddyUnblocked_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyBuddyUnblocked_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 1);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.blockerMid !== null && this.blockerMid !== undefined) {
    output.writeFieldBegin('blockerMid', Thrift.Type.STRING, 2);
    output.writeString(this.blockerMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyBuddyUnblocked_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyBuddyUnblocked_result.prototype = {};
LineService_notifyBuddyUnblocked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyBuddyUnblocked_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyBuddyUnblocked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddy_args = function(args) {
  this.buddyId = null;
  this.searchId = null;
  this.displayName = null;
  this.statusMeessage = null;
  this.picture = null;
  this.settings = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMeessage !== undefined && args.statusMeessage !== null) {
      this.statusMeessage = args.statusMeessage;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = Thrift.copyMap(args.settings, [null]);
    }
  }
};
LineService_registerBuddy_args.prototype = {};
LineService_registerBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMeessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size466 = 0;
        var _rtmp3470;
        this.settings = {};
        var _ktype467 = 0;
        var _vtype468 = 0;
        _rtmp3470 = input.readMapBegin();
        _ktype467 = _rtmp3470.ktype;
        _vtype468 = _rtmp3470.vtype;
        _size466 = _rtmp3470.size;
        for (var _i471 = 0; _i471 < _size466; ++_i471)
        {
          var key472 = null;
          var val473 = null;
          key472 = input.readString();
          val473 = input.readString();
          this.settings[key472] = val473;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddy_args');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMeessage !== null && this.statusMeessage !== undefined) {
    output.writeFieldBegin('statusMeessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMeessage);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 6);
    output.writeBinary(this.picture);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
    for (var kiter474 in this.settings)
    {
      if (this.settings.hasOwnProperty(kiter474))
      {
        var viter475 = this.settings[kiter474];
        output.writeString(kiter474);
        output.writeString(viter475);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerBuddy_result.prototype = {};
LineService_registerBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddyAdmin_args = function(args) {
  this.buddyId = null;
  this.searchId = null;
  this.displayName = null;
  this.statusMessage = null;
  this.picture = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
  }
};
LineService_registerBuddyAdmin_args.prototype = {};
LineService_registerBuddyAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddyAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddyAdmin_args');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 6);
    output.writeBinary(this.picture);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddyAdmin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerBuddyAdmin_result.prototype = {};
LineService_registerBuddyAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddyAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddyAdmin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueContactTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
LineService_reissueContactTicket_args.prototype = {};
LineService_reissueContactTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueContactTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueContactTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueContactTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reissueContactTicket_result.prototype = {};
LineService_reissueContactTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueContactTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueContactTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeBuddyMember_args = function(args) {
  this.requestId = null;
  this.userMid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMid !== undefined && args.userMid !== null) {
      this.userMid = args.userMid;
    }
  }
};
LineService_removeBuddyMember_args.prototype = {};
LineService_removeBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMid !== null && this.userMid !== undefined) {
    output.writeFieldBegin('userMid', Thrift.Type.STRING, 2);
    output.writeString(this.userMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeBuddyMember_result.prototype = {};
LineService_removeBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeBuddyMembers_args = function(args) {
  this.requestId = null;
  this.userMids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.userMids !== undefined && args.userMids !== null) {
      this.userMids = Thrift.copyList(args.userMids, [null]);
    }
  }
};
LineService_removeBuddyMembers_args.prototype = {};
LineService_removeBuddyMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.userMids = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = input.readString();
          this.userMids.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeBuddyMembers_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeBuddyMembers_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.userMids !== null && this.userMids !== undefined) {
    output.writeFieldBegin('userMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.userMids.length);
    for (var iter483 in this.userMids)
    {
      if (this.userMids.hasOwnProperty(iter483))
      {
        iter483 = this.userMids[iter483];
        output.writeString(iter483);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeBuddyMembers_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeBuddyMembers_result.prototype = {};
LineService_removeBuddyMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeBuddyMembers_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeBuddyMembers_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAll_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
LineService_sendBuddyContentMessageToAll_args.prototype = {};
LineService_sendBuddyContentMessageToAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAll_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToAll_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAll_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyContentMessageToAll_result.prototype = {};
LineService_sendBuddyContentMessageToAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAll_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAllAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
LineService_sendBuddyContentMessageToAllAsync_args.prototype = {};
LineService_sendBuddyContentMessageToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAllAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyContentMessageToAllAsync_result.prototype = {};
LineService_sendBuddyContentMessageToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToAllAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMids_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
LineService_sendBuddyContentMessageToMids_args.prototype = {};
LineService_sendBuddyContentMessageToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.mids = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = input.readString();
          this.mids.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToMids_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter491 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter491))
      {
        iter491 = this.mids[iter491];
        output.writeString(iter491);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyContentMessageToMids_result.prototype = {};
LineService_sendBuddyContentMessageToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMidsAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.content = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
LineService_sendBuddyContentMessageToMidsAsync_args.prototype = {};
LineService_sendBuddyContentMessageToMidsAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.mids = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = input.readString();
          this.mids.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMidsAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToMidsAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter499 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter499))
      {
        iter499 = this.mids[iter499];
        output.writeString(iter499);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMidsAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyContentMessageToMidsAsync_result.prototype = {};
LineService_sendBuddyContentMessageToMidsAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyContentMessageToMidsAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyContentMessageToMidsAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToAll_args = function(args) {
  this.requestId = null;
  this.msg = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
  }
};
LineService_sendBuddyMessageToAll_args.prototype = {};
LineService_sendBuddyMessageToAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToAll_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToAll_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToAll_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyMessageToAll_result.prototype = {};
LineService_sendBuddyMessageToAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToAll_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToAllAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
  }
};
LineService_sendBuddyMessageToAllAsync_args.prototype = {};
LineService_sendBuddyMessageToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToAllAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyMessageToAllAsync_result.prototype = {};
LineService_sendBuddyMessageToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToAllAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToMids_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
LineService_sendBuddyMessageToMids_args.prototype = {};
LineService_sendBuddyMessageToMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.mids = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = input.readString();
          this.mids.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToMids_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter507 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter507))
      {
        iter507 = this.mids[iter507];
        output.writeString(iter507);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyMessageToMids_result.prototype = {};
LineService_sendBuddyMessageToMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToMidsAsync_args = function(args) {
  this.requestId = null;
  this.msg = null;
  this.mids = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new ttypes.Message(args.msg);
    }
    if (args.mids !== undefined && args.mids !== null) {
      this.mids = Thrift.copyList(args.mids, [null]);
    }
  }
};
LineService_sendBuddyMessageToMidsAsync_args.prototype = {};
LineService_sendBuddyMessageToMidsAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new ttypes.Message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.mids = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = input.readString();
          this.mids.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToMidsAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToMidsAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 2);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  if (this.mids !== null && this.mids !== undefined) {
    output.writeFieldBegin('mids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.mids.length);
    for (var iter515 in this.mids)
    {
      if (this.mids.hasOwnProperty(iter515))
      {
        iter515 = this.mids[iter515];
        output.writeString(iter515);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendBuddyMessageToMidsAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendBuddyMessageToMidsAsync_result.prototype = {};
LineService_sendBuddyMessageToMidsAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendBuddyMessageToMidsAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendBuddyMessageToMidsAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendIndividualEventToAllAsync_args = function(args) {
  this.requestId = null;
  this.buddyMid = null;
  this.notificationStatus = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
      this.notificationStatus = args.notificationStatus;
    }
  }
};
LineService_sendIndividualEventToAllAsync_args.prototype = {};
LineService_sendIndividualEventToAllAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.notificationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendIndividualEventToAllAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendIndividualEventToAllAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 2);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
    output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 3);
    output.writeI32(this.notificationStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendIndividualEventToAllAsync_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendIndividualEventToAllAsync_result.prototype = {};
LineService_sendIndividualEventToAllAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendIndividualEventToAllAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendIndividualEventToAllAsync_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setBuddyOnAir_args = function(args) {
  this.requestId = null;
  this.onAir = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
  }
};
LineService_setBuddyOnAir_args.prototype = {};
LineService_setBuddyOnAir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setBuddyOnAir_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_setBuddyOnAir_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setBuddyOnAir_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SetBuddyOnAirResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_setBuddyOnAir_result.prototype = {};
LineService_setBuddyOnAir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SetBuddyOnAirResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setBuddyOnAir_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_setBuddyOnAir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setBuddyOnAirAsync_args = function(args) {
  this.requestId = null;
  this.onAir = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
  }
};
LineService_setBuddyOnAirAsync_args.prototype = {};
LineService_setBuddyOnAirAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setBuddyOnAirAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_setBuddyOnAirAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setBuddyOnAirAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_setBuddyOnAirAsync_result.prototype = {};
LineService_setBuddyOnAirAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setBuddyOnAirAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_setBuddyOnAirAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_storeMessage_args = function(args) {
  this.requestId = null;
  this.messageRequest = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageRequest !== undefined && args.messageRequest !== null) {
      this.messageRequest = new ttypes.BuddyMessageRequest(args.messageRequest);
    }
  }
};
LineService_storeMessage_args.prototype = {};
LineService_storeMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.messageRequest = new ttypes.BuddyMessageRequest();
        this.messageRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_storeMessage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_storeMessage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageRequest !== null && this.messageRequest !== undefined) {
    output.writeFieldBegin('messageRequest', Thrift.Type.STRUCT, 2);
    this.messageRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_storeMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendBuddyMessageResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_storeMessage_result.prototype = {};
LineService_storeMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendBuddyMessageResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_storeMessage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_storeMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unblockBuddyMember_args = function(args) {
  this.requestId = null;
  this.mid = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_unblockBuddyMember_args.prototype = {};
LineService_unblockBuddyMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unblockBuddyMember_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unblockBuddyMember_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unblockBuddyMember_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unblockBuddyMember_result.prototype = {};
LineService_unblockBuddyMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unblockBuddyMember_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unblockBuddyMember_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterBuddy_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
LineService_unregisterBuddy_args.prototype = {};
LineService_unregisterBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterBuddy_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterBuddy_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unregisterBuddy_result.prototype = {};
LineService_unregisterBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterBuddy_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterBuddyAdmin_args = function(args) {
  this.requestId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
LineService_unregisterBuddyAdmin_args.prototype = {};
LineService_unregisterBuddyAdmin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterBuddyAdmin_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterBuddyAdmin_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterBuddyAdmin_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unregisterBuddyAdmin_result.prototype = {};
LineService_unregisterBuddyAdmin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterBuddyAdmin_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterBuddyAdmin_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyAdminProfileAttribute_args = function(args) {
  this.requestId = null;
  this.attributes = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
LineService_updateBuddyAdminProfileAttribute_args.prototype = {};
LineService_updateBuddyAdminProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size516 = 0;
        var _rtmp3520;
        this.attributes = {};
        var _ktype517 = 0;
        var _vtype518 = 0;
        _rtmp3520 = input.readMapBegin();
        _ktype517 = _rtmp3520.ktype;
        _vtype518 = _rtmp3520.vtype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          var key522 = null;
          var val523 = null;
          key522 = input.readString();
          val523 = input.readString();
          this.attributes[key522] = val523;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyAdminProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyAdminProfileAttribute_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter524 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter524))
      {
        var viter525 = this.attributes[kiter524];
        output.writeString(kiter524);
        output.writeString(viter525);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyAdminProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddyAdminProfileAttribute_result.prototype = {};
LineService_updateBuddyAdminProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyAdminProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyAdminProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyAdminProfileImage_args = function(args) {
  this.requestId = null;
  this.picture = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
  }
};
LineService_updateBuddyAdminProfileImage_args.prototype = {};
LineService_updateBuddyAdminProfileImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyAdminProfileImage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyAdminProfileImage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 2);
    output.writeBinary(this.picture);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyAdminProfileImage_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddyAdminProfileImage_result.prototype = {};
LineService_updateBuddyAdminProfileImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyAdminProfileImage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyAdminProfileImage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileAttributes_args = function(args) {
  this.requestId = null;
  this.attributes = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
LineService_updateBuddyProfileAttributes_args.prototype = {};
LineService_updateBuddyProfileAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size526 = 0;
        var _rtmp3530;
        this.attributes = {};
        var _ktype527 = 0;
        var _vtype528 = 0;
        _rtmp3530 = input.readMapBegin();
        _ktype527 = _rtmp3530.ktype;
        _vtype528 = _rtmp3530.vtype;
        _size526 = _rtmp3530.size;
        for (var _i531 = 0; _i531 < _size526; ++_i531)
        {
          var key532 = null;
          var val533 = null;
          key532 = input.readString();
          val533 = input.readString();
          this.attributes[key532] = val533;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileAttributes_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter534 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter534))
      {
        var viter535 = this.attributes[kiter534];
        output.writeString(kiter534);
        output.writeString(viter535);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateBuddyProfileResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddyProfileAttributes_result.prototype = {};
LineService_updateBuddyProfileAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateBuddyProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileAttributesAsync_args = function(args) {
  this.requestId = null;
  this.attributes = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
  }
};
LineService_updateBuddyProfileAttributesAsync_args.prototype = {};
LineService_updateBuddyProfileAttributesAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size536 = 0;
        var _rtmp3540;
        this.attributes = {};
        var _ktype537 = 0;
        var _vtype538 = 0;
        _rtmp3540 = input.readMapBegin();
        _ktype537 = _rtmp3540.ktype;
        _vtype538 = _rtmp3540.vtype;
        _size536 = _rtmp3540.size;
        for (var _i541 = 0; _i541 < _size536; ++_i541)
        {
          var key542 = null;
          var val543 = null;
          key542 = input.readString();
          val543 = input.readString();
          this.attributes[key542] = val543;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileAttributesAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileAttributesAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter544 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter544))
      {
        var viter545 = this.attributes[kiter544];
        output.writeString(kiter544);
        output.writeString(viter545);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileAttributesAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddyProfileAttributesAsync_result.prototype = {};
LineService_updateBuddyProfileAttributesAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileAttributesAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileAttributesAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileImage_args = function(args) {
  this.requestId = null;
  this.image = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
  }
};
LineService_updateBuddyProfileImage_args.prototype = {};
LineService_updateBuddyProfileImage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileImage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileImage_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 2);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileImage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateBuddyProfileResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddyProfileImage_result.prototype = {};
LineService_updateBuddyProfileImage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateBuddyProfileResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileImage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileImage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileImageAsync_args = function(args) {
  this.requestId = null;
  this.image = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
  }
};
LineService_updateBuddyProfileImageAsync_args.prototype = {};
LineService_updateBuddyProfileImageAsync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileImageAsync_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileImageAsync_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 2);
    output.writeBinary(this.image);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddyProfileImageAsync_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddyProfileImageAsync_result.prototype = {};
LineService_updateBuddyProfileImageAsync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddyProfileImageAsync_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddyProfileImageAsync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddySearchId_args = function(args) {
  this.requestId = null;
  this.searchId = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
  }
};
LineService_updateBuddySearchId_args.prototype = {};
LineService_updateBuddySearchId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddySearchId_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddySearchId_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 2);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddySearchId_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddySearchId_result.prototype = {};
LineService_updateBuddySearchId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddySearchId_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddySearchId_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddySettings_args = function(args) {
  this.settings = null;
  if (args) {
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = Thrift.copyMap(args.settings, [null]);
    }
  }
};
LineService_updateBuddySettings_args.prototype = {};
LineService_updateBuddySettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size546 = 0;
        var _rtmp3550;
        this.settings = {};
        var _ktype547 = 0;
        var _vtype548 = 0;
        _rtmp3550 = input.readMapBegin();
        _ktype547 = _rtmp3550.ktype;
        _vtype548 = _rtmp3550.vtype;
        _size546 = _rtmp3550.size;
        for (var _i551 = 0; _i551 < _size546; ++_i551)
        {
          var key552 = null;
          var val553 = null;
          key552 = input.readString();
          val553 = input.readString();
          this.settings[key552] = val553;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddySettings_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddySettings_args');
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.settings));
    for (var kiter554 in this.settings)
    {
      if (this.settings.hasOwnProperty(kiter554))
      {
        var viter555 = this.settings[kiter554];
        output.writeString(kiter554);
        output.writeString(viter555);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddySettings_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddySettings_result.prototype = {};
LineService_updateBuddySettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddySettings_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddySettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_uploadBuddyContent_args = function(args) {
  this.contentType = null;
  this.content = null;
  if (args) {
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
LineService_uploadBuddyContent_args.prototype = {};
LineService_uploadBuddyContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_uploadBuddyContent_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_uploadBuddyContent_args');
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 2);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_uploadBuddyContent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_uploadBuddyContent_result.prototype = {};
LineService_uploadBuddyContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_uploadBuddyContent_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_uploadBuddyContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findBuddyContactsByQuery_args = function(args) {
  this.language = null;
  this.country = null;
  this.query = null;
  this.fromIndex = null;
  this.count = null;
  this.requestSource = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.fromIndex !== undefined && args.fromIndex !== null) {
      this.fromIndex = args.fromIndex;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.requestSource !== undefined && args.requestSource !== null) {
      this.requestSource = args.requestSource;
    }
  }
};
LineService_findBuddyContactsByQuery_args.prototype = {};
LineService_findBuddyContactsByQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.requestSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findBuddyContactsByQuery_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findBuddyContactsByQuery_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 4);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.fromIndex !== null && this.fromIndex !== undefined) {
    output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
    output.writeI32(this.fromIndex);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 6);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.requestSource !== null && this.requestSource !== undefined) {
    output.writeFieldBegin('requestSource', Thrift.Type.I32, 7);
    output.writeI32(this.requestSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findBuddyContactsByQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BuddySearchResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findBuddyContactsByQuery_result.prototype = {};
LineService_findBuddyContactsByQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size556 = 0;
        var _rtmp3560;
        this.success = [];
        var _etype559 = 0;
        _rtmp3560 = input.readListBegin();
        _etype559 = _rtmp3560.etype;
        _size556 = _rtmp3560.size;
        for (var _i561 = 0; _i561 < _size556; ++_i561)
        {
          var elem562 = null;
          elem562 = new ttypes.BuddySearchResult();
          elem562.read(input);
          this.success.push(elem562);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findBuddyContactsByQuery_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findBuddyContactsByQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter563 in this.success)
    {
      if (this.success.hasOwnProperty(iter563))
      {
        iter563 = this.success[iter563];
        iter563.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyContacts_args = function(args) {
  this.language = null;
  this.country = null;
  this.classification = null;
  this.fromIndex = null;
  this.count = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.classification !== undefined && args.classification !== null) {
      this.classification = args.classification;
    }
    if (args.fromIndex !== undefined && args.fromIndex !== null) {
      this.fromIndex = args.fromIndex;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
LineService_getBuddyContacts_args.prototype = {};
LineService_getBuddyContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fromIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyContacts_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 4);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  if (this.fromIndex !== null && this.fromIndex !== undefined) {
    output.writeFieldBegin('fromIndex', Thrift.Type.I32, 5);
    output.writeI32(this.fromIndex);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 6);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyContacts_result.prototype = {};
LineService_getBuddyContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size564 = 0;
        var _rtmp3568;
        this.success = [];
        var _etype567 = 0;
        _rtmp3568 = input.readListBegin();
        _etype567 = _rtmp3568.etype;
        _size564 = _rtmp3568.size;
        for (var _i569 = 0; _i569 < _size564; ++_i569)
        {
          var elem570 = null;
          elem570 = new ttypes.Contact();
          elem570.read(input);
          this.success.push(elem570);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter571 in this.success)
    {
      if (this.success.hasOwnProperty(iter571))
      {
        iter571 = this.success[iter571];
        iter571.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyDetail_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getBuddyDetail_args.prototype = {};
LineService_getBuddyDetail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyDetail_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyDetail_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyDetail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuddyDetail(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyDetail_result.prototype = {};
LineService_getBuddyDetail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuddyDetail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyDetail_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyDetail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyOnAir_args = function(args) {
  this.buddyMid = null;
  if (args) {
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
  }
};
LineService_getBuddyOnAir_args.prototype = {};
LineService_getBuddyOnAir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyOnAir_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyOnAir_args');
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 4);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyOnAir_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuddyOnAir(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyOnAir_result.prototype = {};
LineService_getBuddyOnAir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuddyOnAir();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyOnAir_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyOnAir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCountriesHavingBuddy_args = function(args) {
};
LineService_getCountriesHavingBuddy_args.prototype = {};
LineService_getCountriesHavingBuddy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCountriesHavingBuddy_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCountriesHavingBuddy_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCountriesHavingBuddy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCountriesHavingBuddy_result.prototype = {};
LineService_getCountriesHavingBuddy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size572 = 0;
        var _rtmp3576;
        this.success = [];
        var _etype575 = 0;
        _rtmp3576 = input.readListBegin();
        _etype575 = _rtmp3576.etype;
        _size572 = _rtmp3576.size;
        for (var _i577 = 0; _i577 < _size572; ++_i577)
        {
          var elem578 = null;
          elem578 = input.readString();
          this.success.push(elem578);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCountriesHavingBuddy_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCountriesHavingBuddy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter579 in this.success)
    {
      if (this.success.hasOwnProperty(iter579))
      {
        iter579 = this.success[iter579];
        output.writeString(iter579);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNewlyReleasedBuddyIds_args = function(args) {
  this.country = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getNewlyReleasedBuddyIds_args.prototype = {};
LineService_getNewlyReleasedBuddyIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNewlyReleasedBuddyIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNewlyReleasedBuddyIds_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNewlyReleasedBuddyIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getNewlyReleasedBuddyIds_result.prototype = {};
LineService_getNewlyReleasedBuddyIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size580 = 0;
        var _rtmp3584;
        this.success = {};
        var _ktype581 = 0;
        var _vtype582 = 0;
        _rtmp3584 = input.readMapBegin();
        _ktype581 = _rtmp3584.ktype;
        _vtype582 = _rtmp3584.vtype;
        _size580 = _rtmp3584.size;
        for (var _i585 = 0; _i585 < _size580; ++_i585)
        {
          var key586 = null;
          var val587 = null;
          key586 = input.readString();
          val587 = input.readI64();
          this.success[key586] = val587;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNewlyReleasedBuddyIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNewlyReleasedBuddyIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter588 in this.success)
    {
      if (this.success.hasOwnProperty(kiter588))
      {
        var viter589 = this.success[kiter588];
        output.writeString(kiter588);
        output.writeI64(viter589);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPopularBuddyBanner_args = function(args) {
  this.language = null;
  this.country = null;
  this.applicationType = null;
  this.resourceSpecification = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.resourceSpecification !== undefined && args.resourceSpecification !== null) {
      this.resourceSpecification = args.resourceSpecification;
    }
  }
};
LineService_getPopularBuddyBanner_args.prototype = {};
LineService_getPopularBuddyBanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.resourceSpecification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPopularBuddyBanner_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPopularBuddyBanner_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 4);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.resourceSpecification !== null && this.resourceSpecification !== undefined) {
    output.writeFieldBegin('resourceSpecification', Thrift.Type.STRING, 5);
    output.writeString(this.resourceSpecification);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPopularBuddyBanner_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.BuddyBanner(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPopularBuddyBanner_result.prototype = {};
LineService_getPopularBuddyBanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.BuddyBanner();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPopularBuddyBanner_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPopularBuddyBanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPopularBuddyLists_args = function(args) {
  this.language = null;
  this.country = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getPopularBuddyLists_args.prototype = {};
LineService_getPopularBuddyLists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPopularBuddyLists_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPopularBuddyLists_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPopularBuddyLists_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.BuddyList]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPopularBuddyLists_result.prototype = {};
LineService_getPopularBuddyLists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size590 = 0;
        var _rtmp3594;
        this.success = [];
        var _etype593 = 0;
        _rtmp3594 = input.readListBegin();
        _etype593 = _rtmp3594.etype;
        _size590 = _rtmp3594.size;
        for (var _i595 = 0; _i595 < _size590; ++_i595)
        {
          var elem596 = null;
          elem596 = new ttypes.BuddyList();
          elem596.read(input);
          this.success.push(elem596);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPopularBuddyLists_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPopularBuddyLists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter597 in this.success)
    {
      if (this.success.hasOwnProperty(iter597))
      {
        iter597 = this.success[iter597];
        iter597.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPromotedBuddyContacts_args = function(args) {
  this.language = null;
  this.country = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getPromotedBuddyContacts_args.prototype = {};
LineService_getPromotedBuddyContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPromotedBuddyContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPromotedBuddyContacts_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPromotedBuddyContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPromotedBuddyContacts_result.prototype = {};
LineService_getPromotedBuddyContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size598 = 0;
        var _rtmp3602;
        this.success = [];
        var _etype601 = 0;
        _rtmp3602 = input.readListBegin();
        _etype601 = _rtmp3602.etype;
        _size598 = _rtmp3602.size;
        for (var _i603 = 0; _i603 < _size598; ++_i603)
        {
          var elem604 = null;
          elem604 = new ttypes.Contact();
          elem604.read(input);
          this.success.push(elem604);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPromotedBuddyContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPromotedBuddyContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter605 in this.success)
    {
      if (this.success.hasOwnProperty(iter605))
      {
        iter605 = this.success[iter605];
        iter605.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_activeBuddySubscriberCount_args = function(args) {
};
LineService_activeBuddySubscriberCount_args.prototype = {};
LineService_activeBuddySubscriberCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_activeBuddySubscriberCount_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_activeBuddySubscriberCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_activeBuddySubscriberCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_activeBuddySubscriberCount_result.prototype = {};
LineService_activeBuddySubscriberCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_activeBuddySubscriberCount_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_activeBuddySubscriberCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addOperationForChannel_args = function(args) {
  this.opType = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  if (args) {
    if (args.opType !== undefined && args.opType !== null) {
      this.opType = args.opType;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
  }
};
LineService_addOperationForChannel_args.prototype = {};
LineService_addOperationForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.opType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addOperationForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_addOperationForChannel_args');
  if (this.opType !== null && this.opType !== undefined) {
    output.writeFieldBegin('opType', Thrift.Type.I32, 1);
    output.writeI32(this.opType);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 2);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 3);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 4);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addOperationForChannel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_addOperationForChannel_result.prototype = {};
LineService_addOperationForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addOperationForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_addOperationForChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_displayBuddySubscriberCount_args = function(args) {
};
LineService_displayBuddySubscriberCount_args.prototype = {};
LineService_displayBuddySubscriberCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_displayBuddySubscriberCount_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_displayBuddySubscriberCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_displayBuddySubscriberCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_displayBuddySubscriberCount_result.prototype = {};
LineService_displayBuddySubscriberCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_displayBuddySubscriberCount_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_displayBuddySubscriberCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactByUseridWithoutAbuseBlockForChannel_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
LineService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype = {};
LineService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactByUseridWithoutAbuseBlockForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactByUseridWithoutAbuseBlockForChannel_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactByUseridWithoutAbuseBlockForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype = {};
LineService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactByUseridWithoutAbuseBlockForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactByUseridWithoutAbuseBlockForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAllContactIdsForChannel_args = function(args) {
};
LineService_getAllContactIdsForChannel_args.prototype = {};
LineService_getAllContactIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAllContactIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAllContactIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAllContactIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getAllContactIdsForChannel_result.prototype = {};
LineService_getAllContactIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size606 = 0;
        var _rtmp3610;
        this.success = [];
        var _etype609 = 0;
        _rtmp3610 = input.readListBegin();
        _etype609 = _rtmp3610.etype;
        _size606 = _rtmp3610.size;
        for (var _i611 = 0; _i611 < _size606; ++_i611)
        {
          var elem612 = null;
          elem612 = input.readString();
          this.success.push(elem612);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAllContactIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAllContactIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter613 in this.success)
    {
      if (this.success.hasOwnProperty(iter613))
      {
        iter613 = this.success[iter613];
        output.writeString(iter613);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactContacts_args = function(args) {
  this.lastModifiedTimestamp = null;
  if (args) {
    if (args.lastModifiedTimestamp !== undefined && args.lastModifiedTimestamp !== null) {
      this.lastModifiedTimestamp = args.lastModifiedTimestamp;
    }
  }
};
LineService_getCompactContacts_args.prototype = {};
LineService_getCompactContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactContacts_args');
  if (this.lastModifiedTimestamp !== null && this.lastModifiedTimestamp !== undefined) {
    output.writeFieldBegin('lastModifiedTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.lastModifiedTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.CompactContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCompactContacts_result.prototype = {};
LineService_getCompactContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size614 = 0;
        var _rtmp3618;
        this.success = [];
        var _etype617 = 0;
        _rtmp3618 = input.readListBegin();
        _etype617 = _rtmp3618.etype;
        _size614 = _rtmp3618.size;
        for (var _i619 = 0; _i619 < _size614; ++_i619)
        {
          var elem620 = null;
          elem620 = new ttypes.CompactContact();
          elem620.read(input);
          this.success.push(elem620);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter621 in this.success)
    {
      if (this.success.hasOwnProperty(iter621))
      {
        iter621 = this.success[iter621];
        iter621.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContactsForChannel_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
LineService_getContactsForChannel_args.prototype = {};
LineService_getContactsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size622 = 0;
        var _rtmp3626;
        this.ids = [];
        var _etype625 = 0;
        _rtmp3626 = input.readListBegin();
        _etype625 = _rtmp3626.etype;
        _size622 = _rtmp3626.size;
        for (var _i627 = 0; _i627 < _size622; ++_i627)
        {
          var elem628 = null;
          elem628 = input.readString();
          this.ids.push(elem628);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContactsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContactsForChannel_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter629 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter629))
      {
        iter629 = this.ids[iter629];
        output.writeString(iter629);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContactsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getContactsForChannel_result.prototype = {};
LineService_getContactsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size630 = 0;
        var _rtmp3634;
        this.success = [];
        var _etype633 = 0;
        _rtmp3634 = input.readListBegin();
        _etype633 = _rtmp3634.etype;
        _size630 = _rtmp3634.size;
        for (var _i635 = 0; _i635 < _size630; ++_i635)
        {
          var elem636 = null;
          elem636 = new ttypes.Contact();
          elem636.read(input);
          this.success.push(elem636);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContactsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContactsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter637 in this.success)
    {
      if (this.success.hasOwnProperty(iter637))
      {
        iter637 = this.success[iter637];
        iter637.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getDisplayName_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_getDisplayName_args.prototype = {};
LineService_getDisplayName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getDisplayName_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getDisplayName_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getDisplayName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getDisplayName_result.prototype = {};
LineService_getDisplayName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getDisplayName_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getDisplayName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFavoriteMidsForChannel_args = function(args) {
};
LineService_getFavoriteMidsForChannel_args.prototype = {};
LineService_getFavoriteMidsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFavoriteMidsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFavoriteMidsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFavoriteMidsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getFavoriteMidsForChannel_result.prototype = {};
LineService_getFavoriteMidsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size638 = 0;
        var _rtmp3642;
        this.success = [];
        var _etype641 = 0;
        _rtmp3642 = input.readListBegin();
        _etype641 = _rtmp3642.etype;
        _size638 = _rtmp3642.size;
        for (var _i643 = 0; _i643 < _size638; ++_i643)
        {
          var elem644 = null;
          elem644 = input.readString();
          this.success.push(elem644);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFavoriteMidsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFavoriteMidsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter645 in this.success)
    {
      if (this.success.hasOwnProperty(iter645))
      {
        iter645 = this.success[iter645];
        output.writeString(iter645);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFriendMids_args = function(args) {
};
LineService_getFriendMids_args.prototype = {};
LineService_getFriendMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFriendMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFriendMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFriendMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getFriendMids_result.prototype = {};
LineService_getFriendMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size646 = 0;
        var _rtmp3650;
        this.success = [];
        var _etype649 = 0;
        _rtmp3650 = input.readListBegin();
        _etype649 = _rtmp3650.etype;
        _size646 = _rtmp3650.size;
        for (var _i651 = 0; _i651 < _size646; ++_i651)
        {
          var elem652 = null;
          elem652 = input.readString();
          this.success.push(elem652);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFriendMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFriendMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter653 in this.success)
    {
      if (this.success.hasOwnProperty(iter653))
      {
        iter653 = this.success[iter653];
        output.writeString(iter653);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupMemberMids_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_getGroupMemberMids_args.prototype = {};
LineService_getGroupMemberMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupMemberMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupMemberMids_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupMemberMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getGroupMemberMids_result.prototype = {};
LineService_getGroupMemberMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size654 = 0;
        var _rtmp3658;
        this.success = [];
        var _etype657 = 0;
        _rtmp3658 = input.readListBegin();
        _etype657 = _rtmp3658.etype;
        _size654 = _rtmp3658.size;
        for (var _i659 = 0; _i659 < _size654; ++_i659)
        {
          var elem660 = null;
          elem660 = input.readString();
          this.success.push(elem660);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupMemberMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupMemberMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter661 in this.success)
    {
      if (this.success.hasOwnProperty(iter661))
      {
        iter661 = this.success[iter661];
        output.writeString(iter661);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupsForChannel_args = function(args) {
  this.groupIds = null;
  if (args) {
    if (args.groupIds !== undefined && args.groupIds !== null) {
      this.groupIds = Thrift.copyList(args.groupIds, [null]);
    }
  }
};
LineService_getGroupsForChannel_args.prototype = {};
LineService_getGroupsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size662 = 0;
        var _rtmp3666;
        this.groupIds = [];
        var _etype665 = 0;
        _rtmp3666 = input.readListBegin();
        _etype665 = _rtmp3666.etype;
        _size662 = _rtmp3666.size;
        for (var _i667 = 0; _i667 < _size662; ++_i667)
        {
          var elem668 = null;
          elem668 = input.readString();
          this.groupIds.push(elem668);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupsForChannel_args');
  if (this.groupIds !== null && this.groupIds !== undefined) {
    output.writeFieldBegin('groupIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
    for (var iter669 in this.groupIds)
    {
      if (this.groupIds.hasOwnProperty(iter669))
      {
        iter669 = this.groupIds[iter669];
        output.writeString(iter669);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getGroupsForChannel_result.prototype = {};
LineService_getGroupsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size670 = 0;
        var _rtmp3674;
        this.success = [];
        var _etype673 = 0;
        _rtmp3674 = input.readListBegin();
        _etype673 = _rtmp3674.etype;
        _size670 = _rtmp3674.size;
        for (var _i675 = 0; _i675 < _size670; ++_i675)
        {
          var elem676 = null;
          elem676 = new ttypes.Group();
          elem676.read(input);
          this.success.push(elem676);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter677 in this.success)
    {
      if (this.success.hasOwnProperty(iter677))
      {
        iter677 = this.success[iter677];
        iter677.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getIdentityCredential_args = function(args) {
};
LineService_getIdentityCredential_args.prototype = {};
LineService_getIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getIdentityCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IdentityCredential(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getIdentityCredential_result.prototype = {};
LineService_getIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IdentityCredential();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getJoinedGroupIdsForChannel_args = function(args) {
};
LineService_getJoinedGroupIdsForChannel_args.prototype = {};
LineService_getJoinedGroupIdsForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getJoinedGroupIdsForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getJoinedGroupIdsForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getJoinedGroupIdsForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getJoinedGroupIdsForChannel_result.prototype = {};
LineService_getJoinedGroupIdsForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size678 = 0;
        var _rtmp3682;
        this.success = [];
        var _etype681 = 0;
        _rtmp3682 = input.readListBegin();
        _etype681 = _rtmp3682.etype;
        _size678 = _rtmp3682.size;
        for (var _i683 = 0; _i683 < _size678; ++_i683)
        {
          var elem684 = null;
          elem684 = input.readString();
          this.success.push(elem684);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getJoinedGroupIdsForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getJoinedGroupIdsForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter685 in this.success)
    {
      if (this.success.hasOwnProperty(iter685))
      {
        iter685 = this.success[iter685];
        output.writeString(iter685);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMetaProfile_args = function(args) {
};
LineService_getMetaProfile_args.prototype = {};
LineService_getMetaProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMetaProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMetaProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMetaProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MetaProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMetaProfile_result.prototype = {};
LineService_getMetaProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MetaProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMetaProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMetaProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMid_args = function(args) {
};
LineService_getMid_args.prototype = {};
LineService_getMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMid_result.prototype = {};
LineService_getMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPrimaryClientForChannel_args = function(args) {
};
LineService_getPrimaryClientForChannel_args.prototype = {};
LineService_getPrimaryClientForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPrimaryClientForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPrimaryClientForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPrimaryClientForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SimpleChannelClient(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPrimaryClientForChannel_result.prototype = {};
LineService_getPrimaryClientForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SimpleChannelClient();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPrimaryClientForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPrimaryClientForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProfileForChannel_args = function(args) {
};
LineService_getProfileForChannel_args.prototype = {};
LineService_getProfileForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProfileForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProfileForChannel_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProfileForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Profile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProfileForChannel_result.prototype = {};
LineService_getProfileForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProfileForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProfileForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSimpleChannelContacts_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
LineService_getSimpleChannelContacts_args.prototype = {};
LineService_getSimpleChannelContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size686 = 0;
        var _rtmp3690;
        this.ids = [];
        var _etype689 = 0;
        _rtmp3690 = input.readListBegin();
        _etype689 = _rtmp3690.etype;
        _size686 = _rtmp3690.size;
        for (var _i691 = 0; _i691 < _size686; ++_i691)
        {
          var elem692 = null;
          elem692 = input.readString();
          this.ids.push(elem692);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSimpleChannelContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSimpleChannelContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter693 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter693))
      {
        iter693 = this.ids[iter693];
        output.writeString(iter693);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSimpleChannelContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.SimpleChannelContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSimpleChannelContacts_result.prototype = {};
LineService_getSimpleChannelContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size694 = 0;
        var _rtmp3698;
        this.success = [];
        var _etype697 = 0;
        _rtmp3698 = input.readListBegin();
        _etype697 = _rtmp3698.etype;
        _size694 = _rtmp3698.size;
        for (var _i699 = 0; _i699 < _size694; ++_i699)
        {
          var elem700 = null;
          elem700 = new ttypes.SimpleChannelContact();
          elem700.read(input);
          this.success.push(elem700);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSimpleChannelContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSimpleChannelContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter701 in this.success)
    {
      if (this.success.hasOwnProperty(iter701))
      {
        iter701 = this.success[iter701];
        iter701.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserCountryForBilling_args = function(args) {
  this.country = null;
  this.remoteIp = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.remoteIp !== undefined && args.remoteIp !== null) {
      this.remoteIp = args.remoteIp;
    }
  }
};
LineService_getUserCountryForBilling_args.prototype = {};
LineService_getUserCountryForBilling_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.remoteIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserCountryForBilling_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserCountryForBilling_args');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.remoteIp !== null && this.remoteIp !== undefined) {
    output.writeFieldBegin('remoteIp', Thrift.Type.STRING, 3);
    output.writeString(this.remoteIp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserCountryForBilling_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUserCountryForBilling_result.prototype = {};
LineService_getUserCountryForBilling_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserCountryForBilling_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserCountryForBilling_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserCreateTime_args = function(args) {
};
LineService_getUserCreateTime_args.prototype = {};
LineService_getUserCreateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserCreateTime_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserCreateTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserCreateTime_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUserCreateTime_result.prototype = {};
LineService_getUserCreateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserCreateTime_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserCreateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserIdentities_args = function(args) {
};
LineService_getUserIdentities_args.prototype = {};
LineService_getUserIdentities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserIdentities_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserIdentities_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserIdentities_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUserIdentities_result.prototype = {};
LineService_getUserIdentities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size702 = 0;
        var _rtmp3706;
        this.success = {};
        var _ktype703 = 0;
        var _vtype704 = 0;
        _rtmp3706 = input.readMapBegin();
        _ktype703 = _rtmp3706.ktype;
        _vtype704 = _rtmp3706.vtype;
        _size702 = _rtmp3706.size;
        for (var _i707 = 0; _i707 < _size702; ++_i707)
        {
          var key708 = null;
          var val709 = null;
          key708 = input.readI32();
          val709 = input.readString();
          this.success[key708] = val709;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserIdentities_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserIdentities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter710 in this.success)
    {
      if (this.success.hasOwnProperty(kiter710))
      {
        var viter711 = this.success[kiter710];
        output.writeI32(kiter710);
        output.writeString(viter711);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserLanguage_args = function(args) {
};
LineService_getUserLanguage_args.prototype = {};
LineService_getUserLanguage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserLanguage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserLanguage_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserLanguage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUserLanguage_result.prototype = {};
LineService_getUserLanguage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserLanguage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserLanguage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserMidsWhoAddedMe_args = function(args) {
};
LineService_getUserMidsWhoAddedMe_args.prototype = {};
LineService_getUserMidsWhoAddedMe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserMidsWhoAddedMe_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserMidsWhoAddedMe_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserMidsWhoAddedMe_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUserMidsWhoAddedMe_result.prototype = {};
LineService_getUserMidsWhoAddedMe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size712 = 0;
        var _rtmp3716;
        this.success = [];
        var _etype715 = 0;
        _rtmp3716 = input.readListBegin();
        _etype715 = _rtmp3716.etype;
        _size712 = _rtmp3716.size;
        for (var _i717 = 0; _i717 < _size712; ++_i717)
        {
          var elem718 = null;
          elem718 = input.readString();
          this.success.push(elem718);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserMidsWhoAddedMe_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserMidsWhoAddedMe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter719 in this.success)
    {
      if (this.success.hasOwnProperty(iter719))
      {
        iter719 = this.success[iter719];
        output.writeString(iter719);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isGroupMember_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_isGroupMember_args.prototype = {};
LineService_isGroupMember_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isGroupMember_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_isGroupMember_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isGroupMember_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_isGroupMember_result.prototype = {};
LineService_isGroupMember_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isGroupMember_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_isGroupMember_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isInContact_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_isInContact_args.prototype = {};
LineService_isInContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isInContact_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_isInContact_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isInContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_isInContact_result.prototype = {};
LineService_isInContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isInContact_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_isInContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerChannelCP_args = function(args) {
  this.cpId = null;
  this.registerPassword = null;
  if (args) {
    if (args.cpId !== undefined && args.cpId !== null) {
      this.cpId = args.cpId;
    }
    if (args.registerPassword !== undefined && args.registerPassword !== null) {
      this.registerPassword = args.registerPassword;
    }
  }
};
LineService_registerChannelCP_args.prototype = {};
LineService_registerChannelCP_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cpId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registerPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerChannelCP_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerChannelCP_args');
  if (this.cpId !== null && this.cpId !== undefined) {
    output.writeFieldBegin('cpId', Thrift.Type.STRING, 2);
    output.writeString(this.cpId);
    output.writeFieldEnd();
  }
  if (this.registerPassword !== null && this.registerPassword !== undefined) {
    output.writeFieldBegin('registerPassword', Thrift.Type.STRING, 3);
    output.writeString(this.registerPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerChannelCP_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerChannelCP_result.prototype = {};
LineService_registerChannelCP_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerChannelCP_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerChannelCP_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeNotificationStatus_args = function(args) {
  this.notificationStatus = null;
  if (args) {
    if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
      this.notificationStatus = args.notificationStatus;
    }
  }
};
LineService_removeNotificationStatus_args.prototype = {};
LineService_removeNotificationStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.notificationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeNotificationStatus_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeNotificationStatus_args');
  if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
    output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 2);
    output.writeI32(this.notificationStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeNotificationStatus_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeNotificationStatus_result.prototype = {};
LineService_removeNotificationStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeNotificationStatus_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeNotificationStatus_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageForChannel_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
LineService_sendMessageForChannel_args.prototype = {};
LineService_sendMessageForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageForChannel_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageForChannel_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendMessageForChannel_result.prototype = {};
LineService_sendMessageForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageForChannel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendPinCodeOperation_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_sendPinCodeOperation_args.prototype = {};
LineService_sendPinCodeOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendPinCodeOperation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendPinCodeOperation_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 1);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendPinCodeOperation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendPinCodeOperation_result.prototype = {};
LineService_sendPinCodeOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendPinCodeOperation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendPinCodeOperation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateProfileAttributeForChannel_args = function(args) {
  this.profileAttribute = null;
  this.value = null;
  if (args) {
    if (args.profileAttribute !== undefined && args.profileAttribute !== null) {
      this.profileAttribute = args.profileAttribute;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
LineService_updateProfileAttributeForChannel_args.prototype = {};
LineService_updateProfileAttributeForChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.profileAttribute = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateProfileAttributeForChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateProfileAttributeForChannel_args');
  if (this.profileAttribute !== null && this.profileAttribute !== undefined) {
    output.writeFieldBegin('profileAttribute', Thrift.Type.I32, 2);
    output.writeI32(this.profileAttribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateProfileAttributeForChannel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateProfileAttributeForChannel_result.prototype = {};
LineService_updateProfileAttributeForChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateProfileAttributeForChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateProfileAttributeForChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_approveChannelAndIssueChannelToken_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
LineService_approveChannelAndIssueChannelToken_args.prototype = {};
LineService_approveChannelAndIssueChannelToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_approveChannelAndIssueChannelToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_approveChannelAndIssueChannelToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_approveChannelAndIssueChannelToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelToken(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_approveChannelAndIssueChannelToken_result.prototype = {};
LineService_approveChannelAndIssueChannelToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_approveChannelAndIssueChannelToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_approveChannelAndIssueChannelToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_approveChannelAndIssueRequestToken_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
  }
};
LineService_approveChannelAndIssueRequestToken_args.prototype = {};
LineService_approveChannelAndIssueRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_approveChannelAndIssueRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_approveChannelAndIssueRequestToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_approveChannelAndIssueRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_approveChannelAndIssueRequestToken_result.prototype = {};
LineService_approveChannelAndIssueRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_approveChannelAndIssueRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_approveChannelAndIssueRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchNotificationItems_args = function(args) {
  this.localRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
  }
};
LineService_fetchNotificationItems_args.prototype = {};
LineService_fetchNotificationItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchNotificationItems_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchNotificationItems_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchNotificationItems_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NotificationFetchResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_fetchNotificationItems_result.prototype = {};
LineService_fetchNotificationItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NotificationFetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchNotificationItems_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchNotificationItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getApprovedChannels_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_getApprovedChannels_args.prototype = {};
LineService_getApprovedChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getApprovedChannels_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getApprovedChannels_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getApprovedChannels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ApprovedChannelInfos(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getApprovedChannels_result.prototype = {};
LineService_getApprovedChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ApprovedChannelInfos();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getApprovedChannels_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getApprovedChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannelInfo_args = function(args) {
  this.channelId = null;
  this.locale = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_getChannelInfo_args.prototype = {};
LineService_getChannelInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannelInfo_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannelInfo_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannelInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelInfo(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getChannelInfo_result.prototype = {};
LineService_getChannelInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannelInfo_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannelInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannelNotificationSetting_args = function(args) {
  this.channelId = null;
  this.locale = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_getChannelNotificationSetting_args.prototype = {};
LineService_getChannelNotificationSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannelNotificationSetting_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannelNotificationSetting_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 2);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannelNotificationSetting_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelNotificationSetting(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getChannelNotificationSetting_result.prototype = {};
LineService_getChannelNotificationSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelNotificationSetting();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannelNotificationSetting_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannelNotificationSetting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannelNotificationSettings_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_getChannelNotificationSettings_args.prototype = {};
LineService_getChannelNotificationSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannelNotificationSettings_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannelNotificationSettings_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannelNotificationSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ChannelNotificationSetting]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getChannelNotificationSettings_result.prototype = {};
LineService_getChannelNotificationSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size720 = 0;
        var _rtmp3724;
        this.success = [];
        var _etype723 = 0;
        _rtmp3724 = input.readListBegin();
        _etype723 = _rtmp3724.etype;
        _size720 = _rtmp3724.size;
        for (var _i725 = 0; _i725 < _size720; ++_i725)
        {
          var elem726 = null;
          elem726 = new ttypes.ChannelNotificationSetting();
          elem726.read(input);
          this.success.push(elem726);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannelNotificationSettings_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannelNotificationSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter727 in this.success)
    {
      if (this.success.hasOwnProperty(iter727))
      {
        iter727 = this.success[iter727];
        iter727.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannels_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_getChannels_args.prototype = {};
LineService_getChannels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannels_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannels_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getChannels_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelInfos(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getChannels_result.prototype = {};
LineService_getChannels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelInfos();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getChannels_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getChannels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getDomains_args = function(args) {
  this.lastSynced = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
  }
};
LineService_getDomains_args.prototype = {};
LineService_getDomains_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getDomains_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getDomains_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getDomains_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelDomains(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getDomains_result.prototype = {};
LineService_getDomains_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelDomains();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getDomains_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getDomains_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFriendChannelMatrices_args = function(args) {
  this.channelIds = null;
  if (args) {
    if (args.channelIds !== undefined && args.channelIds !== null) {
      this.channelIds = Thrift.copyList(args.channelIds, [null]);
    }
  }
};
LineService_getFriendChannelMatrices_args.prototype = {};
LineService_getFriendChannelMatrices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size728 = 0;
        var _rtmp3732;
        this.channelIds = [];
        var _etype731 = 0;
        _rtmp3732 = input.readListBegin();
        _etype731 = _rtmp3732.etype;
        _size728 = _rtmp3732.size;
        for (var _i733 = 0; _i733 < _size728; ++_i733)
        {
          var elem734 = null;
          elem734 = input.readString();
          this.channelIds.push(elem734);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFriendChannelMatrices_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFriendChannelMatrices_args');
  if (this.channelIds !== null && this.channelIds !== undefined) {
    output.writeFieldBegin('channelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.channelIds.length);
    for (var iter735 in this.channelIds)
    {
      if (this.channelIds.hasOwnProperty(iter735))
      {
        iter735 = this.channelIds[iter735];
        output.writeString(iter735);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFriendChannelMatrices_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FriendChannelMatricesResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getFriendChannelMatrices_result.prototype = {};
LineService_getFriendChannelMatrices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FriendChannelMatricesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFriendChannelMatrices_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFriendChannelMatrices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNotificationBadgeCount_args = function(args) {
  this.localRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
  }
};
LineService_getNotificationBadgeCount_args.prototype = {};
LineService_getNotificationBadgeCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNotificationBadgeCount_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNotificationBadgeCount_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNotificationBadgeCount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getNotificationBadgeCount_result.prototype = {};
LineService_getNotificationBadgeCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNotificationBadgeCount_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNotificationBadgeCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_issueChannelToken_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
LineService_issueChannelToken_args.prototype = {};
LineService_issueChannelToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_issueChannelToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_issueChannelToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_issueChannelToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelToken(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_issueChannelToken_result.prototype = {};
LineService_issueChannelToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelToken();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_issueChannelToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_issueChannelToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_issueRequestToken_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
  }
};
LineService_issueRequestToken_args.prototype = {};
LineService_issueRequestToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_issueRequestToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_issueRequestToken_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_issueRequestToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_issueRequestToken_result.prototype = {};
LineService_issueRequestToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_issueRequestToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_issueRequestToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_issueRequestTokenWithAuthScheme_args = function(args) {
  this.channelId = null;
  this.otpId = null;
  this.authScheme = null;
  this.returnUrl = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
    if (args.authScheme !== undefined && args.authScheme !== null) {
      this.authScheme = Thrift.copyList(args.authScheme, [null]);
    }
    if (args.returnUrl !== undefined && args.returnUrl !== null) {
      this.returnUrl = args.returnUrl;
    }
  }
};
LineService_issueRequestTokenWithAuthScheme_args.prototype = {};
LineService_issueRequestTokenWithAuthScheme_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size736 = 0;
        var _rtmp3740;
        this.authScheme = [];
        var _etype739 = 0;
        _rtmp3740 = input.readListBegin();
        _etype739 = _rtmp3740.etype;
        _size736 = _rtmp3740.size;
        for (var _i741 = 0; _i741 < _size736; ++_i741)
        {
          var elem742 = null;
          elem742 = input.readString();
          this.authScheme.push(elem742);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_issueRequestTokenWithAuthScheme_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_issueRequestTokenWithAuthScheme_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 2);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  if (this.authScheme !== null && this.authScheme !== undefined) {
    output.writeFieldBegin('authScheme', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.authScheme.length);
    for (var iter743 in this.authScheme)
    {
      if (this.authScheme.hasOwnProperty(iter743))
      {
        iter743 = this.authScheme[iter743];
        output.writeString(iter743);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 4);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_issueRequestTokenWithAuthScheme_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RequestTokenResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_issueRequestTokenWithAuthScheme_result.prototype = {};
LineService_issueRequestTokenWithAuthScheme_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RequestTokenResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_issueRequestTokenWithAuthScheme_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_issueRequestTokenWithAuthScheme_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reserveCoinUse_args = function(args) {
  this.request = null;
  this.locale = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CoinUseReservation(args.request);
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_reserveCoinUse_args.prototype = {};
LineService_reserveCoinUse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CoinUseReservation();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reserveCoinUse_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reserveCoinUse_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reserveCoinUse_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reserveCoinUse_result.prototype = {};
LineService_reserveCoinUse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reserveCoinUse_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reserveCoinUse_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_revokeChannel_args = function(args) {
  this.channelId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
LineService_revokeChannel_args.prototype = {};
LineService_revokeChannel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_revokeChannel_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_revokeChannel_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_revokeChannel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_revokeChannel_result.prototype = {};
LineService_revokeChannel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_revokeChannel_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_revokeChannel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_syncChannelData_args = function(args) {
  this.lastSynced = null;
  this.locale = null;
  if (args) {
    if (args.lastSynced !== undefined && args.lastSynced !== null) {
      this.lastSynced = args.lastSynced;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_syncChannelData_args.prototype = {};
LineService_syncChannelData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastSynced = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_syncChannelData_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_syncChannelData_args');
  if (this.lastSynced !== null && this.lastSynced !== undefined) {
    output.writeFieldBegin('lastSynced', Thrift.Type.I64, 2);
    output.writeI64(this.lastSynced);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_syncChannelData_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ChannelSyncDatas(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_syncChannelData_result.prototype = {};
LineService_syncChannelData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChannelSyncDatas();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_syncChannelData_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_syncChannelData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateChannelNotificationSetting_args = function(args) {
  this.setting = null;
  if (args) {
    if (args.setting !== undefined && args.setting !== null) {
      this.setting = Thrift.copyList(args.setting, [ttypes.ChannelNotificationSetting]);
    }
  }
};
LineService_updateChannelNotificationSetting_args.prototype = {};
LineService_updateChannelNotificationSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size744 = 0;
        var _rtmp3748;
        this.setting = [];
        var _etype747 = 0;
        _rtmp3748 = input.readListBegin();
        _etype747 = _rtmp3748.etype;
        _size744 = _rtmp3748.size;
        for (var _i749 = 0; _i749 < _size744; ++_i749)
        {
          var elem750 = null;
          elem750 = new ttypes.ChannelNotificationSetting();
          elem750.read(input);
          this.setting.push(elem750);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateChannelNotificationSetting_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateChannelNotificationSetting_args');
  if (this.setting !== null && this.setting !== undefined) {
    output.writeFieldBegin('setting', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.setting.length);
    for (var iter751 in this.setting)
    {
      if (this.setting.hasOwnProperty(iter751))
      {
        iter751 = this.setting[iter751];
        iter751.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateChannelNotificationSetting_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ChannelException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateChannelNotificationSetting_result.prototype = {};
LineService_updateChannelNotificationSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ChannelException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateChannelNotificationSetting_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateChannelNotificationSetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchMessageOperations_args = function(args) {
  this.localRevision = null;
  this.lastOpTimestamp = null;
  this.count = null;
  if (args) {
    if (args.localRevision !== undefined && args.localRevision !== null) {
      this.localRevision = args.localRevision;
    }
    if (args.lastOpTimestamp !== undefined && args.lastOpTimestamp !== null) {
      this.lastOpTimestamp = args.lastOpTimestamp;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
LineService_fetchMessageOperations_args.prototype = {};
LineService_fetchMessageOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastOpTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchMessageOperations_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchMessageOperations_args');
  if (this.localRevision !== null && this.localRevision !== undefined) {
    output.writeFieldBegin('localRevision', Thrift.Type.I64, 2);
    output.writeI64(this.localRevision);
    output.writeFieldEnd();
  }
  if (this.lastOpTimestamp !== null && this.lastOpTimestamp !== undefined) {
    output.writeFieldBegin('lastOpTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.lastOpTimestamp);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchMessageOperations_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MessageOperations(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_fetchMessageOperations_result.prototype = {};
LineService_fetchMessageOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MessageOperations();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchMessageOperations_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchMessageOperations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getLastReadMessageIds_args = function(args) {
  this.chatId = null;
  if (args) {
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
  }
};
LineService_getLastReadMessageIds_args.prototype = {};
LineService_getLastReadMessageIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getLastReadMessageIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getLastReadMessageIds_args');
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 2);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getLastReadMessageIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LastReadMessageIds(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getLastReadMessageIds_result.prototype = {};
LineService_getLastReadMessageIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LastReadMessageIds();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getLastReadMessageIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getLastReadMessageIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_multiGetLastReadMessageIds_args = function(args) {
  this.chatIds = null;
  if (args) {
    if (args.chatIds !== undefined && args.chatIds !== null) {
      this.chatIds = Thrift.copyList(args.chatIds, [null]);
    }
  }
};
LineService_multiGetLastReadMessageIds_args.prototype = {};
LineService_multiGetLastReadMessageIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size752 = 0;
        var _rtmp3756;
        this.chatIds = [];
        var _etype755 = 0;
        _rtmp3756 = input.readListBegin();
        _etype755 = _rtmp3756.etype;
        _size752 = _rtmp3756.size;
        for (var _i757 = 0; _i757 < _size752; ++_i757)
        {
          var elem758 = null;
          elem758 = input.readString();
          this.chatIds.push(elem758);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_multiGetLastReadMessageIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_multiGetLastReadMessageIds_args');
  if (this.chatIds !== null && this.chatIds !== undefined) {
    output.writeFieldBegin('chatIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.chatIds.length);
    for (var iter759 in this.chatIds)
    {
      if (this.chatIds.hasOwnProperty(iter759))
      {
        iter759 = this.chatIds[iter759];
        output.writeString(iter759);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_multiGetLastReadMessageIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LastReadMessageIds]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_multiGetLastReadMessageIds_result.prototype = {};
LineService_multiGetLastReadMessageIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size760 = 0;
        var _rtmp3764;
        this.success = [];
        var _etype763 = 0;
        _rtmp3764 = input.readListBegin();
        _etype763 = _rtmp3764.etype;
        _size760 = _rtmp3764.size;
        for (var _i765 = 0; _i765 < _size760; ++_i765)
        {
          var elem766 = null;
          elem766 = new ttypes.LastReadMessageIds();
          elem766.read(input);
          this.success.push(elem766);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_multiGetLastReadMessageIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_multiGetLastReadMessageIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter767 in this.success)
    {
      if (this.success.hasOwnProperty(iter767))
      {
        iter767 = this.success[iter767];
        iter767.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_buyCoinProduct_args = function(args) {
  this.paymentReservation = null;
  if (args) {
    if (args.paymentReservation !== undefined && args.paymentReservation !== null) {
      this.paymentReservation = new ttypes.PaymentReservation(args.paymentReservation);
    }
  }
};
LineService_buyCoinProduct_args.prototype = {};
LineService_buyCoinProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paymentReservation = new ttypes.PaymentReservation();
        this.paymentReservation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_buyCoinProduct_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_buyCoinProduct_args');
  if (this.paymentReservation !== null && this.paymentReservation !== undefined) {
    output.writeFieldBegin('paymentReservation', Thrift.Type.STRUCT, 2);
    this.paymentReservation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_buyCoinProduct_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_buyCoinProduct_result.prototype = {};
LineService_buyCoinProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_buyCoinProduct_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_buyCoinProduct_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_buyFreeProduct_args = function(args) {
  this.receiverMid = null;
  this.productId = null;
  this.messageTemplate = null;
  this.language = null;
  this.country = null;
  this.packageId = null;
  if (args) {
    if (args.receiverMid !== undefined && args.receiverMid !== null) {
      this.receiverMid = args.receiverMid;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
      this.messageTemplate = args.messageTemplate;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
  }
};
LineService_buyFreeProduct_args.prototype = {};
LineService_buyFreeProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiverMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messageTemplate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_buyFreeProduct_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_buyFreeProduct_args');
  if (this.receiverMid !== null && this.receiverMid !== undefined) {
    output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 2);
    output.writeString(this.receiverMid);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 3);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
    output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 4);
    output.writeI32(this.messageTemplate);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 5);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 6);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 7);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_buyFreeProduct_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_buyFreeProduct_result.prototype = {};
LineService_buyFreeProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_buyFreeProduct_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_buyFreeProduct_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_buyMustbuyProduct_args = function(args) {
  this.receiverMid = null;
  this.productId = null;
  this.messageTemplate = null;
  this.language = null;
  this.country = null;
  this.packageId = null;
  this.serialNumber = null;
  if (args) {
    if (args.receiverMid !== undefined && args.receiverMid !== null) {
      this.receiverMid = args.receiverMid;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
      this.messageTemplate = args.messageTemplate;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.serialNumber !== undefined && args.serialNumber !== null) {
      this.serialNumber = args.serialNumber;
    }
  }
};
LineService_buyMustbuyProduct_args.prototype = {};
LineService_buyMustbuyProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.receiverMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messageTemplate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_buyMustbuyProduct_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_buyMustbuyProduct_args');
  if (this.receiverMid !== null && this.receiverMid !== undefined) {
    output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 2);
    output.writeString(this.receiverMid);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 3);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
    output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 4);
    output.writeI32(this.messageTemplate);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 5);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 6);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 7);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 8);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_buyMustbuyProduct_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_buyMustbuyProduct_result.prototype = {};
LineService_buyMustbuyProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_buyMustbuyProduct_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_buyMustbuyProduct_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_checkCanReceivePresent_args = function(args) {
  this.recipientMid = null;
  this.packageId = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.recipientMid !== undefined && args.recipientMid !== null) {
      this.recipientMid = args.recipientMid;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_checkCanReceivePresent_args.prototype = {};
LineService_checkCanReceivePresent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.recipientMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_checkCanReceivePresent_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_checkCanReceivePresent_args');
  if (this.recipientMid !== null && this.recipientMid !== undefined) {
    output.writeFieldBegin('recipientMid', Thrift.Type.STRING, 2);
    output.writeString(this.recipientMid);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 3);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_checkCanReceivePresent_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_checkCanReceivePresent_result.prototype = {};
LineService_checkCanReceivePresent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_checkCanReceivePresent_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_checkCanReceivePresent_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActivePurchases_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getActivePurchases_args.prototype = {};
LineService_getActivePurchases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActivePurchases_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActivePurchases_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActivePurchases_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getActivePurchases_result.prototype = {};
LineService_getActivePurchases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActivePurchases_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActivePurchases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActivePurchaseVersions_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getActivePurchaseVersions_args.prototype = {};
LineService_getActivePurchaseVersions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActivePurchaseVersions_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActivePurchaseVersions_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActivePurchaseVersions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductSimpleList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getActivePurchaseVersions_result.prototype = {};
LineService_getActivePurchaseVersions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductSimpleList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActivePurchaseVersions_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActivePurchaseVersions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinProducts_args = function(args) {
  this.appStoreCode = null;
  this.country = null;
  this.language = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
LineService_getCoinProducts_args.prototype = {};
LineService_getCoinProducts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinProducts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinProducts_args');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinProducts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.CoinProductItem]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCoinProducts_result.prototype = {};
LineService_getCoinProducts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size768 = 0;
        var _rtmp3772;
        this.success = [];
        var _etype771 = 0;
        _rtmp3772 = input.readListBegin();
        _etype771 = _rtmp3772.etype;
        _size768 = _rtmp3772.size;
        for (var _i773 = 0; _i773 < _size768; ++_i773)
        {
          var elem774 = null;
          elem774 = new ttypes.CoinProductItem();
          elem774.read(input);
          this.success.push(elem774);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinProducts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinProducts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter775 in this.success)
    {
      if (this.success.hasOwnProperty(iter775))
      {
        iter775 = this.success[iter775];
        iter775.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinProductsByPgCode_args = function(args) {
  this.appStoreCode = null;
  this.pgCode = null;
  this.country = null;
  this.language = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.pgCode !== undefined && args.pgCode !== null) {
      this.pgCode = args.pgCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
LineService_getCoinProductsByPgCode_args.prototype = {};
LineService_getCoinProductsByPgCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pgCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinProductsByPgCode_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinProductsByPgCode_args');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.pgCode !== null && this.pgCode !== undefined) {
    output.writeFieldBegin('pgCode', Thrift.Type.I32, 3);
    output.writeI32(this.pgCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 5);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinProductsByPgCode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.CoinProductItem]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCoinProductsByPgCode_result.prototype = {};
LineService_getCoinProductsByPgCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size776 = 0;
        var _rtmp3780;
        this.success = [];
        var _etype779 = 0;
        _rtmp3780 = input.readListBegin();
        _etype779 = _rtmp3780.etype;
        _size776 = _rtmp3780.size;
        for (var _i781 = 0; _i781 < _size776; ++_i781)
        {
          var elem782 = null;
          elem782 = new ttypes.CoinProductItem();
          elem782.read(input);
          this.success.push(elem782);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinProductsByPgCode_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinProductsByPgCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter783 in this.success)
    {
      if (this.success.hasOwnProperty(iter783))
      {
        iter783 = this.success[iter783];
        iter783.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinPurchaseHistory_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CoinHistoryCondition(args.request);
    }
  }
};
LineService_getCoinPurchaseHistory_args.prototype = {};
LineService_getCoinPurchaseHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CoinHistoryCondition();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinPurchaseHistory_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinPurchaseHistory_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinPurchaseHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CoinHistoryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCoinPurchaseHistory_result.prototype = {};
LineService_getCoinPurchaseHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CoinHistoryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinPurchaseHistory_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinPurchaseHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinUseAndRefundHistory_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CoinHistoryCondition(args.request);
    }
  }
};
LineService_getCoinUseAndRefundHistory_args.prototype = {};
LineService_getCoinUseAndRefundHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CoinHistoryCondition();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinUseAndRefundHistory_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinUseAndRefundHistory_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCoinUseAndRefundHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CoinHistoryResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCoinUseAndRefundHistory_result.prototype = {};
LineService_getCoinUseAndRefundHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CoinHistoryResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCoinUseAndRefundHistory_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCoinUseAndRefundHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getDownloads_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getDownloads_args.prototype = {};
LineService_getDownloads_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getDownloads_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getDownloads_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getDownloads_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getDownloads_result.prototype = {};
LineService_getDownloads_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getDownloads_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getDownloads_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getEventPackages_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getEventPackages_args.prototype = {};
LineService_getEventPackages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getEventPackages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getEventPackages_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getEventPackages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getEventPackages_result.prototype = {};
LineService_getEventPackages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getEventPackages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getEventPackages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNewlyReleasedPackages_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getNewlyReleasedPackages_args.prototype = {};
LineService_getNewlyReleasedPackages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNewlyReleasedPackages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNewlyReleasedPackages_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNewlyReleasedPackages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getNewlyReleasedPackages_result.prototype = {};
LineService_getNewlyReleasedPackages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNewlyReleasedPackages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNewlyReleasedPackages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPopularPackages_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getPopularPackages_args.prototype = {};
LineService_getPopularPackages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPopularPackages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPopularPackages_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPopularPackages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPopularPackages_result.prototype = {};
LineService_getPopularPackages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPopularPackages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPopularPackages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPresentsReceived_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getPresentsReceived_args.prototype = {};
LineService_getPresentsReceived_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPresentsReceived_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPresentsReceived_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPresentsReceived_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPresentsReceived_result.prototype = {};
LineService_getPresentsReceived_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPresentsReceived_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPresentsReceived_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPresentsSent_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getPresentsSent_args.prototype = {};
LineService_getPresentsSent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPresentsSent_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPresentsSent_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPresentsSent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPresentsSent_result.prototype = {};
LineService_getPresentsSent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPresentsSent_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPresentsSent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProduct_args = function(args) {
  this.packageID = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.packageID !== undefined && args.packageID !== null) {
      this.packageID = args.packageID;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getProduct_args.prototype = {};
LineService_getProduct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProduct_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProduct_args');
  if (this.packageID !== null && this.packageID !== undefined) {
    output.writeFieldBegin('packageID', Thrift.Type.I64, 2);
    output.writeI64(this.packageID);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProduct_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Product(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProduct_result.prototype = {};
LineService_getProduct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Product();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProduct_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProduct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProductList_args = function(args) {
  this.productIdList = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.productIdList !== undefined && args.productIdList !== null) {
      this.productIdList = Thrift.copyList(args.productIdList, [null]);
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getProductList_args.prototype = {};
LineService_getProductList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size784 = 0;
        var _rtmp3788;
        this.productIdList = [];
        var _etype787 = 0;
        _rtmp3788 = input.readListBegin();
        _etype787 = _rtmp3788.etype;
        _size784 = _rtmp3788.size;
        for (var _i789 = 0; _i789 < _size784; ++_i789)
        {
          var elem790 = null;
          elem790 = input.readString();
          this.productIdList.push(elem790);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProductList_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProductList_args');
  if (this.productIdList !== null && this.productIdList !== undefined) {
    output.writeFieldBegin('productIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.productIdList.length);
    for (var iter791 in this.productIdList)
    {
      if (this.productIdList.hasOwnProperty(iter791))
      {
        iter791 = this.productIdList[iter791];
        output.writeString(iter791);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProductList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProductList_result.prototype = {};
LineService_getProductList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProductList_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProductList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProductListWithCarrier_args = function(args) {
  this.productIdList = null;
  this.language = null;
  this.country = null;
  this.carrierCode = null;
  if (args) {
    if (args.productIdList !== undefined && args.productIdList !== null) {
      this.productIdList = Thrift.copyList(args.productIdList, [null]);
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.carrierCode !== undefined && args.carrierCode !== null) {
      this.carrierCode = args.carrierCode;
    }
  }
};
LineService_getProductListWithCarrier_args.prototype = {};
LineService_getProductListWithCarrier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size792 = 0;
        var _rtmp3796;
        this.productIdList = [];
        var _etype795 = 0;
        _rtmp3796 = input.readListBegin();
        _etype795 = _rtmp3796.etype;
        _size792 = _rtmp3796.size;
        for (var _i797 = 0; _i797 < _size792; ++_i797)
        {
          var elem798 = null;
          elem798 = input.readString();
          this.productIdList.push(elem798);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.carrierCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProductListWithCarrier_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProductListWithCarrier_args');
  if (this.productIdList !== null && this.productIdList !== undefined) {
    output.writeFieldBegin('productIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.productIdList.length);
    for (var iter799 in this.productIdList)
    {
      if (this.productIdList.hasOwnProperty(iter799))
      {
        iter799 = this.productIdList[iter799];
        output.writeString(iter799);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.carrierCode !== null && this.carrierCode !== undefined) {
    output.writeFieldBegin('carrierCode', Thrift.Type.STRING, 5);
    output.writeString(this.carrierCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProductListWithCarrier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProductListWithCarrier_result.prototype = {};
LineService_getProductListWithCarrier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProductListWithCarrier_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProductListWithCarrier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProductWithCarrier_args = function(args) {
  this.packageID = null;
  this.language = null;
  this.country = null;
  this.carrierCode = null;
  if (args) {
    if (args.packageID !== undefined && args.packageID !== null) {
      this.packageID = args.packageID;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.carrierCode !== undefined && args.carrierCode !== null) {
      this.carrierCode = args.carrierCode;
    }
  }
};
LineService_getProductWithCarrier_args.prototype = {};
LineService_getProductWithCarrier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.carrierCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProductWithCarrier_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProductWithCarrier_args');
  if (this.packageID !== null && this.packageID !== undefined) {
    output.writeFieldBegin('packageID', Thrift.Type.I64, 2);
    output.writeI64(this.packageID);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.carrierCode !== null && this.carrierCode !== undefined) {
    output.writeFieldBegin('carrierCode', Thrift.Type.STRING, 5);
    output.writeString(this.carrierCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProductWithCarrier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Product(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProductWithCarrier_result.prototype = {};
LineService_getProductWithCarrier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Product();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProductWithCarrier_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProductWithCarrier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPurchaseHistory_args = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.country = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
LineService_getPurchaseHistory_args.prototype = {};
LineService_getPurchaseHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPurchaseHistory_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPurchaseHistory_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 2);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 3);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPurchaseHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProductList(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPurchaseHistory_result.prototype = {};
LineService_getPurchaseHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProductList();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPurchaseHistory_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPurchaseHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getTotalBalance_args = function(args) {
  this.appStoreCode = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
  }
};
LineService_getTotalBalance_args.prototype = {};
LineService_getTotalBalance_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getTotalBalance_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getTotalBalance_args');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getTotalBalance_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Coin(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getTotalBalance_result.prototype = {};
LineService_getTotalBalance_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Coin();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getTotalBalance_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getTotalBalance_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyDownloaded_args = function(args) {
  this.packageId = null;
  this.language = null;
  if (args) {
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
  }
};
LineService_notifyDownloaded_args.prototype = {};
LineService_notifyDownloaded_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyDownloaded_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyDownloaded_args');
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyDownloaded_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyDownloaded_result.prototype = {};
LineService_notifyDownloaded_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyDownloaded_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyDownloaded_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reserveCoinPurchase_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.CoinPurchaseReservation(args.request);
    }
  }
};
LineService_reserveCoinPurchase_args.prototype = {};
LineService_reserveCoinPurchase_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CoinPurchaseReservation();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reserveCoinPurchase_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reserveCoinPurchase_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 2);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reserveCoinPurchase_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaymentReservationResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reserveCoinPurchase_result.prototype = {};
LineService_reserveCoinPurchase_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaymentReservationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reserveCoinPurchase_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reserveCoinPurchase_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reservePayment_args = function(args) {
  this.paymentReservation = null;
  if (args) {
    if (args.paymentReservation !== undefined && args.paymentReservation !== null) {
      this.paymentReservation = new ttypes.PaymentReservation(args.paymentReservation);
    }
  }
};
LineService_reservePayment_args.prototype = {};
LineService_reservePayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paymentReservation = new ttypes.PaymentReservation();
        this.paymentReservation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reservePayment_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reservePayment_args');
  if (this.paymentReservation !== null && this.paymentReservation !== undefined) {
    output.writeFieldBegin('paymentReservation', Thrift.Type.STRUCT, 2);
    this.paymentReservation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reservePayment_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PaymentReservationResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reservePayment_result.prototype = {};
LineService_reservePayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PaymentReservationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reservePayment_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reservePayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSnsFriends_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.startIdx = null;
  this.limit = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.startIdx !== undefined && args.startIdx !== null) {
      this.startIdx = args.startIdx;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
LineService_getSnsFriends_args.prototype = {};
LineService_getSnsFriends_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.startIdx = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSnsFriends_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSnsFriends_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.startIdx !== null && this.startIdx !== undefined) {
    output.writeFieldBegin('startIdx', Thrift.Type.I32, 4);
    output.writeI32(this.startIdx);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 5);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSnsFriends_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SnsFriends(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSnsFriends_result.prototype = {};
LineService_getSnsFriends_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SnsFriends();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSnsFriends_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSnsFriends_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSnsMyProfile_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
  }
};
LineService_getSnsMyProfile_args.prototype = {};
LineService_getSnsMyProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSnsMyProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSnsMyProfile_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSnsMyProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SnsProfile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSnsMyProfile_result.prototype = {};
LineService_getSnsMyProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SnsProfile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSnsMyProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSnsMyProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_postSnsInvitationMessage_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.toSnsUserId = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.toSnsUserId !== undefined && args.toSnsUserId !== null) {
      this.toSnsUserId = args.toSnsUserId;
    }
  }
};
LineService_postSnsInvitationMessage_args.prototype = {};
LineService_postSnsInvitationMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.toSnsUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_postSnsInvitationMessage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_postSnsInvitationMessage_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.toSnsUserId !== null && this.toSnsUserId !== undefined) {
    output.writeFieldBegin('toSnsUserId', Thrift.Type.STRING, 4);
    output.writeString(this.toSnsUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_postSnsInvitationMessage_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_postSnsInvitationMessage_result.prototype = {};
LineService_postSnsInvitationMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_postSnsInvitationMessage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_postSnsInvitationMessage_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acceptGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_acceptGroupInvitation_args.prototype = {};
LineService_acceptGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acceptGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_acceptGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acceptGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_acceptGroupInvitation_result.prototype = {};
LineService_acceptGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acceptGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_acceptGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acceptGroupInvitationByTicket_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.ticketId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
LineService_acceptGroupInvitationByTicket_args.prototype = {};
LineService_acceptGroupInvitationByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acceptGroupInvitationByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_acceptGroupInvitationByTicket_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 3);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acceptGroupInvitationByTicket_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_acceptGroupInvitationByTicket_result.prototype = {};
LineService_acceptGroupInvitationByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acceptGroupInvitationByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_acceptGroupInvitationByTicket_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findGroupByTicket_args = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
LineService_findGroupByTicket_args.prototype = {};
LineService_findGroupByTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findGroupByTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findGroupByTicket_args');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 1);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findGroupByTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findGroupByTicket_result.prototype = {};
LineService_findGroupByTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findGroupByTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findGroupByTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acceptProximityMatches_args = function(args) {
  this.sessionId = null;
  this.ids = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
LineService_acceptProximityMatches_args.prototype = {};
LineService_acceptProximityMatches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size800 = 0;
        var _rtmp3804;
        this.ids = [];
        var _etype803 = 0;
        _rtmp3804 = input.readSetBegin();
        _etype803 = _rtmp3804.etype;
        _size800 = _rtmp3804.size;
        for (var _i805 = 0; _i805 < _size800; ++_i805)
        {
          var elem806 = null;
          elem806 = input.readString();
          this.ids.push(elem806);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acceptProximityMatches_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_acceptProximityMatches_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter807 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter807))
      {
        iter807 = this.ids[iter807];
        output.writeString(iter807);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acceptProximityMatches_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_acceptProximityMatches_result.prototype = {};
LineService_acceptProximityMatches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acceptProximityMatches_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_acceptProximityMatches_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acquireCallRoute_args = function(args) {
  this.to = null;
  if (args) {
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
  }
};
LineService_acquireCallRoute_args.prototype = {};
LineService_acquireCallRoute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acquireCallRoute_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_acquireCallRoute_args');
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acquireCallRoute_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_acquireCallRoute_result.prototype = {};
LineService_acquireCallRoute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size808 = 0;
        var _rtmp3812;
        this.success = [];
        var _etype811 = 0;
        _rtmp3812 = input.readListBegin();
        _etype811 = _rtmp3812.etype;
        _size808 = _rtmp3812.size;
        for (var _i813 = 0; _i813 < _size808; ++_i813)
        {
          var elem814 = null;
          elem814 = input.readString();
          this.success.push(elem814);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acquireCallRoute_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_acquireCallRoute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter815 in this.success)
    {
      if (this.success.hasOwnProperty(iter815))
      {
        iter815 = this.success[iter815];
        output.writeString(iter815);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acquireCallTicket_args = function(args) {
  this.to = null;
  if (args) {
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
  }
};
LineService_acquireCallTicket_args.prototype = {};
LineService_acquireCallTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acquireCallTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_acquireCallTicket_args');
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acquireCallTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_acquireCallTicket_result.prototype = {};
LineService_acquireCallTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acquireCallTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_acquireCallTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acquireEncryptedAccessToken_args = function(args) {
  this.featureType = null;
  if (args) {
    if (args.featureType !== undefined && args.featureType !== null) {
      this.featureType = args.featureType;
    }
  }
};
LineService_acquireEncryptedAccessToken_args.prototype = {};
LineService_acquireEncryptedAccessToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.featureType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acquireEncryptedAccessToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_acquireEncryptedAccessToken_args');
  if (this.featureType !== null && this.featureType !== undefined) {
    output.writeFieldBegin('featureType', Thrift.Type.I32, 2);
    output.writeI32(this.featureType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_acquireEncryptedAccessToken_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_acquireEncryptedAccessToken_result.prototype = {};
LineService_acquireEncryptedAccessToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_acquireEncryptedAccessToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_acquireEncryptedAccessToken_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addSnsId_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
  }
};
LineService_addSnsId_args.prototype = {};
LineService_addSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_addSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_addSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_addSnsId_result.prototype = {};
LineService_addSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_addSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_addSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_blockContact_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
LineService_blockContact_args.prototype = {};
LineService_blockContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_blockContact_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_blockContact_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_blockContact_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_blockContact_result.prototype = {};
LineService_blockContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_blockContact_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_blockContact_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_blockRecommendation_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
LineService_blockRecommendation_args.prototype = {};
LineService_blockRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_blockRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_blockRecommendation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_blockRecommendation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_blockRecommendation_result.prototype = {};
LineService_blockRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_blockRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_blockRecommendation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_cancelGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
LineService_cancelGroupInvitation_args.prototype = {};
LineService_cancelGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size816 = 0;
        var _rtmp3820;
        this.contactIds = [];
        var _etype819 = 0;
        _rtmp3820 = input.readListBegin();
        _etype819 = _rtmp3820.etype;
        _size816 = _rtmp3820.size;
        for (var _i821 = 0; _i821 < _size816; ++_i821)
        {
          var elem822 = null;
          elem822 = input.readString();
          this.contactIds.push(elem822);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_cancelGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_cancelGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter823 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter823))
      {
        iter823 = this.contactIds[iter823];
        output.writeString(iter823);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_cancelGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_cancelGroupInvitation_result.prototype = {};
LineService_cancelGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_cancelGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_cancelGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_changeVerificationMethod_args = function(args) {
  this.sessionId = null;
  this.method = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
  }
};
LineService_changeVerificationMethod_args.prototype = {};
LineService_changeVerificationMethod_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_changeVerificationMethod_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_changeVerificationMethod_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 3);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_changeVerificationMethod_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerificationSessionData(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_changeVerificationMethod_result.prototype = {};
LineService_changeVerificationMethod_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerificationSessionData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_changeVerificationMethod_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_changeVerificationMethod_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_clearIdentityCredential_args = function(args) {
};
LineService_clearIdentityCredential_args.prototype = {};
LineService_clearIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_clearIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_clearIdentityCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_clearIdentityCredential_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_clearIdentityCredential_result.prototype = {};
LineService_clearIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_clearIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_clearIdentityCredential_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_clearMessageBox_args = function(args) {
  this.channelId = null;
  this.messageBoxId = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
  }
};
LineService_clearMessageBox_args.prototype = {};
LineService_clearMessageBox_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_clearMessageBox_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_clearMessageBox_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 3);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_clearMessageBox_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_clearMessageBox_result.prototype = {};
LineService_clearMessageBox_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_clearMessageBox_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_clearMessageBox_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_closeProximityMatch_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_closeProximityMatch_args.prototype = {};
LineService_closeProximityMatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_closeProximityMatch_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_closeProximityMatch_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_closeProximityMatch_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_closeProximityMatch_result.prototype = {};
LineService_closeProximityMatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_closeProximityMatch_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_closeProximityMatch_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessage_args = function(args) {
  this.seq = null;
  this.messageId = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
LineService_commitSendMessage_args.prototype = {};
LineService_commitSendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size824 = 0;
        var _rtmp3828;
        this.receiverMids = [];
        var _etype827 = 0;
        _rtmp3828 = input.readListBegin();
        _etype827 = _rtmp3828.etype;
        _size824 = _rtmp3828.size;
        for (var _i829 = 0; _i829 < _size824; ++_i829)
        {
          var elem830 = null;
          elem830 = input.readString();
          this.receiverMids.push(elem830);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter831 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter831))
      {
        iter831 = this.receiverMids[iter831];
        output.writeString(iter831);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_commitSendMessage_result.prototype = {};
LineService_commitSendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size832 = 0;
        var _rtmp3836;
        this.success = {};
        var _ktype833 = 0;
        var _vtype834 = 0;
        _rtmp3836 = input.readMapBegin();
        _ktype833 = _rtmp3836.ktype;
        _vtype834 = _rtmp3836.vtype;
        _size832 = _rtmp3836.size;
        for (var _i837 = 0; _i837 < _size832; ++_i837)
        {
          var key838 = null;
          var val839 = null;
          key838 = input.readString();
          val839 = input.readString();
          this.success[key838] = val839;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter840 in this.success)
    {
      if (this.success.hasOwnProperty(kiter840))
      {
        var viter841 = this.success[kiter840];
        output.writeString(kiter840);
        output.writeString(viter841);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessages_args = function(args) {
  this.seq = null;
  this.messageIds = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
LineService_commitSendMessages_args.prototype = {};
LineService_commitSendMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size842 = 0;
        var _rtmp3846;
        this.messageIds = [];
        var _etype845 = 0;
        _rtmp3846 = input.readListBegin();
        _etype845 = _rtmp3846.etype;
        _size842 = _rtmp3846.size;
        for (var _i847 = 0; _i847 < _size842; ++_i847)
        {
          var elem848 = null;
          elem848 = input.readString();
          this.messageIds.push(elem848);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size849 = 0;
        var _rtmp3853;
        this.receiverMids = [];
        var _etype852 = 0;
        _rtmp3853 = input.readListBegin();
        _etype852 = _rtmp3853.etype;
        _size849 = _rtmp3853.size;
        for (var _i854 = 0; _i854 < _size849; ++_i854)
        {
          var elem855 = null;
          elem855 = input.readString();
          this.receiverMids.push(elem855);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessages_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter856 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter856))
      {
        iter856 = this.messageIds[iter856];
        output.writeString(iter856);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter857 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter857))
      {
        iter857 = this.receiverMids[iter857];
        output.writeString(iter857);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitSendMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_commitSendMessages_result.prototype = {};
LineService_commitSendMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size858 = 0;
        var _rtmp3862;
        this.success = {};
        var _ktype859 = 0;
        var _vtype860 = 0;
        _rtmp3862 = input.readMapBegin();
        _ktype859 = _rtmp3862.ktype;
        _vtype860 = _rtmp3862.vtype;
        _size858 = _rtmp3862.size;
        for (var _i863 = 0; _i863 < _size858; ++_i863)
        {
          var key864 = null;
          var val865 = null;
          key864 = input.readString();
          val865 = input.readString();
          this.success[key864] = val865;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitSendMessages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitSendMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter866 in this.success)
    {
      if (this.success.hasOwnProperty(kiter866))
      {
        var viter867 = this.success[kiter866];
        output.writeString(kiter866);
        output.writeString(viter867);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitUpdateProfile_args = function(args) {
  this.seq = null;
  this.attrs = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.attrs !== undefined && args.attrs !== null) {
      this.attrs = Thrift.copyList(args.attrs, [null]);
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
LineService_commitUpdateProfile_args.prototype = {};
LineService_commitUpdateProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size868 = 0;
        var _rtmp3872;
        this.attrs = [];
        var _etype871 = 0;
        _rtmp3872 = input.readListBegin();
        _etype871 = _rtmp3872.etype;
        _size868 = _rtmp3872.size;
        for (var _i873 = 0; _i873 < _size868; ++_i873)
        {
          var elem874 = null;
          elem874 = input.readI32();
          this.attrs.push(elem874);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size875 = 0;
        var _rtmp3879;
        this.receiverMids = [];
        var _etype878 = 0;
        _rtmp3879 = input.readListBegin();
        _etype878 = _rtmp3879.etype;
        _size875 = _rtmp3879.size;
        for (var _i880 = 0; _i880 < _size875; ++_i880)
        {
          var elem881 = null;
          elem881 = input.readString();
          this.receiverMids.push(elem881);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitUpdateProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitUpdateProfile_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.attrs.length);
    for (var iter882 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(iter882))
      {
        iter882 = this.attrs[iter882];
        output.writeI32(iter882);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter883 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter883))
      {
        iter883 = this.receiverMids[iter883];
        output.writeString(iter883);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_commitUpdateProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_commitUpdateProfile_result.prototype = {};
LineService_commitUpdateProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size884 = 0;
        var _rtmp3888;
        this.success = {};
        var _ktype885 = 0;
        var _vtype886 = 0;
        _rtmp3888 = input.readMapBegin();
        _ktype885 = _rtmp3888.ktype;
        _vtype886 = _rtmp3888.vtype;
        _size884 = _rtmp3888.size;
        for (var _i889 = 0; _i889 < _size884; ++_i889)
        {
          var key890 = null;
          var val891 = null;
          key890 = input.readString();
          val891 = input.readString();
          this.success[key890] = val891;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_commitUpdateProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_commitUpdateProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter892 in this.success)
    {
      if (this.success.hasOwnProperty(kiter892))
      {
        var viter893 = this.success[kiter892];
        output.writeString(kiter892);
        output.writeString(viter893);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_confirmEmail_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
  }
};
LineService_confirmEmail_args.prototype = {};
LineService_confirmEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_confirmEmail_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_confirmEmail_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_confirmEmail_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_confirmEmail_result.prototype = {};
LineService_confirmEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_confirmEmail_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_confirmEmail_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createGroup_args = function(args) {
  this.seq = null;
  this.name = null;
  this.contactIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
LineService_createGroup_args.prototype = {};
LineService_createGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size894 = 0;
        var _rtmp3898;
        this.contactIds = [];
        var _etype897 = 0;
        _rtmp3898 = input.readListBegin();
        _etype897 = _rtmp3898.etype;
        _size894 = _rtmp3898.size;
        for (var _i899 = 0; _i899 < _size894; ++_i899)
        {
          var elem900 = null;
          elem900 = input.readString();
          this.contactIds.push(elem900);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_createGroup_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter901 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter901))
      {
        iter901 = this.contactIds[iter901];
        output.writeString(iter901);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_createGroup_result.prototype = {};
LineService_createGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_createGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createQrcodeBase64Image_args = function(args) {
  this.url = null;
  this.characterSet = null;
  this.imageSize = null;
  this.x = null;
  this.y = null;
  this.width = null;
  this.height = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.characterSet !== undefined && args.characterSet !== null) {
      this.characterSet = args.characterSet;
    }
    if (args.imageSize !== undefined && args.imageSize !== null) {
      this.imageSize = args.imageSize;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
  }
};
LineService_createQrcodeBase64Image_args.prototype = {};
LineService_createQrcodeBase64Image_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.characterSet = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.imageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createQrcodeBase64Image_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_createQrcodeBase64Image_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.characterSet !== null && this.characterSet !== undefined) {
    output.writeFieldBegin('characterSet', Thrift.Type.STRING, 3);
    output.writeString(this.characterSet);
    output.writeFieldEnd();
  }
  if (this.imageSize !== null && this.imageSize !== undefined) {
    output.writeFieldBegin('imageSize', Thrift.Type.I32, 4);
    output.writeI32(this.imageSize);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 5);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 6);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 7);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 8);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createQrcodeBase64Image_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_createQrcodeBase64Image_result.prototype = {};
LineService_createQrcodeBase64Image_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createQrcodeBase64Image_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_createQrcodeBase64Image_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createRoom_args = function(args) {
  this.reqSeq = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
LineService_createRoom_args.prototype = {};
LineService_createRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size902 = 0;
        var _rtmp3906;
        this.contactIds = [];
        var _etype905 = 0;
        _rtmp3906 = input.readListBegin();
        _etype905 = _rtmp3906.etype;
        _size902 = _rtmp3906.size;
        for (var _i907 = 0; _i907 < _size902; ++_i907)
        {
          var elem908 = null;
          elem908 = input.readString();
          this.contactIds.push(elem908);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createRoom_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_createRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter909 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter909))
      {
        iter909 = this.contactIds[iter909];
        output.writeString(iter909);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createRoom_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_createRoom_result.prototype = {};
LineService_createRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createRoom_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_createRoom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createSession_args = function(args) {
};
LineService_createSession_args.prototype = {};
LineService_createSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createSession_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_createSession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_createSession_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_createSession_result.prototype = {};
LineService_createSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_createSession_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_createSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchAnnouncements_args = function(args) {
  this.lastFetchedIndex = null;
  if (args) {
    if (args.lastFetchedIndex !== undefined && args.lastFetchedIndex !== null) {
      this.lastFetchedIndex = args.lastFetchedIndex;
    }
  }
};
LineService_fetchAnnouncements_args.prototype = {};
LineService_fetchAnnouncements_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.lastFetchedIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchAnnouncements_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchAnnouncements_args');
  if (this.lastFetchedIndex !== null && this.lastFetchedIndex !== undefined) {
    output.writeFieldBegin('lastFetchedIndex', Thrift.Type.I32, 2);
    output.writeI32(this.lastFetchedIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchAnnouncements_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Announcement]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_fetchAnnouncements_result.prototype = {};
LineService_fetchAnnouncements_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size910 = 0;
        var _rtmp3914;
        this.success = [];
        var _etype913 = 0;
        _rtmp3914 = input.readListBegin();
        _etype913 = _rtmp3914.etype;
        _size910 = _rtmp3914.size;
        for (var _i915 = 0; _i915 < _size910; ++_i915)
        {
          var elem916 = null;
          elem916 = new ttypes.Announcement();
          elem916.read(input);
          this.success.push(elem916);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchAnnouncements_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchAnnouncements_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter917 in this.success)
    {
      if (this.success.hasOwnProperty(iter917))
      {
        iter917 = this.success[iter917];
        iter917.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchMessages_args = function(args) {
  this.localTs = null;
  this.count = null;
  if (args) {
    if (args.localTs !== undefined && args.localTs !== null) {
      this.localTs = args.localTs;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
LineService_fetchMessages_args.prototype = {};
LineService_fetchMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localTs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchMessages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchMessages_args');
  if (this.localTs !== null && this.localTs !== undefined) {
    output.writeFieldBegin('localTs', Thrift.Type.I64, 2);
    output.writeI64(this.localTs);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_fetchMessages_result.prototype = {};
LineService_fetchMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size918 = 0;
        var _rtmp3922;
        this.success = [];
        var _etype921 = 0;
        _rtmp3922 = input.readListBegin();
        _etype921 = _rtmp3922.etype;
        _size918 = _rtmp3922.size;
        for (var _i923 = 0; _i923 < _size918; ++_i923)
        {
          var elem924 = null;
          elem924 = new ttypes.Message();
          elem924.read(input);
          this.success.push(elem924);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchMessages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter925 in this.success)
    {
      if (this.success.hasOwnProperty(iter925))
      {
        iter925 = this.success[iter925];
        iter925.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchOperations_args = function(args) {
  this.localRev = null;
  this.count = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
LineService_fetchOperations_args.prototype = {};
LineService_fetchOperations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchOperations_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchOperations_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchOperations_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_fetchOperations_result.prototype = {};
LineService_fetchOperations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size926 = 0;
        var _rtmp3930;
        this.success = [];
        var _etype929 = 0;
        _rtmp3930 = input.readListBegin();
        _etype929 = _rtmp3930.etype;
        _size926 = _rtmp3930.size;
        for (var _i931 = 0; _i931 < _size926; ++_i931)
        {
          var elem932 = null;
          elem932 = new ttypes.Operation();
          elem932.read(input);
          this.success.push(elem932);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchOperations_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchOperations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter933 in this.success)
    {
      if (this.success.hasOwnProperty(iter933))
      {
        iter933 = this.success[iter933];
        iter933.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchOps_args = function(args) {
  this.localRev = null;
  this.count = null;
  this.globalRev = null;
  this.individualRev = null;
  if (args) {
    if (args.localRev !== undefined && args.localRev !== null) {
      this.localRev = args.localRev;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.globalRev !== undefined && args.globalRev !== null) {
      this.globalRev = args.globalRev;
    }
    if (args.individualRev !== undefined && args.individualRev !== null) {
      this.individualRev = args.individualRev;
    }
  }
};
LineService_fetchOps_args.prototype = {};
LineService_fetchOps_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.globalRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.individualRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchOps_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchOps_args');
  if (this.localRev !== null && this.localRev !== undefined) {
    output.writeFieldBegin('localRev', Thrift.Type.I64, 2);
    output.writeI64(this.localRev);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.globalRev !== null && this.globalRev !== undefined) {
    output.writeFieldBegin('globalRev', Thrift.Type.I64, 4);
    output.writeI64(this.globalRev);
    output.writeFieldEnd();
  }
  if (this.individualRev !== null && this.individualRev !== undefined) {
    output.writeFieldBegin('individualRev', Thrift.Type.I64, 5);
    output.writeI64(this.individualRev);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_fetchOps_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Operation]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_fetchOps_result.prototype = {};
LineService_fetchOps_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size934 = 0;
        var _rtmp3938;
        this.success = [];
        var _etype937 = 0;
        _rtmp3938 = input.readListBegin();
        _etype937 = _rtmp3938.etype;
        _size934 = _rtmp3938.size;
        for (var _i939 = 0; _i939 < _size934; ++_i939)
        {
          var elem940 = null;
          elem940 = new ttypes.Operation();
          elem940.read(input);
          this.success.push(elem940);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_fetchOps_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_fetchOps_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter941 in this.success)
    {
      if (this.success.hasOwnProperty(iter941))
      {
        iter941 = this.success[iter941];
        iter941.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByEmail_args = function(args) {
  this.reqSeq = null;
  this.emails = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
  }
};
LineService_findAndAddContactsByEmail_args.prototype = {};
LineService_findAndAddContactsByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size942 = 0;
        var _rtmp3946;
        this.emails = [];
        var _etype945 = 0;
        _rtmp3946 = input.readSetBegin();
        _etype945 = _rtmp3946.etype;
        _size942 = _rtmp3946.size;
        for (var _i947 = 0; _i947 < _size942; ++_i947)
        {
          var elem948 = null;
          elem948 = input.readString();
          this.emails.push(elem948);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByEmail_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter949 in this.emails)
    {
      if (this.emails.hasOwnProperty(iter949))
      {
        iter949 = this.emails[iter949];
        output.writeString(iter949);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByEmail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findAndAddContactsByEmail_result.prototype = {};
LineService_findAndAddContactsByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size950 = 0;
        var _rtmp3954;
        this.success = {};
        var _ktype951 = 0;
        var _vtype952 = 0;
        _rtmp3954 = input.readMapBegin();
        _ktype951 = _rtmp3954.ktype;
        _vtype952 = _rtmp3954.vtype;
        _size950 = _rtmp3954.size;
        for (var _i955 = 0; _i955 < _size950; ++_i955)
        {
          var key956 = null;
          var val957 = null;
          key956 = input.readString();
          val957 = new ttypes.Contact();
          val957.read(input);
          this.success[key956] = val957;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByEmail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter958 in this.success)
    {
      if (this.success.hasOwnProperty(kiter958))
      {
        var viter959 = this.success[kiter958];
        output.writeString(kiter958);
        viter959.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByMid_args = function(args) {
  this.reqSeq = null;
  this.mid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_findAndAddContactsByMid_args.prototype = {};
LineService_findAndAddContactsByMid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByMid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByMid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByMid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findAndAddContactsByMid_result.prototype = {};
LineService_findAndAddContactsByMid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size960 = 0;
        var _rtmp3964;
        this.success = {};
        var _ktype961 = 0;
        var _vtype962 = 0;
        _rtmp3964 = input.readMapBegin();
        _ktype961 = _rtmp3964.ktype;
        _vtype962 = _rtmp3964.vtype;
        _size960 = _rtmp3964.size;
        for (var _i965 = 0; _i965 < _size960; ++_i965)
        {
          var key966 = null;
          var val967 = null;
          key966 = input.readString();
          val967 = new ttypes.Contact();
          val967.read(input);
          this.success[key966] = val967;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByMid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByMid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter968 in this.success)
    {
      if (this.success.hasOwnProperty(kiter968))
      {
        var viter969 = this.success[kiter968];
        output.writeString(kiter968);
        viter969.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByPhone_args = function(args) {
  this.reqSeq = null;
  this.phones = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
  }
};
LineService_findAndAddContactsByPhone_args.prototype = {};
LineService_findAndAddContactsByPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size970 = 0;
        var _rtmp3974;
        this.phones = [];
        var _etype973 = 0;
        _rtmp3974 = input.readSetBegin();
        _etype973 = _rtmp3974.etype;
        _size970 = _rtmp3974.size;
        for (var _i975 = 0; _i975 < _size970; ++_i975)
        {
          var elem976 = null;
          elem976 = input.readString();
          this.phones.push(elem976);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByPhone_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByPhone_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter977 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter977))
      {
        iter977 = this.phones[iter977];
        output.writeString(iter977);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findAndAddContactsByPhone_result.prototype = {};
LineService_findAndAddContactsByPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size978 = 0;
        var _rtmp3982;
        this.success = {};
        var _ktype979 = 0;
        var _vtype980 = 0;
        _rtmp3982 = input.readMapBegin();
        _ktype979 = _rtmp3982.ktype;
        _vtype980 = _rtmp3982.vtype;
        _size978 = _rtmp3982.size;
        for (var _i983 = 0; _i983 < _size978; ++_i983)
        {
          var key984 = null;
          var val985 = null;
          key984 = input.readString();
          val985 = new ttypes.Contact();
          val985.read(input);
          this.success[key984] = val985;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByPhone_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter986 in this.success)
    {
      if (this.success.hasOwnProperty(kiter986))
      {
        var viter987 = this.success[kiter986];
        output.writeString(kiter986);
        viter987.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByUserid_args = function(args) {
  this.reqSeq = null;
  this.userid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
LineService_findAndAddContactsByUserid_args.prototype = {};
LineService_findAndAddContactsByUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByUserid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByUserid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findAndAddContactsByUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findAndAddContactsByUserid_result.prototype = {};
LineService_findAndAddContactsByUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size988 = 0;
        var _rtmp3992;
        this.success = {};
        var _ktype989 = 0;
        var _vtype990 = 0;
        _rtmp3992 = input.readMapBegin();
        _ktype989 = _rtmp3992.ktype;
        _vtype990 = _rtmp3992.vtype;
        _size988 = _rtmp3992.size;
        for (var _i993 = 0; _i993 < _size988; ++_i993)
        {
          var key994 = null;
          var val995 = null;
          key994 = input.readString();
          val995 = new ttypes.Contact();
          val995.read(input);
          this.success[key994] = val995;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findAndAddContactsByUserid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findAndAddContactsByUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter996 in this.success)
    {
      if (this.success.hasOwnProperty(kiter996))
      {
        var viter997 = this.success[kiter996];
        output.writeString(kiter996);
        viter997.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactByUserid_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
LineService_findContactByUserid_args.prototype = {};
LineService_findContactByUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactByUserid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactByUserid_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactByUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findContactByUserid_result.prototype = {};
LineService_findContactByUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactByUserid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactByUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactByUserTicket_args = function(args) {
  this.ticketId = null;
  if (args) {
    if (args.ticketId !== undefined && args.ticketId !== null) {
      this.ticketId = args.ticketId;
    }
  }
};
LineService_findContactByUserTicket_args.prototype = {};
LineService_findContactByUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ticketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactByUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactByUserTicket_args');
  if (this.ticketId !== null && this.ticketId !== undefined) {
    output.writeFieldBegin('ticketId', Thrift.Type.STRING, 2);
    output.writeString(this.ticketId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactByUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findContactByUserTicket_result.prototype = {};
LineService_findContactByUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactByUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactByUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactsByEmail_args = function(args) {
  this.emails = null;
  if (args) {
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
  }
};
LineService_findContactsByEmail_args.prototype = {};
LineService_findContactsByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size998 = 0;
        var _rtmp31002;
        this.emails = [];
        var _etype1001 = 0;
        _rtmp31002 = input.readSetBegin();
        _etype1001 = _rtmp31002.etype;
        _size998 = _rtmp31002.size;
        for (var _i1003 = 0; _i1003 < _size998; ++_i1003)
        {
          var elem1004 = null;
          elem1004 = input.readString();
          this.emails.push(elem1004);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactsByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactsByEmail_args');
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter1005 in this.emails)
    {
      if (this.emails.hasOwnProperty(iter1005))
      {
        iter1005 = this.emails[iter1005];
        output.writeString(iter1005);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactsByEmail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findContactsByEmail_result.prototype = {};
LineService_findContactsByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1006 = 0;
        var _rtmp31010;
        this.success = {};
        var _ktype1007 = 0;
        var _vtype1008 = 0;
        _rtmp31010 = input.readMapBegin();
        _ktype1007 = _rtmp31010.ktype;
        _vtype1008 = _rtmp31010.vtype;
        _size1006 = _rtmp31010.size;
        for (var _i1011 = 0; _i1011 < _size1006; ++_i1011)
        {
          var key1012 = null;
          var val1013 = null;
          key1012 = input.readString();
          val1013 = new ttypes.Contact();
          val1013.read(input);
          this.success[key1012] = val1013;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactsByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactsByEmail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1014 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1014))
      {
        var viter1015 = this.success[kiter1014];
        output.writeString(kiter1014);
        viter1015.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactsByPhone_args = function(args) {
  this.phones = null;
  if (args) {
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
  }
};
LineService_findContactsByPhone_args.prototype = {};
LineService_findContactsByPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size1016 = 0;
        var _rtmp31020;
        this.phones = [];
        var _etype1019 = 0;
        _rtmp31020 = input.readSetBegin();
        _etype1019 = _rtmp31020.etype;
        _size1016 = _rtmp31020.size;
        for (var _i1021 = 0; _i1021 < _size1016; ++_i1021)
        {
          var elem1022 = null;
          elem1022 = input.readString();
          this.phones.push(elem1022);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactsByPhone_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactsByPhone_args');
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter1023 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter1023))
      {
        iter1023 = this.phones[iter1023];
        output.writeString(iter1023);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findContactsByPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findContactsByPhone_result.prototype = {};
LineService_findContactsByPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1024 = 0;
        var _rtmp31028;
        this.success = {};
        var _ktype1025 = 0;
        var _vtype1026 = 0;
        _rtmp31028 = input.readMapBegin();
        _ktype1025 = _rtmp31028.ktype;
        _vtype1026 = _rtmp31028.vtype;
        _size1024 = _rtmp31028.size;
        for (var _i1029 = 0; _i1029 < _size1024; ++_i1029)
        {
          var key1030 = null;
          var val1031 = null;
          key1030 = input.readString();
          val1031 = new ttypes.Contact();
          val1031.read(input);
          this.success[key1030] = val1031;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findContactsByPhone_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findContactsByPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1032 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1032))
      {
        var viter1033 = this.success[kiter1032];
        output.writeString(kiter1032);
        viter1033.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findSnsIdUserStatus_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.udidHash = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
  }
};
LineService_findSnsIdUserStatus_args.prototype = {};
LineService_findSnsIdUserStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findSnsIdUserStatus_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_findSnsIdUserStatus_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_findSnsIdUserStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SnsIdUserStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_findSnsIdUserStatus_result.prototype = {};
LineService_findSnsIdUserStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SnsIdUserStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_findSnsIdUserStatus_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_findSnsIdUserStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_finishUpdateVerification_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_finishUpdateVerification_args.prototype = {};
LineService_finishUpdateVerification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_finishUpdateVerification_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_finishUpdateVerification_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_finishUpdateVerification_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_finishUpdateVerification_result.prototype = {};
LineService_finishUpdateVerification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_finishUpdateVerification_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_finishUpdateVerification_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_generateUserTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
LineService_generateUserTicket_args.prototype = {};
LineService_generateUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_generateUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_generateUserTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_generateUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_generateUserTicket_result.prototype = {};
LineService_generateUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_generateUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_generateUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAcceptedProximityMatches_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_getAcceptedProximityMatches_args.prototype = {};
LineService_getAcceptedProximityMatches_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAcceptedProximityMatches_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAcceptedProximityMatches_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAcceptedProximityMatches_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getAcceptedProximityMatches_result.prototype = {};
LineService_getAcceptedProximityMatches_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size1034 = 0;
        var _rtmp31038;
        this.success = [];
        var _etype1037 = 0;
        _rtmp31038 = input.readSetBegin();
        _etype1037 = _rtmp31038.etype;
        _size1034 = _rtmp31038.size;
        for (var _i1039 = 0; _i1039 < _size1034; ++_i1039)
        {
          var elem1040 = null;
          elem1040 = input.readString();
          this.success.push(elem1040);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAcceptedProximityMatches_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAcceptedProximityMatches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1041 in this.success)
    {
      if (this.success.hasOwnProperty(iter1041))
      {
        iter1041 = this.success[iter1041];
        output.writeString(iter1041);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActiveBuddySubscriberIds_args = function(args) {
};
LineService_getActiveBuddySubscriberIds_args.prototype = {};
LineService_getActiveBuddySubscriberIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActiveBuddySubscriberIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActiveBuddySubscriberIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getActiveBuddySubscriberIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getActiveBuddySubscriberIds_result.prototype = {};
LineService_getActiveBuddySubscriberIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1042 = 0;
        var _rtmp31046;
        this.success = [];
        var _etype1045 = 0;
        _rtmp31046 = input.readListBegin();
        _etype1045 = _rtmp31046.etype;
        _size1042 = _rtmp31046.size;
        for (var _i1047 = 0; _i1047 < _size1042; ++_i1047)
        {
          var elem1048 = null;
          elem1048 = input.readString();
          this.success.push(elem1048);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getActiveBuddySubscriberIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getActiveBuddySubscriberIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1049 in this.success)
    {
      if (this.success.hasOwnProperty(iter1049))
      {
        iter1049 = this.success[iter1049];
        output.writeString(iter1049);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAllContactIds_args = function(args) {
};
LineService_getAllContactIds_args.prototype = {};
LineService_getAllContactIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAllContactIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAllContactIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAllContactIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getAllContactIds_result.prototype = {};
LineService_getAllContactIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1050 = 0;
        var _rtmp31054;
        this.success = [];
        var _etype1053 = 0;
        _rtmp31054 = input.readListBegin();
        _etype1053 = _rtmp31054.etype;
        _size1050 = _rtmp31054.size;
        for (var _i1055 = 0; _i1055 < _size1050; ++_i1055)
        {
          var elem1056 = null;
          elem1056 = input.readString();
          this.success.push(elem1056);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAllContactIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAllContactIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1057 in this.success)
    {
      if (this.success.hasOwnProperty(iter1057))
      {
        iter1057 = this.success[iter1057];
        output.writeString(iter1057);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAuthQrcode_args = function(args) {
  this.keepLoggedIn = null;
  this.systemName = null;
  if (args) {
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
  }
};
LineService_getAuthQrcode_args.prototype = {};
LineService_getAuthQrcode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAuthQrcode_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAuthQrcode_args');
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 2);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 3);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getAuthQrcode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AuthQrcode(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getAuthQrcode_result.prototype = {};
LineService_getAuthQrcode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthQrcode();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getAuthQrcode_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getAuthQrcode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedContactIds_args = function(args) {
};
LineService_getBlockedContactIds_args.prototype = {};
LineService_getBlockedContactIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedContactIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedContactIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedContactIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBlockedContactIds_result.prototype = {};
LineService_getBlockedContactIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1058 = 0;
        var _rtmp31062;
        this.success = [];
        var _etype1061 = 0;
        _rtmp31062 = input.readListBegin();
        _etype1061 = _rtmp31062.etype;
        _size1058 = _rtmp31062.size;
        for (var _i1063 = 0; _i1063 < _size1058; ++_i1063)
        {
          var elem1064 = null;
          elem1064 = input.readString();
          this.success.push(elem1064);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedContactIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedContactIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1065 in this.success)
    {
      if (this.success.hasOwnProperty(iter1065))
      {
        iter1065 = this.success[iter1065];
        output.writeString(iter1065);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedContactIdsByRange_args = function(args) {
  this.start = null;
  this.count = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
LineService_getBlockedContactIdsByRange_args.prototype = {};
LineService_getBlockedContactIdsByRange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedContactIdsByRange_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedContactIdsByRange_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 2);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedContactIdsByRange_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBlockedContactIdsByRange_result.prototype = {};
LineService_getBlockedContactIdsByRange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1066 = 0;
        var _rtmp31070;
        this.success = [];
        var _etype1069 = 0;
        _rtmp31070 = input.readListBegin();
        _etype1069 = _rtmp31070.etype;
        _size1066 = _rtmp31070.size;
        for (var _i1071 = 0; _i1071 < _size1066; ++_i1071)
        {
          var elem1072 = null;
          elem1072 = input.readString();
          this.success.push(elem1072);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedContactIdsByRange_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedContactIdsByRange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1073 in this.success)
    {
      if (this.success.hasOwnProperty(iter1073))
      {
        iter1073 = this.success[iter1073];
        output.writeString(iter1073);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedRecommendationIds_args = function(args) {
};
LineService_getBlockedRecommendationIds_args.prototype = {};
LineService_getBlockedRecommendationIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedRecommendationIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedRecommendationIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBlockedRecommendationIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBlockedRecommendationIds_result.prototype = {};
LineService_getBlockedRecommendationIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1074 = 0;
        var _rtmp31078;
        this.success = [];
        var _etype1077 = 0;
        _rtmp31078 = input.readListBegin();
        _etype1077 = _rtmp31078.etype;
        _size1074 = _rtmp31078.size;
        for (var _i1079 = 0; _i1079 < _size1074; ++_i1079)
        {
          var elem1080 = null;
          elem1080 = input.readString();
          this.success.push(elem1080);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBlockedRecommendationIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBlockedRecommendationIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1081 in this.success)
    {
      if (this.success.hasOwnProperty(iter1081))
      {
        iter1081 = this.success[iter1081];
        output.writeString(iter1081);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyBlockerIds_args = function(args) {
};
LineService_getBuddyBlockerIds_args.prototype = {};
LineService_getBuddyBlockerIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyBlockerIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyBlockerIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyBlockerIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyBlockerIds_result.prototype = {};
LineService_getBuddyBlockerIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1082 = 0;
        var _rtmp31086;
        this.success = [];
        var _etype1085 = 0;
        _rtmp31086 = input.readListBegin();
        _etype1085 = _rtmp31086.etype;
        _size1082 = _rtmp31086.size;
        for (var _i1087 = 0; _i1087 < _size1082; ++_i1087)
        {
          var elem1088 = null;
          elem1088 = input.readString();
          this.success.push(elem1088);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyBlockerIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyBlockerIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1089 in this.success)
    {
      if (this.success.hasOwnProperty(iter1089))
      {
        iter1089 = this.success[iter1089];
        output.writeString(iter1089);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyLocation_args = function(args) {
  this.mid = null;
  this.index = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
LineService_getBuddyLocation_args.prototype = {};
LineService_getBuddyLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyLocation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyLocation_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 3);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getBuddyLocation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Geolocation(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getBuddyLocation_result.prototype = {};
LineService_getBuddyLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Geolocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getBuddyLocation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getBuddyLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactContactsModifiedSince_args = function(args) {
  this.timestamp = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
LineService_getCompactContactsModifiedSince_args.prototype = {};
LineService_getCompactContactsModifiedSince_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactContactsModifiedSince_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactContactsModifiedSince_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactContactsModifiedSince_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.CompactContact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCompactContactsModifiedSince_result.prototype = {};
LineService_getCompactContactsModifiedSince_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1090 = 0;
        var _rtmp31094;
        this.success = [];
        var _etype1093 = 0;
        _rtmp31094 = input.readListBegin();
        _etype1093 = _rtmp31094.etype;
        _size1090 = _rtmp31094.size;
        for (var _i1095 = 0; _i1095 < _size1090; ++_i1095)
        {
          var elem1096 = null;
          elem1096 = new ttypes.CompactContact();
          elem1096.read(input);
          this.success.push(elem1096);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactContactsModifiedSince_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactContactsModifiedSince_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1097 in this.success)
    {
      if (this.success.hasOwnProperty(iter1097))
      {
        iter1097 = this.success[iter1097];
        iter1097.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactGroup_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_getCompactGroup_args.prototype = {};
LineService_getCompactGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactGroup_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCompactGroup_result.prototype = {};
LineService_getCompactGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactRoom_args = function(args) {
  this.roomId = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
LineService_getCompactRoom_args.prototype = {};
LineService_getCompactRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactRoom_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactRoom_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCompactRoom_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCompactRoom_result.prototype = {};
LineService_getCompactRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCompactRoom_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCompactRoom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContact_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
LineService_getContact_args.prototype = {};
LineService_getContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContact_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContact_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Contact(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getContact_result.prototype = {};
LineService_getContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Contact();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContact_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContacts_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
LineService_getContacts_args.prototype = {};
LineService_getContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1098 = 0;
        var _rtmp31102;
        this.ids = [];
        var _etype1101 = 0;
        _rtmp31102 = input.readListBegin();
        _etype1101 = _rtmp31102.etype;
        _size1098 = _rtmp31102.size;
        for (var _i1103 = 0; _i1103 < _size1098; ++_i1103)
        {
          var elem1104 = null;
          elem1104 = input.readString();
          this.ids.push(elem1104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContacts_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter1105 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter1105))
      {
        iter1105 = this.ids[iter1105];
        output.writeString(iter1105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getContacts_result.prototype = {};
LineService_getContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1106 = 0;
        var _rtmp31110;
        this.success = [];
        var _etype1109 = 0;
        _rtmp31110 = input.readListBegin();
        _etype1109 = _rtmp31110.etype;
        _size1106 = _rtmp31110.size;
        for (var _i1111 = 0; _i1111 < _size1106; ++_i1111)
        {
          var elem1112 = null;
          elem1112 = new ttypes.Contact();
          elem1112.read(input);
          this.success.push(elem1112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1113 in this.success)
    {
      if (this.success.hasOwnProperty(iter1113))
      {
        iter1113 = this.success[iter1113];
        iter1113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCountryWithRequestIp_args = function(args) {
};
LineService_getCountryWithRequestIp_args.prototype = {};
LineService_getCountryWithRequestIp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCountryWithRequestIp_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCountryWithRequestIp_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getCountryWithRequestIp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getCountryWithRequestIp_result.prototype = {};
LineService_getCountryWithRequestIp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getCountryWithRequestIp_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getCountryWithRequestIp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFavoriteMids_args = function(args) {
};
LineService_getFavoriteMids_args.prototype = {};
LineService_getFavoriteMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFavoriteMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFavoriteMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getFavoriteMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getFavoriteMids_result.prototype = {};
LineService_getFavoriteMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1114 = 0;
        var _rtmp31118;
        this.success = [];
        var _etype1117 = 0;
        _rtmp31118 = input.readListBegin();
        _etype1117 = _rtmp31118.etype;
        _size1114 = _rtmp31118.size;
        for (var _i1119 = 0; _i1119 < _size1114; ++_i1119)
        {
          var elem1120 = null;
          elem1120 = input.readString();
          this.success.push(elem1120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getFavoriteMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getFavoriteMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1121 in this.success)
    {
      if (this.success.hasOwnProperty(iter1121))
      {
        iter1121 = this.success[iter1121];
        output.writeString(iter1121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroup_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_getGroup_args.prototype = {};
LineService_getGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroup_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Group(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getGroup_result.prototype = {};
LineService_getGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Group();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupIdsInvited_args = function(args) {
};
LineService_getGroupIdsInvited_args.prototype = {};
LineService_getGroupIdsInvited_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupIdsInvited_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupIdsInvited_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupIdsInvited_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getGroupIdsInvited_result.prototype = {};
LineService_getGroupIdsInvited_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1122 = 0;
        var _rtmp31126;
        this.success = [];
        var _etype1125 = 0;
        _rtmp31126 = input.readListBegin();
        _etype1125 = _rtmp31126.etype;
        _size1122 = _rtmp31126.size;
        for (var _i1127 = 0; _i1127 < _size1122; ++_i1127)
        {
          var elem1128 = null;
          elem1128 = input.readString();
          this.success.push(elem1128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupIdsInvited_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupIdsInvited_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1129 in this.success)
    {
      if (this.success.hasOwnProperty(iter1129))
      {
        iter1129 = this.success[iter1129];
        output.writeString(iter1129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupIdsJoined_args = function(args) {
};
LineService_getGroupIdsJoined_args.prototype = {};
LineService_getGroupIdsJoined_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupIdsJoined_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupIdsJoined_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroupIdsJoined_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getGroupIdsJoined_result.prototype = {};
LineService_getGroupIdsJoined_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1130 = 0;
        var _rtmp31134;
        this.success = [];
        var _etype1133 = 0;
        _rtmp31134 = input.readListBegin();
        _etype1133 = _rtmp31134.etype;
        _size1130 = _rtmp31134.size;
        for (var _i1135 = 0; _i1135 < _size1130; ++_i1135)
        {
          var elem1136 = null;
          elem1136 = input.readString();
          this.success.push(elem1136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroupIdsJoined_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroupIdsJoined_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1137 in this.success)
    {
      if (this.success.hasOwnProperty(iter1137))
      {
        iter1137 = this.success[iter1137];
        output.writeString(iter1137);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroups_args = function(args) {
  this.groupIds = null;
  if (args) {
    if (args.groupIds !== undefined && args.groupIds !== null) {
      this.groupIds = Thrift.copyList(args.groupIds, [null]);
    }
  }
};
LineService_getGroups_args.prototype = {};
LineService_getGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1138 = 0;
        var _rtmp31142;
        this.groupIds = [];
        var _etype1141 = 0;
        _rtmp31142 = input.readListBegin();
        _etype1141 = _rtmp31142.etype;
        _size1138 = _rtmp31142.size;
        for (var _i1143 = 0; _i1143 < _size1138; ++_i1143)
        {
          var elem1144 = null;
          elem1144 = input.readString();
          this.groupIds.push(elem1144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroups_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroups_args');
  if (this.groupIds !== null && this.groupIds !== undefined) {
    output.writeFieldBegin('groupIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupIds.length);
    for (var iter1145 in this.groupIds)
    {
      if (this.groupIds.hasOwnProperty(iter1145))
      {
        iter1145 = this.groupIds[iter1145];
        output.writeString(iter1145);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getGroups_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Group]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getGroups_result.prototype = {};
LineService_getGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1146 = 0;
        var _rtmp31150;
        this.success = [];
        var _etype1149 = 0;
        _rtmp31150 = input.readListBegin();
        _etype1149 = _rtmp31150.etype;
        _size1146 = _rtmp31150.size;
        for (var _i1151 = 0; _i1151 < _size1146; ++_i1151)
        {
          var elem1152 = null;
          elem1152 = new ttypes.Group();
          elem1152.read(input);
          this.success.push(elem1152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getGroups_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1153 in this.success)
    {
      if (this.success.hasOwnProperty(iter1153))
      {
        iter1153 = this.success[iter1153];
        iter1153.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getHiddenContactMids_args = function(args) {
};
LineService_getHiddenContactMids_args.prototype = {};
LineService_getHiddenContactMids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getHiddenContactMids_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getHiddenContactMids_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getHiddenContactMids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getHiddenContactMids_result.prototype = {};
LineService_getHiddenContactMids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1154 = 0;
        var _rtmp31158;
        this.success = [];
        var _etype1157 = 0;
        _rtmp31158 = input.readListBegin();
        _etype1157 = _rtmp31158.etype;
        _size1154 = _rtmp31158.size;
        for (var _i1159 = 0; _i1159 < _size1154; ++_i1159)
        {
          var elem1160 = null;
          elem1160 = input.readString();
          this.success.push(elem1160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getHiddenContactMids_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getHiddenContactMids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1161 in this.success)
    {
      if (this.success.hasOwnProperty(iter1161))
      {
        iter1161 = this.success[iter1161];
        output.writeString(iter1161);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getIdentityIdentifier_args = function(args) {
};
LineService_getIdentityIdentifier_args.prototype = {};
LineService_getIdentityIdentifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getIdentityIdentifier_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getIdentityIdentifier_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getIdentityIdentifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getIdentityIdentifier_result.prototype = {};
LineService_getIdentityIdentifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getIdentityIdentifier_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getIdentityIdentifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getLastAnnouncementIndex_args = function(args) {
};
LineService_getLastAnnouncementIndex_args.prototype = {};
LineService_getLastAnnouncementIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getLastAnnouncementIndex_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getLastAnnouncementIndex_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getLastAnnouncementIndex_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getLastAnnouncementIndex_result.prototype = {};
LineService_getLastAnnouncementIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getLastAnnouncementIndex_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getLastAnnouncementIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getLastOpRevision_args = function(args) {
};
LineService_getLastOpRevision_args.prototype = {};
LineService_getLastOpRevision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getLastOpRevision_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getLastOpRevision_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getLastOpRevision_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getLastOpRevision_result.prototype = {};
LineService_getLastOpRevision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getLastOpRevision_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getLastOpRevision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBox_args = function(args) {
  this.channelId = null;
  this.messageBoxId = null;
  this.lastMessagesCount = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.lastMessagesCount !== undefined && args.lastMessagesCount !== null) {
      this.lastMessagesCount = args.lastMessagesCount;
    }
  }
};
LineService_getMessageBox_args.prototype = {};
LineService_getMessageBox_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lastMessagesCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBox_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBox_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 3);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.lastMessagesCount !== null && this.lastMessagesCount !== undefined) {
    output.writeFieldBegin('lastMessagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.lastMessagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBox_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMessageBox(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBox_result.prototype = {};
LineService_getMessageBox_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMessageBox();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBox_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBox_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUp_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_getMessageBoxCompactWrapUp_args.prototype = {};
LineService_getMessageBoxCompactWrapUp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUp_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxCompactWrapUp_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMessageBoxWrapUp(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBoxCompactWrapUp_result.prototype = {};
LineService_getMessageBoxCompactWrapUp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMessageBoxWrapUp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUp_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxCompactWrapUp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUpList_args = function(args) {
  this.start = null;
  this.messageBoxCount = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.messageBoxCount !== undefined && args.messageBoxCount !== null) {
      this.messageBoxCount = args.messageBoxCount;
    }
  }
};
LineService_getMessageBoxCompactWrapUpList_args.prototype = {};
LineService_getMessageBoxCompactWrapUpList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messageBoxCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUpList_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxCompactWrapUpList_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 2);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.messageBoxCount !== null && this.messageBoxCount !== undefined) {
    output.writeFieldBegin('messageBoxCount', Thrift.Type.I32, 3);
    output.writeI32(this.messageBoxCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUpList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMessageBoxWrapUpResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBoxCompactWrapUpList_result.prototype = {};
LineService_getMessageBoxCompactWrapUpList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMessageBoxWrapUpResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxCompactWrapUpList_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxCompactWrapUpList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxList_args = function(args) {
  this.channelId = null;
  this.lastMessagesCount = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastMessagesCount !== undefined && args.lastMessagesCount !== null) {
      this.lastMessagesCount = args.lastMessagesCount;
    }
  }
};
LineService_getMessageBoxList_args.prototype = {};
LineService_getMessageBoxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastMessagesCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxList_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxList_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastMessagesCount !== null && this.lastMessagesCount !== undefined) {
    output.writeFieldBegin('lastMessagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.lastMessagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TMessageBox]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBoxList_result.prototype = {};
LineService_getMessageBoxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1162 = 0;
        var _rtmp31166;
        this.success = [];
        var _etype1165 = 0;
        _rtmp31166 = input.readListBegin();
        _etype1165 = _rtmp31166.etype;
        _size1162 = _rtmp31166.size;
        for (var _i1167 = 0; _i1167 < _size1162; ++_i1167)
        {
          var elem1168 = null;
          elem1168 = new ttypes.TMessageBox();
          elem1168.read(input);
          this.success.push(elem1168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxList_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1169 in this.success)
    {
      if (this.success.hasOwnProperty(iter1169))
      {
        iter1169 = this.success[iter1169];
        iter1169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxListByStatus_args = function(args) {
  this.channelId = null;
  this.lastMessagesCount = null;
  this.status = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastMessagesCount !== undefined && args.lastMessagesCount !== null) {
      this.lastMessagesCount = args.lastMessagesCount;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
LineService_getMessageBoxListByStatus_args.prototype = {};
LineService_getMessageBoxListByStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastMessagesCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxListByStatus_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxListByStatus_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastMessagesCount !== null && this.lastMessagesCount !== undefined) {
    output.writeFieldBegin('lastMessagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.lastMessagesCount);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxListByStatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TMessageBox]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBoxListByStatus_result.prototype = {};
LineService_getMessageBoxListByStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1170 = 0;
        var _rtmp31174;
        this.success = [];
        var _etype1173 = 0;
        _rtmp31174 = input.readListBegin();
        _etype1173 = _rtmp31174.etype;
        _size1170 = _rtmp31174.size;
        for (var _i1175 = 0; _i1175 < _size1170; ++_i1175)
        {
          var elem1176 = null;
          elem1176 = new ttypes.TMessageBox();
          elem1176.read(input);
          this.success.push(elem1176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxListByStatus_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxListByStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1177 in this.success)
    {
      if (this.success.hasOwnProperty(iter1177))
      {
        iter1177 = this.success[iter1177];
        iter1177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxWrapUp_args = function(args) {
  this.mid = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_getMessageBoxWrapUp_args.prototype = {};
LineService_getMessageBoxWrapUp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxWrapUp_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxWrapUp_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxWrapUp_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMessageBoxWrapUp(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBoxWrapUp_result.prototype = {};
LineService_getMessageBoxWrapUp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMessageBoxWrapUp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxWrapUp_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxWrapUp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxWrapUpList_args = function(args) {
  this.start = null;
  this.messageBoxCount = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.messageBoxCount !== undefined && args.messageBoxCount !== null) {
      this.messageBoxCount = args.messageBoxCount;
    }
  }
};
LineService_getMessageBoxWrapUpList_args.prototype = {};
LineService_getMessageBoxWrapUpList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messageBoxCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxWrapUpList_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxWrapUpList_args');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 2);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.messageBoxCount !== null && this.messageBoxCount !== undefined) {
    output.writeFieldBegin('messageBoxCount', Thrift.Type.I32, 3);
    output.writeI32(this.messageBoxCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessageBoxWrapUpList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMessageBoxWrapUpResponse(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessageBoxWrapUpList_result.prototype = {};
LineService_getMessageBoxWrapUpList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMessageBoxWrapUpResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessageBoxWrapUpList_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessageBoxWrapUpList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessagesBySequenceNumber_args = function(args) {
  this.channelId = null;
  this.messageBoxId = null;
  this.startSeq = null;
  this.endSeq = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.startSeq !== undefined && args.startSeq !== null) {
      this.startSeq = args.startSeq;
    }
    if (args.endSeq !== undefined && args.endSeq !== null) {
      this.endSeq = args.endSeq;
    }
  }
};
LineService_getMessagesBySequenceNumber_args.prototype = {};
LineService_getMessagesBySequenceNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.endSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessagesBySequenceNumber_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessagesBySequenceNumber_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 3);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.startSeq !== null && this.startSeq !== undefined) {
    output.writeFieldBegin('startSeq', Thrift.Type.I64, 4);
    output.writeI64(this.startSeq);
    output.writeFieldEnd();
  }
  if (this.endSeq !== null && this.endSeq !== undefined) {
    output.writeFieldBegin('endSeq', Thrift.Type.I64, 5);
    output.writeI64(this.endSeq);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getMessagesBySequenceNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getMessagesBySequenceNumber_result.prototype = {};
LineService_getMessagesBySequenceNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1178 = 0;
        var _rtmp31182;
        this.success = [];
        var _etype1181 = 0;
        _rtmp31182 = input.readListBegin();
        _etype1181 = _rtmp31182.etype;
        _size1178 = _rtmp31182.size;
        for (var _i1183 = 0; _i1183 < _size1178; ++_i1183)
        {
          var elem1184 = null;
          elem1184 = new ttypes.Message();
          elem1184.read(input);
          this.success.push(elem1184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getMessagesBySequenceNumber_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getMessagesBySequenceNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1185 in this.success)
    {
      if (this.success.hasOwnProperty(iter1185))
      {
        iter1185 = this.success[iter1185];
        iter1185.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNextMessages_args = function(args) {
  this.messageBoxId = null;
  this.startSeq = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.startSeq !== undefined && args.startSeq !== null) {
      this.startSeq = args.startSeq;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
LineService_getNextMessages_args.prototype = {};
LineService_getNextMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNextMessages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNextMessages_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.startSeq !== null && this.startSeq !== undefined) {
    output.writeFieldBegin('startSeq', Thrift.Type.I64, 3);
    output.writeI64(this.startSeq);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNextMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getNextMessages_result.prototype = {};
LineService_getNextMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1186 = 0;
        var _rtmp31190;
        this.success = [];
        var _etype1189 = 0;
        _rtmp31190 = input.readListBegin();
        _etype1189 = _rtmp31190.etype;
        _size1186 = _rtmp31190.size;
        for (var _i1191 = 0; _i1191 < _size1186; ++_i1191)
        {
          var elem1192 = null;
          elem1192 = new ttypes.Message();
          elem1192.read(input);
          this.success.push(elem1192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNextMessages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNextMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1193 in this.success)
    {
      if (this.success.hasOwnProperty(iter1193))
      {
        iter1193 = this.success[iter1193];
        iter1193.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNotificationPolicy_args = function(args) {
  this.carrier = null;
  if (args) {
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
  }
};
LineService_getNotificationPolicy_args.prototype = {};
LineService_getNotificationPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNotificationPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNotificationPolicy_args');
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 2);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getNotificationPolicy_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getNotificationPolicy_result.prototype = {};
LineService_getNotificationPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1194 = 0;
        var _rtmp31198;
        this.success = [];
        var _etype1197 = 0;
        _rtmp31198 = input.readListBegin();
        _etype1197 = _rtmp31198.etype;
        _size1194 = _rtmp31198.size;
        for (var _i1199 = 0; _i1199 < _size1194; ++_i1199)
        {
          var elem1200 = null;
          elem1200 = input.readI32();
          this.success.push(elem1200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getNotificationPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getNotificationPolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter1201 in this.success)
    {
      if (this.success.hasOwnProperty(iter1201))
      {
        iter1201 = this.success[iter1201];
        output.writeI32(iter1201);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPreviousMessages_args = function(args) {
  this.messageBoxId = null;
  this.endSeq = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.endSeq !== undefined && args.endSeq !== null) {
      this.endSeq = args.endSeq;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
LineService_getPreviousMessages_args.prototype = {};
LineService_getPreviousMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPreviousMessages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPreviousMessages_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.endSeq !== null && this.endSeq !== undefined) {
    output.writeFieldBegin('endSeq', Thrift.Type.I64, 3);
    output.writeI64(this.endSeq);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 4);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getPreviousMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getPreviousMessages_result.prototype = {};
LineService_getPreviousMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1202 = 0;
        var _rtmp31206;
        this.success = [];
        var _etype1205 = 0;
        _rtmp31206 = input.readListBegin();
        _etype1205 = _rtmp31206.etype;
        _size1202 = _rtmp31206.size;
        for (var _i1207 = 0; _i1207 < _size1202; ++_i1207)
        {
          var elem1208 = null;
          elem1208 = new ttypes.Message();
          elem1208.read(input);
          this.success.push(elem1208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getPreviousMessages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getPreviousMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1209 in this.success)
    {
      if (this.success.hasOwnProperty(iter1209))
      {
        iter1209 = this.success[iter1209];
        iter1209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProfile_args = function(args) {
};
LineService_getProfile_args.prototype = {};
LineService_getProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProfile_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProfile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Profile(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProfile_result.prototype = {};
LineService_getProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Profile();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProximityMatchCandidateList_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_getProximityMatchCandidateList_args.prototype = {};
LineService_getProximityMatchCandidateList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProximityMatchCandidateList_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProximityMatchCandidateList_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProximityMatchCandidateList_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProximityMatchCandidateResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProximityMatchCandidateList_result.prototype = {};
LineService_getProximityMatchCandidateList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProximityMatchCandidateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProximityMatchCandidateList_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProximityMatchCandidateList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProximityMatchCandidates_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_getProximityMatchCandidates_args.prototype = {};
LineService_getProximityMatchCandidates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProximityMatchCandidates_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProximityMatchCandidates_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getProximityMatchCandidates_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Contact]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getProximityMatchCandidates_result.prototype = {};
LineService_getProximityMatchCandidates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size1210 = 0;
        var _rtmp31214;
        this.success = [];
        var _etype1213 = 0;
        _rtmp31214 = input.readSetBegin();
        _etype1213 = _rtmp31214.etype;
        _size1210 = _rtmp31214.size;
        for (var _i1215 = 0; _i1215 < _size1210; ++_i1215)
        {
          var elem1216 = null;
          elem1216 = new ttypes.Contact();
          elem1216.read(input);
          this.success.push(elem1216);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getProximityMatchCandidates_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getProximityMatchCandidates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1217 in this.success)
    {
      if (this.success.hasOwnProperty(iter1217))
      {
        iter1217 = this.success[iter1217];
        iter1217.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRecentMessages_args = function(args) {
  this.messageBoxId = null;
  this.messagesCount = null;
  if (args) {
    if (args.messageBoxId !== undefined && args.messageBoxId !== null) {
      this.messageBoxId = args.messageBoxId;
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
LineService_getRecentMessages_args.prototype = {};
LineService_getRecentMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageBoxId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.messagesCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRecentMessages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRecentMessages_args');
  if (this.messageBoxId !== null && this.messageBoxId !== undefined) {
    output.writeFieldBegin('messageBoxId', Thrift.Type.STRING, 2);
    output.writeString(this.messageBoxId);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I32, 3);
    output.writeI32(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRecentMessages_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Message]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getRecentMessages_result.prototype = {};
LineService_getRecentMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1218 = 0;
        var _rtmp31222;
        this.success = [];
        var _etype1221 = 0;
        _rtmp31222 = input.readListBegin();
        _etype1221 = _rtmp31222.etype;
        _size1218 = _rtmp31222.size;
        for (var _i1223 = 0; _i1223 < _size1218; ++_i1223)
        {
          var elem1224 = null;
          elem1224 = new ttypes.Message();
          elem1224.read(input);
          this.success.push(elem1224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRecentMessages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRecentMessages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1225 in this.success)
    {
      if (this.success.hasOwnProperty(iter1225))
      {
        iter1225 = this.success[iter1225];
        iter1225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRecommendationIds_args = function(args) {
};
LineService_getRecommendationIds_args.prototype = {};
LineService_getRecommendationIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRecommendationIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRecommendationIds_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRecommendationIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getRecommendationIds_result.prototype = {};
LineService_getRecommendationIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1226 = 0;
        var _rtmp31230;
        this.success = [];
        var _etype1229 = 0;
        _rtmp31230 = input.readListBegin();
        _etype1229 = _rtmp31230.etype;
        _size1226 = _rtmp31230.size;
        for (var _i1231 = 0; _i1231 < _size1226; ++_i1231)
        {
          var elem1232 = null;
          elem1232 = input.readString();
          this.success.push(elem1232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRecommendationIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRecommendationIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1233 in this.success)
    {
      if (this.success.hasOwnProperty(iter1233))
      {
        iter1233 = this.success[iter1233];
        output.writeString(iter1233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRoom_args = function(args) {
  this.roomId = null;
  if (args) {
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
LineService_getRoom_args.prototype = {};
LineService_getRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRoom_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRoom_args');
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRoom_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Room(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getRoom_result.prototype = {};
LineService_getRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Room();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRoom_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRoom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRSAKeyInfo_args = function(args) {
  this.provider = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
LineService_getRSAKeyInfo_args.prototype = {};
LineService_getRSAKeyInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRSAKeyInfo_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRSAKeyInfo_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 2);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getRSAKeyInfo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RSAKey(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getRSAKeyInfo_result.prototype = {};
LineService_getRSAKeyInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RSAKey();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getRSAKeyInfo_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getRSAKeyInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getServerTime_args = function(args) {
};
LineService_getServerTime_args.prototype = {};
LineService_getServerTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getServerTime_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getServerTime_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getServerTime_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getServerTime_result.prototype = {};
LineService_getServerTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getServerTime_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getServerTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSessions_args = function(args) {
};
LineService_getSessions_args.prototype = {};
LineService_getSessions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSessions_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSessions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSessions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.LoginSession]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSessions_result.prototype = {};
LineService_getSessions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1234 = 0;
        var _rtmp31238;
        this.success = [];
        var _etype1237 = 0;
        _rtmp31238 = input.readListBegin();
        _etype1237 = _rtmp31238.etype;
        _size1234 = _rtmp31238.size;
        for (var _i1239 = 0; _i1239 < _size1234; ++_i1239)
        {
          var elem1240 = null;
          elem1240 = new ttypes.LoginSession();
          elem1240.read(input);
          this.success.push(elem1240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSessions_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSessions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1241 in this.success)
    {
      if (this.success.hasOwnProperty(iter1241))
      {
        iter1241 = this.success[iter1241];
        iter1241.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSettings_args = function(args) {
};
LineService_getSettings_args.prototype = {};
LineService_getSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSettings_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSettings_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSettings_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSettings_result.prototype = {};
LineService_getSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSettings_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSettingsAttributes_args = function(args) {
  this.attrBitset = null;
  if (args) {
    if (args.attrBitset !== undefined && args.attrBitset !== null) {
      this.attrBitset = args.attrBitset;
    }
  }
};
LineService_getSettingsAttributes_args.prototype = {};
LineService_getSettingsAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attrBitset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSettingsAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSettingsAttributes_args');
  if (this.attrBitset !== null && this.attrBitset !== undefined) {
    output.writeFieldBegin('attrBitset', Thrift.Type.I32, 2);
    output.writeI32(this.attrBitset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSettingsAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Settings(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSettingsAttributes_result.prototype = {};
LineService_getSettingsAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Settings();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSettingsAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSettingsAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSystemConfiguration_args = function(args) {
};
LineService_getSystemConfiguration_args.prototype = {};
LineService_getSystemConfiguration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSystemConfiguration_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSystemConfiguration_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getSystemConfiguration_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SystemConfiguration(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getSystemConfiguration_result.prototype = {};
LineService_getSystemConfiguration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SystemConfiguration();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getSystemConfiguration_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getSystemConfiguration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserTicket_args = function(args) {
};
LineService_getUserTicket_args.prototype = {};
LineService_getUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserTicket_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Ticket(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getUserTicket_result.prototype = {};
LineService_getUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Ticket();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getWapInvitation_args = function(args) {
  this.invitationHash = null;
  if (args) {
    if (args.invitationHash !== undefined && args.invitationHash !== null) {
      this.invitationHash = args.invitationHash;
    }
  }
};
LineService_getWapInvitation_args.prototype = {};
LineService_getWapInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitationHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getWapInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_getWapInvitation_args');
  if (this.invitationHash !== null && this.invitationHash !== undefined) {
    output.writeFieldBegin('invitationHash', Thrift.Type.STRING, 2);
    output.writeString(this.invitationHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_getWapInvitation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.WapInvitation(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_getWapInvitation_result.prototype = {};
LineService_getWapInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.WapInvitation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_getWapInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_getWapInvitation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_invalidateUserTicket_args = function(args) {
};
LineService_invalidateUserTicket_args.prototype = {};
LineService_invalidateUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_invalidateUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_invalidateUserTicket_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_invalidateUserTicket_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_invalidateUserTicket_result.prototype = {};
LineService_invalidateUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_invalidateUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_invalidateUserTicket_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteFriendsBySms_args = function(args) {
  this.phoneNumberList = null;
  if (args) {
    if (args.phoneNumberList !== undefined && args.phoneNumberList !== null) {
      this.phoneNumberList = Thrift.copyList(args.phoneNumberList, [null]);
    }
  }
};
LineService_inviteFriendsBySms_args.prototype = {};
LineService_inviteFriendsBySms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1242 = 0;
        var _rtmp31246;
        this.phoneNumberList = [];
        var _etype1245 = 0;
        _rtmp31246 = input.readListBegin();
        _etype1245 = _rtmp31246.etype;
        _size1242 = _rtmp31246.size;
        for (var _i1247 = 0; _i1247 < _size1242; ++_i1247)
        {
          var elem1248 = null;
          elem1248 = input.readString();
          this.phoneNumberList.push(elem1248);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteFriendsBySms_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteFriendsBySms_args');
  if (this.phoneNumberList !== null && this.phoneNumberList !== undefined) {
    output.writeFieldBegin('phoneNumberList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.phoneNumberList.length);
    for (var iter1249 in this.phoneNumberList)
    {
      if (this.phoneNumberList.hasOwnProperty(iter1249))
      {
        iter1249 = this.phoneNumberList[iter1249];
        output.writeString(iter1249);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteFriendsBySms_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_inviteFriendsBySms_result.prototype = {};
LineService_inviteFriendsBySms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteFriendsBySms_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteFriendsBySms_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteIntoGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
LineService_inviteIntoGroup_args.prototype = {};
LineService_inviteIntoGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1250 = 0;
        var _rtmp31254;
        this.contactIds = [];
        var _etype1253 = 0;
        _rtmp31254 = input.readListBegin();
        _etype1253 = _rtmp31254.etype;
        _size1250 = _rtmp31254.size;
        for (var _i1255 = 0; _i1255 < _size1250; ++_i1255)
        {
          var elem1256 = null;
          elem1256 = input.readString();
          this.contactIds.push(elem1256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteIntoGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteIntoGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1257 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1257))
      {
        iter1257 = this.contactIds[iter1257];
        output.writeString(iter1257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteIntoGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_inviteIntoGroup_result.prototype = {};
LineService_inviteIntoGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteIntoGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteIntoGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteIntoRoom_args = function(args) {
  this.reqSeq = null;
  this.roomId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
LineService_inviteIntoRoom_args.prototype = {};
LineService_inviteIntoRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1258 = 0;
        var _rtmp31262;
        this.contactIds = [];
        var _etype1261 = 0;
        _rtmp31262 = input.readListBegin();
        _etype1261 = _rtmp31262.etype;
        _size1258 = _rtmp31262.size;
        for (var _i1263 = 0; _i1263 < _size1258; ++_i1263)
        {
          var elem1264 = null;
          elem1264 = input.readString();
          this.contactIds.push(elem1264);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteIntoRoom_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteIntoRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1265 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1265))
      {
        iter1265 = this.contactIds[iter1265];
        output.writeString(iter1265);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteIntoRoom_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_inviteIntoRoom_result.prototype = {};
LineService_inviteIntoRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteIntoRoom_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteIntoRoom_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteViaEmail_args = function(args) {
  this.reqSeq = null;
  this.email = null;
  this.name = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
LineService_inviteViaEmail_args.prototype = {};
LineService_inviteViaEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteViaEmail_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteViaEmail_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_inviteViaEmail_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_inviteViaEmail_result.prototype = {};
LineService_inviteViaEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_inviteViaEmail_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_inviteViaEmail_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isIdentityIdentifierAvailable_args = function(args) {
  this.provider = null;
  this.identifier = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
  }
};
LineService_isIdentityIdentifierAvailable_args.prototype = {};
LineService_isIdentityIdentifierAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isIdentityIdentifierAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_isIdentityIdentifierAvailable_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 3);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isIdentityIdentifierAvailable_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_isIdentityIdentifierAvailable_result.prototype = {};
LineService_isIdentityIdentifierAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isIdentityIdentifierAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_isIdentityIdentifierAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isUseridAvailable_args = function(args) {
  this.userid = null;
  if (args) {
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
LineService_isUseridAvailable_args.prototype = {};
LineService_isUseridAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isUseridAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_isUseridAvailable_args');
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_isUseridAvailable_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_isUseridAvailable_result.prototype = {};
LineService_isUseridAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_isUseridAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_isUseridAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_kickoutFromGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  this.contactIds = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.contactIds !== undefined && args.contactIds !== null) {
      this.contactIds = Thrift.copyList(args.contactIds, [null]);
    }
  }
};
LineService_kickoutFromGroup_args.prototype = {};
LineService_kickoutFromGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1266 = 0;
        var _rtmp31270;
        this.contactIds = [];
        var _etype1269 = 0;
        _rtmp31270 = input.readListBegin();
        _etype1269 = _rtmp31270.etype;
        _size1266 = _rtmp31270.size;
        for (var _i1271 = 0; _i1271 < _size1266; ++_i1271)
        {
          var elem1272 = null;
          elem1272 = input.readString();
          this.contactIds.push(elem1272);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_kickoutFromGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_kickoutFromGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.contactIds !== null && this.contactIds !== undefined) {
    output.writeFieldBegin('contactIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.contactIds.length);
    for (var iter1273 in this.contactIds)
    {
      if (this.contactIds.hasOwnProperty(iter1273))
      {
        iter1273 = this.contactIds[iter1273];
        output.writeString(iter1273);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_kickoutFromGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_kickoutFromGroup_result.prototype = {};
LineService_kickoutFromGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_kickoutFromGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_kickoutFromGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_leaveGroup_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_leaveGroup_args.prototype = {};
LineService_leaveGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_leaveGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_leaveGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_leaveGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_leaveGroup_result.prototype = {};
LineService_leaveGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_leaveGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_leaveGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_leaveRoom_args = function(args) {
  this.reqSeq = null;
  this.roomId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.roomId !== undefined && args.roomId !== null) {
      this.roomId = args.roomId;
    }
  }
};
LineService_leaveRoom_args.prototype = {};
LineService_leaveRoom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.roomId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_leaveRoom_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_leaveRoom_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.roomId !== null && this.roomId !== undefined) {
    output.writeFieldBegin('roomId', Thrift.Type.STRING, 2);
    output.writeString(this.roomId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_leaveRoom_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_leaveRoom_result.prototype = {};
LineService_leaveRoom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_leaveRoom_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_leaveRoom_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithIdentityCredential_args = function(args) {
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  if (args) {
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
LineService_loginWithIdentityCredential_args.prototype = {};
LineService_loginWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithIdentityCredential_args');
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 8);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 9);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_loginWithIdentityCredential_result.prototype = {};
LineService_loginWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithIdentityCredentialForCertificate_args = function(args) {
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  if (args) {
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
LineService_loginWithIdentityCredentialForCertificate_args.prototype = {};
LineService_loginWithIdentityCredentialForCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithIdentityCredentialForCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithIdentityCredentialForCertificate_args');
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 8);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 9);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithIdentityCredentialForCertificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_loginWithIdentityCredentialForCertificate_result.prototype = {};
LineService_loginWithIdentityCredentialForCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithIdentityCredentialForCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithIdentityCredentialForCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithVerifier_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_loginWithVerifier_args.prototype = {};
LineService_loginWithVerifier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithVerifier_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithVerifier_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithVerifier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_loginWithVerifier_result.prototype = {};
LineService_loginWithVerifier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithVerifier_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithVerifier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithVerifierForCerificate_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_loginWithVerifierForCerificate_args.prototype = {};
LineService_loginWithVerifierForCerificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithVerifierForCerificate_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithVerifierForCerificate_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithVerifierForCerificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_loginWithVerifierForCerificate_result.prototype = {};
LineService_loginWithVerifierForCerificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithVerifierForCerificate_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithVerifierForCerificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithVerifierForCertificate_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_loginWithVerifierForCertificate_args.prototype = {};
LineService_loginWithVerifierForCertificate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithVerifierForCertificate_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithVerifierForCertificate_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_loginWithVerifierForCertificate_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LoginResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_loginWithVerifierForCertificate_result.prototype = {};
LineService_loginWithVerifierForCertificate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_loginWithVerifierForCertificate_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_loginWithVerifierForCertificate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_logout_args = function(args) {
};
LineService_logout_args.prototype = {};
LineService_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_logout_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_logout_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_logout_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_logout_result.prototype = {};
LineService_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_logout_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_logout_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_logoutSession_args = function(args) {
  this.tokenKey = null;
  if (args) {
    if (args.tokenKey !== undefined && args.tokenKey !== null) {
      this.tokenKey = args.tokenKey;
    }
  }
};
LineService_logoutSession_args.prototype = {};
LineService_logoutSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_logoutSession_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_logoutSession_args');
  if (this.tokenKey !== null && this.tokenKey !== undefined) {
    output.writeFieldBegin('tokenKey', Thrift.Type.STRING, 2);
    output.writeString(this.tokenKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_logoutSession_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_logoutSession_result.prototype = {};
LineService_logoutSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_logoutSession_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_logoutSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_noop_args = function(args) {
};
LineService_noop_args.prototype = {};
LineService_noop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_noop_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_noop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_noop_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_noop_result.prototype = {};
LineService_noop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_noop_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_noop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifiedRedirect_args = function(args) {
  this.paramMap = null;
  if (args) {
    if (args.paramMap !== undefined && args.paramMap !== null) {
      this.paramMap = Thrift.copyMap(args.paramMap, [null]);
    }
  }
};
LineService_notifiedRedirect_args.prototype = {};
LineService_notifiedRedirect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size1274 = 0;
        var _rtmp31278;
        this.paramMap = {};
        var _ktype1275 = 0;
        var _vtype1276 = 0;
        _rtmp31278 = input.readMapBegin();
        _ktype1275 = _rtmp31278.ktype;
        _vtype1276 = _rtmp31278.vtype;
        _size1274 = _rtmp31278.size;
        for (var _i1279 = 0; _i1279 < _size1274; ++_i1279)
        {
          var key1280 = null;
          var val1281 = null;
          key1280 = input.readString();
          val1281 = input.readString();
          this.paramMap[key1280] = val1281;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifiedRedirect_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifiedRedirect_args');
  if (this.paramMap !== null && this.paramMap !== undefined) {
    output.writeFieldBegin('paramMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.paramMap));
    for (var kiter1282 in this.paramMap)
    {
      if (this.paramMap.hasOwnProperty(kiter1282))
      {
        var viter1283 = this.paramMap[kiter1282];
        output.writeString(kiter1282);
        output.writeString(viter1283);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifiedRedirect_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifiedRedirect_result.prototype = {};
LineService_notifiedRedirect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifiedRedirect_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifiedRedirect_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyBuddyOnAir_args = function(args) {
  this.seq = null;
  this.receiverMids = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
LineService_notifyBuddyOnAir_args.prototype = {};
LineService_notifyBuddyOnAir_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1284 = 0;
        var _rtmp31288;
        this.receiverMids = [];
        var _etype1287 = 0;
        _rtmp31288 = input.readListBegin();
        _etype1287 = _rtmp31288.etype;
        _size1284 = _rtmp31288.size;
        for (var _i1289 = 0; _i1289 < _size1284; ++_i1289)
        {
          var elem1290 = null;
          elem1290 = input.readString();
          this.receiverMids.push(elem1290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyBuddyOnAir_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyBuddyOnAir_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter1291 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter1291))
      {
        iter1291 = this.receiverMids[iter1291];
        output.writeString(iter1291);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyBuddyOnAir_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyBuddyOnAir_result.prototype = {};
LineService_notifyBuddyOnAir_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1292 = 0;
        var _rtmp31296;
        this.success = {};
        var _ktype1293 = 0;
        var _vtype1294 = 0;
        _rtmp31296 = input.readMapBegin();
        _ktype1293 = _rtmp31296.ktype;
        _vtype1294 = _rtmp31296.vtype;
        _size1292 = _rtmp31296.size;
        for (var _i1297 = 0; _i1297 < _size1292; ++_i1297)
        {
          var key1298 = null;
          var val1299 = null;
          key1298 = input.readString();
          val1299 = input.readString();
          this.success[key1298] = val1299;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyBuddyOnAir_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyBuddyOnAir_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1300 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1300))
      {
        var viter1301 = this.success[kiter1300];
        output.writeString(kiter1300);
        output.writeString(viter1301);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyIndividualEvent_args = function(args) {
  this.notificationStatus = null;
  this.receiverMids = null;
  if (args) {
    if (args.notificationStatus !== undefined && args.notificationStatus !== null) {
      this.notificationStatus = args.notificationStatus;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
LineService_notifyIndividualEvent_args.prototype = {};
LineService_notifyIndividualEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.notificationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1302 = 0;
        var _rtmp31306;
        this.receiverMids = [];
        var _etype1305 = 0;
        _rtmp31306 = input.readListBegin();
        _etype1305 = _rtmp31306.etype;
        _size1302 = _rtmp31306.size;
        for (var _i1307 = 0; _i1307 < _size1302; ++_i1307)
        {
          var elem1308 = null;
          elem1308 = input.readString();
          this.receiverMids.push(elem1308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyIndividualEvent_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyIndividualEvent_args');
  if (this.notificationStatus !== null && this.notificationStatus !== undefined) {
    output.writeFieldBegin('notificationStatus', Thrift.Type.I32, 2);
    output.writeI32(this.notificationStatus);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter1309 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter1309))
      {
        iter1309 = this.receiverMids[iter1309];
        output.writeString(iter1309);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyIndividualEvent_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyIndividualEvent_result.prototype = {};
LineService_notifyIndividualEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyIndividualEvent_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyIndividualEvent_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyInstalled_args = function(args) {
  this.udidHash = null;
  this.applicationTypeWithExtensions = null;
  if (args) {
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.applicationTypeWithExtensions !== undefined && args.applicationTypeWithExtensions !== null) {
      this.applicationTypeWithExtensions = args.applicationTypeWithExtensions;
    }
  }
};
LineService_notifyInstalled_args.prototype = {};
LineService_notifyInstalled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.applicationTypeWithExtensions = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyInstalled_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyInstalled_args');
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 2);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.applicationTypeWithExtensions !== null && this.applicationTypeWithExtensions !== undefined) {
    output.writeFieldBegin('applicationTypeWithExtensions', Thrift.Type.STRING, 3);
    output.writeString(this.applicationTypeWithExtensions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyInstalled_result = function(args) {
};
LineService_notifyInstalled_result.prototype = {};
LineService_notifyInstalled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyInstalled_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyInstalled_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyRegistrationComplete_args = function(args) {
  this.udidHash = null;
  this.applicationTypeWithExtensions = null;
  if (args) {
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.applicationTypeWithExtensions !== undefined && args.applicationTypeWithExtensions !== null) {
      this.applicationTypeWithExtensions = args.applicationTypeWithExtensions;
    }
  }
};
LineService_notifyRegistrationComplete_args.prototype = {};
LineService_notifyRegistrationComplete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.applicationTypeWithExtensions = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyRegistrationComplete_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyRegistrationComplete_args');
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 2);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.applicationTypeWithExtensions !== null && this.applicationTypeWithExtensions !== undefined) {
    output.writeFieldBegin('applicationTypeWithExtensions', Thrift.Type.STRING, 3);
    output.writeString(this.applicationTypeWithExtensions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyRegistrationComplete_result = function(args) {
};
LineService_notifyRegistrationComplete_result.prototype = {};
LineService_notifyRegistrationComplete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyRegistrationComplete_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyRegistrationComplete_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifySleep_args = function(args) {
  this.lastRev = null;
  this.badge = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.badge !== undefined && args.badge !== null) {
      this.badge = args.badge;
    }
  }
};
LineService_notifySleep_args.prototype = {};
LineService_notifySleep_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.badge = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifySleep_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifySleep_args');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 2);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.badge !== null && this.badge !== undefined) {
    output.writeFieldBegin('badge', Thrift.Type.I32, 3);
    output.writeI32(this.badge);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifySleep_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifySleep_result.prototype = {};
LineService_notifySleep_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifySleep_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifySleep_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyUpdated_args = function(args) {
  this.lastRev = null;
  this.deviceInfo = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
  }
};
LineService_notifyUpdated_args.prototype = {};
LineService_notifyUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyUpdated_args');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 2);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 3);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notifyUpdated_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notifyUpdated_result.prototype = {};
LineService_notifyUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notifyUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notifyUpdated_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_openProximityMatch_args = function(args) {
  this.location = null;
  if (args) {
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Location(args.location);
    }
  }
};
LineService_openProximityMatch_args.prototype = {};
LineService_openProximityMatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_openProximityMatch_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_openProximityMatch_args');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 2);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_openProximityMatch_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_openProximityMatch_result.prototype = {};
LineService_openProximityMatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_openProximityMatch_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_openProximityMatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddyUser_args = function(args) {
  this.buddyId = null;
  this.registrarPassword = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.registrarPassword !== undefined && args.registrarPassword !== null) {
      this.registrarPassword = args.registrarPassword;
    }
  }
};
LineService_registerBuddyUser_args.prototype = {};
LineService_registerBuddyUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registrarPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddyUser_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddyUser_args');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 2);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.registrarPassword !== null && this.registrarPassword !== undefined) {
    output.writeFieldBegin('registrarPassword', Thrift.Type.STRING, 3);
    output.writeString(this.registrarPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddyUser_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerBuddyUser_result.prototype = {};
LineService_registerBuddyUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddyUser_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddyUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddyUserid_args = function(args) {
  this.seq = null;
  this.userid = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
LineService_registerBuddyUserid_args.prototype = {};
LineService_registerBuddyUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddyUserid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddyUserid_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 2);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerBuddyUserid_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerBuddyUserid_result.prototype = {};
LineService_registerBuddyUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerBuddyUserid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerBuddyUserid_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDevice_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_registerDevice_args.prototype = {};
LineService_registerDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDevice_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDevice_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerDevice_result.prototype = {};
LineService_registerDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDevice_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDeviceWithIdentityCredential_args = function(args) {
  this.sessionId = null;
  this.provider = null;
  this.identifier = null;
  this.verifier = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_registerDeviceWithIdentityCredential_args.prototype = {};
LineService_registerDeviceWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDeviceWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDeviceWithIdentityCredential_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 5);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 4);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDeviceWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerDeviceWithIdentityCredential_result.prototype = {};
LineService_registerDeviceWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDeviceWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDeviceWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumber_args = function(args) {
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
  }
};
LineService_registerDeviceWithoutPhoneNumber_args.prototype = {};
LineService_registerDeviceWithoutPhoneNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumber_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDeviceWithoutPhoneNumber_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 3);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 4);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumber_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerDeviceWithoutPhoneNumber_result.prototype = {};
LineService_registerDeviceWithoutPhoneNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumber_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDeviceWithoutPhoneNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args = function(args) {
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.provider = null;
  this.identifier = null;
  this.verifier = null;
  this.mid = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args.prototype = {};
LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 3);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 4);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 5);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 6);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 7);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 8);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result.prototype = {};
LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerUserid_args = function(args) {
  this.reqSeq = null;
  this.userid = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
  }
};
LineService_registerUserid_args.prototype = {};
LineService_registerUserid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerUserid_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerUserid_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 2);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerUserid_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerUserid_result.prototype = {};
LineService_registerUserid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerUserid_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerUserid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWapDevice_args = function(args) {
  this.invitationHash = null;
  this.guidHash = null;
  this.email = null;
  this.deviceInfo = null;
  if (args) {
    if (args.invitationHash !== undefined && args.invitationHash !== null) {
      this.invitationHash = args.invitationHash;
    }
    if (args.guidHash !== undefined && args.guidHash !== null) {
      this.guidHash = args.guidHash;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
  }
};
LineService_registerWapDevice_args.prototype = {};
LineService_registerWapDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.invitationHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.guidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWapDevice_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWapDevice_args');
  if (this.invitationHash !== null && this.invitationHash !== undefined) {
    output.writeFieldBegin('invitationHash', Thrift.Type.STRING, 2);
    output.writeString(this.invitationHash);
    output.writeFieldEnd();
  }
  if (this.guidHash !== null && this.guidHash !== undefined) {
    output.writeFieldBegin('guidHash', Thrift.Type.STRING, 3);
    output.writeString(this.guidHash);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 5);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWapDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerWapDevice_result.prototype = {};
LineService_registerWapDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWapDevice_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWapDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWithExistingSnsIdAndIdentityCredential_args = function(args) {
  this.identityCredential = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  if (args) {
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new ttypes.IdentityCredential(args.identityCredential);
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
  }
};
LineService_registerWithExistingSnsIdAndIdentityCredential_args.prototype = {};
LineService_registerWithExistingSnsIdAndIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new ttypes.IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWithExistingSnsIdAndIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWithExistingSnsIdAndIdentityCredential_args');
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 2);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 3);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 5);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWithExistingSnsIdAndIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerWithExistingSnsIdAndIdentityCredential_result.prototype = {};
LineService_registerWithExistingSnsIdAndIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWithExistingSnsIdAndIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWithExistingSnsIdAndIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWithSnsId_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.mid = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
LineService_registerWithSnsId_args.prototype = {};
LineService_registerWithSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWithSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWithSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 4);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 7);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWithSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RegisterWithSnsIdResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerWithSnsId_result.prototype = {};
LineService_registerWithSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RegisterWithSnsIdResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWithSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWithSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWithSnsIdAndIdentityCredential_args = function(args) {
  this.snsIdType = null;
  this.snsAccessToken = null;
  this.identityCredential = null;
  this.region = null;
  this.udidHash = null;
  this.deviceInfo = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsAccessToken !== undefined && args.snsAccessToken !== null) {
      this.snsAccessToken = args.snsAccessToken;
    }
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new ttypes.IdentityCredential(args.identityCredential);
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
  }
};
LineService_registerWithSnsIdAndIdentityCredential_args.prototype = {};
LineService_registerWithSnsIdAndIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new ttypes.IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWithSnsIdAndIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWithSnsIdAndIdentityCredential_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsAccessToken !== null && this.snsAccessToken !== undefined) {
    output.writeFieldBegin('snsAccessToken', Thrift.Type.STRING, 3);
    output.writeString(this.snsAccessToken);
    output.writeFieldEnd();
  }
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 4);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 5);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 6);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 7);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_registerWithSnsIdAndIdentityCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_registerWithSnsIdAndIdentityCredential_result.prototype = {};
LineService_registerWithSnsIdAndIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_registerWithSnsIdAndIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_registerWithSnsIdAndIdentityCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueDeviceCredential_args = function(args) {
};
LineService_reissueDeviceCredential_args.prototype = {};
LineService_reissueDeviceCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueDeviceCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueDeviceCredential_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueDeviceCredential_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reissueDeviceCredential_result.prototype = {};
LineService_reissueDeviceCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueDeviceCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueDeviceCredential_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueUserTicket_args = function(args) {
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
LineService_reissueUserTicket_args.prototype = {};
LineService_reissueUserTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueUserTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueUserTicket_args');
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 4);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueUserTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reissueUserTicket_result.prototype = {};
LineService_reissueUserTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueUserTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueUserTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueGroupTicket_args = function(args) {
  this.groupId = null;
  if (args) {
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_reissueGroupTicket_args.prototype = {};
LineService_reissueGroupTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueGroupTicket_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueGroupTicket_args');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 1);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reissueGroupTicket_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reissueGroupTicket_result.prototype = {};
LineService_reissueGroupTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reissueGroupTicket_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reissueGroupTicket_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_rejectGroupInvitation_args = function(args) {
  this.reqSeq = null;
  this.groupId = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
LineService_rejectGroupInvitation_args.prototype = {};
LineService_rejectGroupInvitation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_rejectGroupInvitation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_rejectGroupInvitation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_rejectGroupInvitation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_rejectGroupInvitation_result.prototype = {};
LineService_rejectGroupInvitation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_rejectGroupInvitation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_rejectGroupInvitation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_releaseSession_args = function(args) {
};
LineService_releaseSession_args.prototype = {};
LineService_releaseSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_releaseSession_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_releaseSession_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_releaseSession_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_releaseSession_result.prototype = {};
LineService_releaseSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_releaseSession_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_releaseSession_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeAllMessages_args = function(args) {
  this.seq = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
LineService_removeAllMessages_args.prototype = {};
LineService_removeAllMessages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeAllMessages_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeAllMessages_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 2);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeAllMessages_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeAllMessages_result.prototype = {};
LineService_removeAllMessages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeAllMessages_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeAllMessages_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeBuddyLocation_args = function(args) {
  this.mid = null;
  this.index = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
LineService_removeBuddyLocation_args.prototype = {};
LineService_removeBuddyLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeBuddyLocation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeBuddyLocation_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 3);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeBuddyLocation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeBuddyLocation_result.prototype = {};
LineService_removeBuddyLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeBuddyLocation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeBuddyLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeMessage_args = function(args) {
  this.messageId = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
LineService_removeMessage_args.prototype = {};
LineService_removeMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeMessage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeMessage_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeMessage_result.prototype = {};
LineService_removeMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeMessage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeMessageFromMyHome_args = function(args) {
  this.messageId = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
LineService_removeMessageFromMyHome_args.prototype = {};
LineService_removeMessageFromMyHome_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeMessageFromMyHome_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeMessageFromMyHome_args');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeMessageFromMyHome_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeMessageFromMyHome_result.prototype = {};
LineService_removeMessageFromMyHome_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeMessageFromMyHome_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeMessageFromMyHome_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeSnsId_args = function(args) {
  this.snsIdType = null;
  if (args) {
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
  }
};
LineService_removeSnsId_args.prototype = {};
LineService_removeSnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeSnsId_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeSnsId_args');
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_removeSnsId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_removeSnsId_result.prototype = {};
LineService_removeSnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_removeSnsId_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_removeSnsId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_report_args = function(args) {
  this.syncOpRevision = null;
  this.category = null;
  this.report = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.report !== undefined && args.report !== null) {
      this.report = args.report;
    }
  }
};
LineService_report_args.prototype = {};
LineService_report_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.report = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_report_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_report_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.report !== null && this.report !== undefined) {
    output.writeFieldBegin('report', Thrift.Type.STRING, 4);
    output.writeString(this.report);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_report_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_report_result.prototype = {};
LineService_report_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_report_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_report_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportContacts_args = function(args) {
  this.syncOpRevision = null;
  this.category = null;
  this.contactReports = null;
  this.actionType = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.contactReports !== undefined && args.contactReports !== null) {
      this.contactReports = Thrift.copyList(args.contactReports, [ttypes.ContactReport]);
    }
    if (args.actionType !== undefined && args.actionType !== null) {
      this.actionType = args.actionType;
    }
  }
};
LineService_reportContacts_args.prototype = {};
LineService_reportContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1310 = 0;
        var _rtmp31314;
        this.contactReports = [];
        var _etype1313 = 0;
        _rtmp31314 = input.readListBegin();
        _etype1313 = _rtmp31314.etype;
        _size1310 = _rtmp31314.size;
        for (var _i1315 = 0; _i1315 < _size1310; ++_i1315)
        {
          var elem1316 = null;
          elem1316 = new ttypes.ContactReport();
          elem1316.read(input);
          this.contactReports.push(elem1316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.actionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportContacts_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.contactReports !== null && this.contactReports !== undefined) {
    output.writeFieldBegin('contactReports', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.contactReports.length);
    for (var iter1317 in this.contactReports)
    {
      if (this.contactReports.hasOwnProperty(iter1317))
      {
        iter1317 = this.contactReports[iter1317];
        iter1317.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionType !== null && this.actionType !== undefined) {
    output.writeFieldBegin('actionType', Thrift.Type.I32, 5);
    output.writeI32(this.actionType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ContactReportResult]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reportContacts_result.prototype = {};
LineService_reportContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1318 = 0;
        var _rtmp31322;
        this.success = [];
        var _etype1321 = 0;
        _rtmp31322 = input.readListBegin();
        _etype1321 = _rtmp31322.etype;
        _size1318 = _rtmp31322.size;
        for (var _i1323 = 0; _i1323 < _size1318; ++_i1323)
        {
          var elem1324 = null;
          elem1324 = new ttypes.ContactReportResult();
          elem1324.read(input);
          this.success.push(elem1324);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1325 in this.success)
    {
      if (this.success.hasOwnProperty(iter1325))
      {
        iter1325 = this.success[iter1325];
        iter1325.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportGroups_args = function(args) {
  this.syncOpRevision = null;
  this.groups = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
  }
};
LineService_reportGroups_args.prototype = {};
LineService_reportGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1326 = 0;
        var _rtmp31330;
        this.groups = [];
        var _etype1329 = 0;
        _rtmp31330 = input.readListBegin();
        _etype1329 = _rtmp31330.etype;
        _size1326 = _rtmp31330.size;
        for (var _i1331 = 0; _i1331 < _size1326; ++_i1331)
        {
          var elem1332 = null;
          elem1332 = new ttypes.Group();
          elem1332.read(input);
          this.groups.push(elem1332);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportGroups_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportGroups_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter1333 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter1333))
      {
        iter1333 = this.groups[iter1333];
        iter1333.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportGroups_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reportGroups_result.prototype = {};
LineService_reportGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportGroups_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportGroups_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportProfile_args = function(args) {
  this.syncOpRevision = null;
  this.profile = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new ttypes.Profile(args.profile);
    }
  }
};
LineService_reportProfile_args.prototype = {};
LineService_reportProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new ttypes.Profile();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportProfile_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 3);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportProfile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reportProfile_result.prototype = {};
LineService_reportProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportProfile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportRooms_args = function(args) {
  this.syncOpRevision = null;
  this.rooms = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.rooms !== undefined && args.rooms !== null) {
      this.rooms = Thrift.copyList(args.rooms, [ttypes.Room]);
    }
  }
};
LineService_reportRooms_args.prototype = {};
LineService_reportRooms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1334 = 0;
        var _rtmp31338;
        this.rooms = [];
        var _etype1337 = 0;
        _rtmp31338 = input.readListBegin();
        _etype1337 = _rtmp31338.etype;
        _size1334 = _rtmp31338.size;
        for (var _i1339 = 0; _i1339 < _size1334; ++_i1339)
        {
          var elem1340 = null;
          elem1340 = new ttypes.Room();
          elem1340.read(input);
          this.rooms.push(elem1340);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportRooms_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportRooms_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.rooms !== null && this.rooms !== undefined) {
    output.writeFieldBegin('rooms', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rooms.length);
    for (var iter1341 in this.rooms)
    {
      if (this.rooms.hasOwnProperty(iter1341))
      {
        iter1341 = this.rooms[iter1341];
        iter1341.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportRooms_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reportRooms_result.prototype = {};
LineService_reportRooms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportRooms_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportRooms_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportSettings_args = function(args) {
  this.syncOpRevision = null;
  this.settings = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.Settings(args.settings);
    }
  }
};
LineService_reportSettings_args.prototype = {};
LineService_reportSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportSettings_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportSettings_args');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 2);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 3);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportSettings_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reportSettings_result.prototype = {};
LineService_reportSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportSettings_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportSpammer_args = function(args) {
  this.spammerMid = null;
  this.spammerReasons = null;
  this.spamMessageIds = null;
  if (args) {
    if (args.spammerMid !== undefined && args.spammerMid !== null) {
      this.spammerMid = args.spammerMid;
    }
    if (args.spammerReasons !== undefined && args.spammerReasons !== null) {
      this.spammerReasons = Thrift.copyList(args.spammerReasons, [null]);
    }
    if (args.spamMessageIds !== undefined && args.spamMessageIds !== null) {
      this.spamMessageIds = Thrift.copyList(args.spamMessageIds, [null]);
    }
  }
};
LineService_reportSpammer_args.prototype = {};
LineService_reportSpammer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.spammerMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1342 = 0;
        var _rtmp31346;
        this.spammerReasons = [];
        var _etype1345 = 0;
        _rtmp31346 = input.readListBegin();
        _etype1345 = _rtmp31346.etype;
        _size1342 = _rtmp31346.size;
        for (var _i1347 = 0; _i1347 < _size1342; ++_i1347)
        {
          var elem1348 = null;
          elem1348 = input.readI32();
          this.spammerReasons.push(elem1348);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1349 = 0;
        var _rtmp31353;
        this.spamMessageIds = [];
        var _etype1352 = 0;
        _rtmp31353 = input.readListBegin();
        _etype1352 = _rtmp31353.etype;
        _size1349 = _rtmp31353.size;
        for (var _i1354 = 0; _i1354 < _size1349; ++_i1354)
        {
          var elem1355 = null;
          elem1355 = input.readString();
          this.spamMessageIds.push(elem1355);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportSpammer_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportSpammer_args');
  if (this.spammerMid !== null && this.spammerMid !== undefined) {
    output.writeFieldBegin('spammerMid', Thrift.Type.STRING, 2);
    output.writeString(this.spammerMid);
    output.writeFieldEnd();
  }
  if (this.spammerReasons !== null && this.spammerReasons !== undefined) {
    output.writeFieldBegin('spammerReasons', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.spammerReasons.length);
    for (var iter1356 in this.spammerReasons)
    {
      if (this.spammerReasons.hasOwnProperty(iter1356))
      {
        iter1356 = this.spammerReasons[iter1356];
        output.writeI32(iter1356);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spamMessageIds !== null && this.spamMessageIds !== undefined) {
    output.writeFieldBegin('spamMessageIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.spamMessageIds.length);
    for (var iter1357 in this.spamMessageIds)
    {
      if (this.spamMessageIds.hasOwnProperty(iter1357))
      {
        iter1357 = this.spamMessageIds[iter1357];
        output.writeString(iter1357);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_reportSpammer_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_reportSpammer_result.prototype = {};
LineService_reportSpammer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_reportSpammer_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_reportSpammer_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestAccountPasswordReset_args = function(args) {
  this.provider = null;
  this.identifier = null;
  this.locale = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_requestAccountPasswordReset_args.prototype = {};
LineService_requestAccountPasswordReset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestAccountPasswordReset_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestAccountPasswordReset_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 5);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestAccountPasswordReset_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_requestAccountPasswordReset_result.prototype = {};
LineService_requestAccountPasswordReset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestAccountPasswordReset_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestAccountPasswordReset_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestEmailConfirmation_args = function(args) {
  this.emailConfirmation = null;
  if (args) {
    if (args.emailConfirmation !== undefined && args.emailConfirmation !== null) {
      this.emailConfirmation = new ttypes.EmailConfirmation(args.emailConfirmation);
    }
  }
};
LineService_requestEmailConfirmation_args.prototype = {};
LineService_requestEmailConfirmation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.emailConfirmation = new ttypes.EmailConfirmation();
        this.emailConfirmation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestEmailConfirmation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestEmailConfirmation_args');
  if (this.emailConfirmation !== null && this.emailConfirmation !== undefined) {
    output.writeFieldBegin('emailConfirmation', Thrift.Type.STRUCT, 2);
    this.emailConfirmation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestEmailConfirmation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.EmailConfirmationSession(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_requestEmailConfirmation_result.prototype = {};
LineService_requestEmailConfirmation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EmailConfirmationSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestEmailConfirmation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestEmailConfirmation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestIdentityUnbind_args = function(args) {
  this.provider = null;
  this.identifier = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
  }
};
LineService_requestIdentityUnbind_args.prototype = {};
LineService_requestIdentityUnbind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestIdentityUnbind_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestIdentityUnbind_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_requestIdentityUnbind_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_requestIdentityUnbind_result.prototype = {};
LineService_requestIdentityUnbind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_requestIdentityUnbind_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_requestIdentityUnbind_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_resendEmailConfirmation_args = function(args) {
  this.verifier = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_resendEmailConfirmation_args.prototype = {};
LineService_resendEmailConfirmation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_resendEmailConfirmation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_resendEmailConfirmation_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_resendEmailConfirmation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.EmailConfirmationSession(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_resendEmailConfirmation_result.prototype = {};
LineService_resendEmailConfirmation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EmailConfirmationSession();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_resendEmailConfirmation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_resendEmailConfirmation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_resendPinCode_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_resendPinCode_args.prototype = {};
LineService_resendPinCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_resendPinCode_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_resendPinCode_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_resendPinCode_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_resendPinCode_result.prototype = {};
LineService_resendPinCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_resendPinCode_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_resendPinCode_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_resendPinCodeBySMS_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
LineService_resendPinCodeBySMS_args.prototype = {};
LineService_resendPinCodeBySMS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_resendPinCodeBySMS_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_resendPinCodeBySMS_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_resendPinCodeBySMS_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_resendPinCodeBySMS_result.prototype = {};
LineService_resendPinCodeBySMS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_resendPinCodeBySMS_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_resendPinCodeBySMS_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendChatChecked_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
LineService_sendChatChecked_args.prototype = {};
LineService_sendChatChecked_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendChatChecked_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendChatChecked_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendChatChecked_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendChatChecked_result.prototype = {};
LineService_sendChatChecked_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendChatChecked_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendChatChecked_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendChatRemoved_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.lastMessageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.lastMessageId !== undefined && args.lastMessageId !== null) {
      this.lastMessageId = args.lastMessageId;
    }
  }
};
LineService_sendChatRemoved_args.prototype = {};
LineService_sendChatRemoved_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendChatRemoved_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendChatRemoved_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.lastMessageId !== null && this.lastMessageId !== undefined) {
    output.writeFieldBegin('lastMessageId', Thrift.Type.STRING, 3);
    output.writeString(this.lastMessageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendChatRemoved_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendChatRemoved_result.prototype = {};
LineService_sendChatRemoved_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendChatRemoved_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendChatRemoved_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendContentPreviewUpdated_args = function(args) {
  this.esq = null;
  this.messageId = null;
  this.receiverMids = null;
  if (args) {
    if (args.esq !== undefined && args.esq !== null) {
      this.esq = args.esq;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.receiverMids !== undefined && args.receiverMids !== null) {
      this.receiverMids = Thrift.copyList(args.receiverMids, [null]);
    }
  }
};
LineService_sendContentPreviewUpdated_args.prototype = {};
LineService_sendContentPreviewUpdated_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.esq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1358 = 0;
        var _rtmp31362;
        this.receiverMids = [];
        var _etype1361 = 0;
        _rtmp31362 = input.readListBegin();
        _etype1361 = _rtmp31362.etype;
        _size1358 = _rtmp31362.size;
        for (var _i1363 = 0; _i1363 < _size1358; ++_i1363)
        {
          var elem1364 = null;
          elem1364 = input.readString();
          this.receiverMids.push(elem1364);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendContentPreviewUpdated_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendContentPreviewUpdated_args');
  if (this.esq !== null && this.esq !== undefined) {
    output.writeFieldBegin('esq', Thrift.Type.I32, 1);
    output.writeI32(this.esq);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 2);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.receiverMids !== null && this.receiverMids !== undefined) {
    output.writeFieldBegin('receiverMids', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.receiverMids.length);
    for (var iter1365 in this.receiverMids)
    {
      if (this.receiverMids.hasOwnProperty(iter1365))
      {
        iter1365 = this.receiverMids[iter1365];
        output.writeString(iter1365);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendContentPreviewUpdated_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendContentPreviewUpdated_result.prototype = {};
LineService_sendContentPreviewUpdated_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1366 = 0;
        var _rtmp31370;
        this.success = {};
        var _ktype1367 = 0;
        var _vtype1368 = 0;
        _rtmp31370 = input.readMapBegin();
        _ktype1367 = _rtmp31370.ktype;
        _vtype1368 = _rtmp31370.vtype;
        _size1366 = _rtmp31370.size;
        for (var _i1371 = 0; _i1371 < _size1366; ++_i1371)
        {
          var key1372 = null;
          var val1373 = null;
          key1372 = input.readString();
          val1373 = input.readString();
          this.success[key1372] = val1373;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendContentPreviewUpdated_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendContentPreviewUpdated_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter1374 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1374))
      {
        var viter1375 = this.success[kiter1374];
        output.writeString(kiter1374);
        output.writeString(viter1375);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendContentReceipt_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.messageId = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
LineService_sendContentReceipt_args.prototype = {};
LineService_sendContentReceipt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendContentReceipt_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendContentReceipt_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendContentReceipt_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendContentReceipt_result.prototype = {};
LineService_sendContentReceipt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendContentReceipt_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendContentReceipt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendDummyPush_args = function(args) {
};
LineService_sendDummyPush_args.prototype = {};
LineService_sendDummyPush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendDummyPush_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendDummyPush_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendDummyPush_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendDummyPush_result.prototype = {};
LineService_sendDummyPush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendDummyPush_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendDummyPush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendEvent_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
LineService_sendEvent_args.prototype = {};
LineService_sendEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendEvent_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendEvent_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendEvent_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendEvent_result.prototype = {};
LineService_sendEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendEvent_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessage_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
LineService_sendMessage_args.prototype = {};
LineService_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendMessage_result.prototype = {};
LineService_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageIgnored_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.messageIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
LineService_sendMessageIgnored_args.prototype = {};
LineService_sendMessageIgnored_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1376 = 0;
        var _rtmp31380;
        this.messageIds = [];
        var _etype1379 = 0;
        _rtmp31380 = input.readListBegin();
        _etype1379 = _rtmp31380.etype;
        _size1376 = _rtmp31380.size;
        for (var _i1381 = 0; _i1381 < _size1376; ++_i1381)
        {
          var elem1382 = null;
          elem1382 = input.readString();
          this.messageIds.push(elem1382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageIgnored_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageIgnored_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter1383 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter1383))
      {
        iter1383 = this.messageIds[iter1383];
        output.writeString(iter1383);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageIgnored_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendMessageIgnored_result.prototype = {};
LineService_sendMessageIgnored_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageIgnored_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageIgnored_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageReceipt_args = function(args) {
  this.seq = null;
  this.consumer = null;
  this.messageIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.consumer !== undefined && args.consumer !== null) {
      this.consumer = args.consumer;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
LineService_sendMessageReceipt_args.prototype = {};
LineService_sendMessageReceipt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.consumer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1384 = 0;
        var _rtmp31388;
        this.messageIds = [];
        var _etype1387 = 0;
        _rtmp31388 = input.readListBegin();
        _etype1387 = _rtmp31388.etype;
        _size1384 = _rtmp31388.size;
        for (var _i1389 = 0; _i1389 < _size1384; ++_i1389)
        {
          var elem1390 = null;
          elem1390 = input.readString();
          this.messageIds.push(elem1390);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageReceipt_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageReceipt_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.consumer !== null && this.consumer !== undefined) {
    output.writeFieldBegin('consumer', Thrift.Type.STRING, 2);
    output.writeString(this.consumer);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter1391 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter1391))
      {
        iter1391 = this.messageIds[iter1391];
        output.writeString(iter1391);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageReceipt_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendMessageReceipt_result.prototype = {};
LineService_sendMessageReceipt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageReceipt_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageReceipt_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageToMyHome_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
LineService_sendMessageToMyHome_args.prototype = {};
LineService_sendMessageToMyHome_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageToMyHome_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageToMyHome_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_sendMessageToMyHome_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_sendMessageToMyHome_result.prototype = {};
LineService_sendMessageToMyHome_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_sendMessageToMyHome_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_sendMessageToMyHome_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setBuddyLocation_args = function(args) {
  this.mid = null;
  this.index = null;
  this.location = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Geolocation(args.location);
    }
  }
};
LineService_setBuddyLocation_args.prototype = {};
LineService_setBuddyLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Geolocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setBuddyLocation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_setBuddyLocation_args');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 3);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 4);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setBuddyLocation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_setBuddyLocation_result.prototype = {};
LineService_setBuddyLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setBuddyLocation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_setBuddyLocation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setIdentityCredential_args = function(args) {
  this.provider = null;
  this.identifier = null;
  this.verifier = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
  }
};
LineService_setIdentityCredential_args.prototype = {};
LineService_setIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_setIdentityCredential_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 4);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setIdentityCredential_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_setIdentityCredential_result.prototype = {};
LineService_setIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_setIdentityCredential_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setNotificationsEnabled_args = function(args) {
  this.reqSeq = null;
  this.type = null;
  this.target = null;
  this.enablement = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.enablement !== undefined && args.enablement !== null) {
      this.enablement = args.enablement;
    }
  }
};
LineService_setNotificationsEnabled_args.prototype = {};
LineService_setNotificationsEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.enablement = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setNotificationsEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_setNotificationsEnabled_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 3);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.enablement !== null && this.enablement !== undefined) {
    output.writeFieldBegin('enablement', Thrift.Type.BOOL, 4);
    output.writeBool(this.enablement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_setNotificationsEnabled_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_setNotificationsEnabled_result.prototype = {};
LineService_setNotificationsEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_setNotificationsEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_setNotificationsEnabled_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_startUpdateVerification_args = function(args) {
  this.region = null;
  this.carrier = null;
  this.phone = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.networkCode = null;
  this.locale = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.networkCode !== undefined && args.networkCode !== null) {
      this.networkCode = args.networkCode;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_startUpdateVerification_args.prototype = {};
LineService_startUpdateVerification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.networkCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_startUpdateVerification_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_startUpdateVerification_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 3);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.networkCode !== null && this.networkCode !== undefined) {
    output.writeFieldBegin('networkCode', Thrift.Type.STRING, 7);
    output.writeString(this.networkCode);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 8);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_startUpdateVerification_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerificationSessionData(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_startUpdateVerification_result.prototype = {};
LineService_startUpdateVerification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerificationSessionData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_startUpdateVerification_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_startUpdateVerification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_startVerification_args = function(args) {
  this.region = null;
  this.carrier = null;
  this.phone = null;
  this.udidHash = null;
  this.deviceInfo = null;
  this.networkCode = null;
  this.mid = null;
  this.locale = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.carrier !== undefined && args.carrier !== null) {
      this.carrier = args.carrier;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
    if (args.networkCode !== undefined && args.networkCode !== null) {
      this.networkCode = args.networkCode;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
LineService_startVerification_args.prototype = {};
LineService_startVerification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.carrier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.networkCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_startVerification_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_startVerification_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.carrier !== null && this.carrier !== undefined) {
    output.writeFieldBegin('carrier', Thrift.Type.I32, 3);
    output.writeI32(this.carrier);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 5);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 6);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.networkCode !== null && this.networkCode !== undefined) {
    output.writeFieldBegin('networkCode', Thrift.Type.STRING, 7);
    output.writeString(this.networkCode);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 8);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 9);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_startVerification_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerificationSessionData(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_startVerification_result.prototype = {};
LineService_startVerification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.VerificationSessionData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_startVerification_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_startVerification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_storeUpdateProfileAttribute_args = function(args) {
  this.seq = null;
  this.profileAttribute = null;
  this.value = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.profileAttribute !== undefined && args.profileAttribute !== null) {
      this.profileAttribute = args.profileAttribute;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
LineService_storeUpdateProfileAttribute_args.prototype = {};
LineService_storeUpdateProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.profileAttribute = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_storeUpdateProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_storeUpdateProfileAttribute_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.profileAttribute !== null && this.profileAttribute !== undefined) {
    output.writeFieldBegin('profileAttribute', Thrift.Type.I32, 2);
    output.writeI32(this.profileAttribute);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_storeUpdateProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_storeUpdateProfileAttribute_result.prototype = {};
LineService_storeUpdateProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_storeUpdateProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_storeUpdateProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_syncContactBySnsIds_args = function(args) {
  this.reqSeq = null;
  this.modifications = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.modifications !== undefined && args.modifications !== null) {
      this.modifications = Thrift.copyList(args.modifications, [ttypes.SnsFriendModification]);
    }
  }
};
LineService_syncContactBySnsIds_args.prototype = {};
LineService_syncContactBySnsIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1392 = 0;
        var _rtmp31396;
        this.modifications = [];
        var _etype1395 = 0;
        _rtmp31396 = input.readListBegin();
        _etype1395 = _rtmp31396.etype;
        _size1392 = _rtmp31396.size;
        for (var _i1397 = 0; _i1397 < _size1392; ++_i1397)
        {
          var elem1398 = null;
          elem1398 = new ttypes.SnsFriendModification();
          elem1398.read(input);
          this.modifications.push(elem1398);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_syncContactBySnsIds_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_syncContactBySnsIds_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.modifications !== null && this.modifications !== undefined) {
    output.writeFieldBegin('modifications', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.modifications.length);
    for (var iter1399 in this.modifications)
    {
      if (this.modifications.hasOwnProperty(iter1399))
      {
        iter1399 = this.modifications[iter1399];
        iter1399.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_syncContactBySnsIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.SnsFriendContactRegistration]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_syncContactBySnsIds_result.prototype = {};
LineService_syncContactBySnsIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1400 = 0;
        var _rtmp31404;
        this.success = [];
        var _etype1403 = 0;
        _rtmp31404 = input.readListBegin();
        _etype1403 = _rtmp31404.etype;
        _size1400 = _rtmp31404.size;
        for (var _i1405 = 0; _i1405 < _size1400; ++_i1405)
        {
          var elem1406 = null;
          elem1406 = new ttypes.SnsFriendContactRegistration();
          elem1406.read(input);
          this.success.push(elem1406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_syncContactBySnsIds_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_syncContactBySnsIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1407 in this.success)
    {
      if (this.success.hasOwnProperty(iter1407))
      {
        iter1407 = this.success[iter1407];
        iter1407.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_syncContacts_args = function(args) {
  this.reqSeq = null;
  this.localContacts = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.localContacts !== undefined && args.localContacts !== null) {
      this.localContacts = Thrift.copyList(args.localContacts, [ttypes.ContactModification]);
    }
  }
};
LineService_syncContacts_args.prototype = {};
LineService_syncContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1408 = 0;
        var _rtmp31412;
        this.localContacts = [];
        var _etype1411 = 0;
        _rtmp31412 = input.readListBegin();
        _etype1411 = _rtmp31412.etype;
        _size1408 = _rtmp31412.size;
        for (var _i1413 = 0; _i1413 < _size1408; ++_i1413)
        {
          var elem1414 = null;
          elem1414 = new ttypes.ContactModification();
          elem1414.read(input);
          this.localContacts.push(elem1414);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_syncContacts_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_syncContacts_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.localContacts !== null && this.localContacts !== undefined) {
    output.writeFieldBegin('localContacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.localContacts.length);
    for (var iter1415 in this.localContacts)
    {
      if (this.localContacts.hasOwnProperty(iter1415))
      {
        iter1415 = this.localContacts[iter1415];
        iter1415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_syncContacts_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.ContactRegistration]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_syncContacts_result.prototype = {};
LineService_syncContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1416 = 0;
        var _rtmp31420;
        this.success = {};
        var _ktype1417 = 0;
        var _vtype1418 = 0;
        _rtmp31420 = input.readMapBegin();
        _ktype1417 = _rtmp31420.ktype;
        _vtype1418 = _rtmp31420.vtype;
        _size1416 = _rtmp31420.size;
        for (var _i1421 = 0; _i1421 < _size1416; ++_i1421)
        {
          var key1422 = null;
          var val1423 = null;
          key1422 = input.readString();
          val1423 = new ttypes.ContactRegistration();
          val1423.read(input);
          this.success[key1422] = val1423;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_syncContacts_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_syncContacts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter1424 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1424))
      {
        var viter1425 = this.success[kiter1424];
        output.writeString(kiter1424);
        viter1425.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_trySendMessage_args = function(args) {
  this.seq = null;
  this.message = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
LineService_trySendMessage_args.prototype = {};
LineService_trySendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_trySendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_trySendMessage_args');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 2);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_trySendMessage_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Message(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_trySendMessage_result.prototype = {};
LineService_trySendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Message();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_trySendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_trySendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unblockContact_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
LineService_unblockContact_args.prototype = {};
LineService_unblockContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unblockContact_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unblockContact_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unblockContact_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unblockContact_result.prototype = {};
LineService_unblockContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unblockContact_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unblockContact_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unblockRecommendation_args = function(args) {
  this.reqSeq = null;
  this.id = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
LineService_unblockRecommendation_args.prototype = {};
LineService_unblockRecommendation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unblockRecommendation_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unblockRecommendation_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unblockRecommendation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unblockRecommendation_result.prototype = {};
LineService_unblockRecommendation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unblockRecommendation_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unblockRecommendation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterUserAndDevice_args = function(args) {
};
LineService_unregisterUserAndDevice_args.prototype = {};
LineService_unregisterUserAndDevice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterUserAndDevice_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterUserAndDevice_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_unregisterUserAndDevice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_unregisterUserAndDevice_result.prototype = {};
LineService_unregisterUserAndDevice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_unregisterUserAndDevice_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_unregisterUserAndDevice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateApnsDeviceToken_args = function(args) {
  this.apnsDeviceToken = null;
  if (args) {
    if (args.apnsDeviceToken !== undefined && args.apnsDeviceToken !== null) {
      this.apnsDeviceToken = args.apnsDeviceToken;
    }
  }
};
LineService_updateApnsDeviceToken_args.prototype = {};
LineService_updateApnsDeviceToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apnsDeviceToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateApnsDeviceToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateApnsDeviceToken_args');
  if (this.apnsDeviceToken !== null && this.apnsDeviceToken !== undefined) {
    output.writeFieldBegin('apnsDeviceToken', Thrift.Type.STRING, 2);
    output.writeBinary(this.apnsDeviceToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateApnsDeviceToken_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateApnsDeviceToken_result.prototype = {};
LineService_updateApnsDeviceToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateApnsDeviceToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateApnsDeviceToken_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddySetting_args = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
LineService_updateBuddySetting_args.prototype = {};
LineService_updateBuddySetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddySetting_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddySetting_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateBuddySetting_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateBuddySetting_result.prototype = {};
LineService_updateBuddySetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateBuddySetting_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateBuddySetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateC2DMRegistrationId_args = function(args) {
  this.registrationId = null;
  if (args) {
    if (args.registrationId !== undefined && args.registrationId !== null) {
      this.registrationId = args.registrationId;
    }
  }
};
LineService_updateC2DMRegistrationId_args.prototype = {};
LineService_updateC2DMRegistrationId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registrationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateC2DMRegistrationId_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateC2DMRegistrationId_args');
  if (this.registrationId !== null && this.registrationId !== undefined) {
    output.writeFieldBegin('registrationId', Thrift.Type.STRING, 2);
    output.writeString(this.registrationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateC2DMRegistrationId_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateC2DMRegistrationId_result.prototype = {};
LineService_updateC2DMRegistrationId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateC2DMRegistrationId_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateC2DMRegistrationId_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateContactSetting_args = function(args) {
  this.reqSeq = null;
  this.mid = null;
  this.flag = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
LineService_updateContactSetting_args.prototype = {};
LineService_updateContactSetting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateContactSetting_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateContactSetting_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I32, 3);
    output.writeI32(this.flag);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateContactSetting_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateContactSetting_result.prototype = {};
LineService_updateContactSetting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateContactSetting_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateContactSetting_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateCustomModeSettings_args = function(args) {
  this.customMode = null;
  this.paramMap = null;
  if (args) {
    if (args.customMode !== undefined && args.customMode !== null) {
      this.customMode = args.customMode;
    }
    if (args.paramMap !== undefined && args.paramMap !== null) {
      this.paramMap = Thrift.copyMap(args.paramMap, [null]);
    }
  }
};
LineService_updateCustomModeSettings_args.prototype = {};
LineService_updateCustomModeSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.customMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size1426 = 0;
        var _rtmp31430;
        this.paramMap = {};
        var _ktype1427 = 0;
        var _vtype1428 = 0;
        _rtmp31430 = input.readMapBegin();
        _ktype1427 = _rtmp31430.ktype;
        _vtype1428 = _rtmp31430.vtype;
        _size1426 = _rtmp31430.size;
        for (var _i1431 = 0; _i1431 < _size1426; ++_i1431)
        {
          var key1432 = null;
          var val1433 = null;
          key1432 = input.readString();
          val1433 = input.readString();
          this.paramMap[key1432] = val1433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateCustomModeSettings_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateCustomModeSettings_args');
  if (this.customMode !== null && this.customMode !== undefined) {
    output.writeFieldBegin('customMode', Thrift.Type.I32, 2);
    output.writeI32(this.customMode);
    output.writeFieldEnd();
  }
  if (this.paramMap !== null && this.paramMap !== undefined) {
    output.writeFieldBegin('paramMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.paramMap));
    for (var kiter1434 in this.paramMap)
    {
      if (this.paramMap.hasOwnProperty(kiter1434))
      {
        var viter1435 = this.paramMap[kiter1434];
        output.writeString(kiter1434);
        output.writeString(viter1435);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateCustomModeSettings_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateCustomModeSettings_result.prototype = {};
LineService_updateCustomModeSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateCustomModeSettings_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateCustomModeSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateDeviceInfo_args = function(args) {
  this.deviceUid = null;
  this.deviceInfo = null;
  if (args) {
    if (args.deviceUid !== undefined && args.deviceUid !== null) {
      this.deviceUid = args.deviceUid;
    }
    if (args.deviceInfo !== undefined && args.deviceInfo !== null) {
      this.deviceInfo = new ttypes.DeviceInfo(args.deviceInfo);
    }
  }
};
LineService_updateDeviceInfo_args.prototype = {};
LineService_updateDeviceInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deviceUid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceInfo = new ttypes.DeviceInfo();
        this.deviceInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateDeviceInfo_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateDeviceInfo_args');
  if (this.deviceUid !== null && this.deviceUid !== undefined) {
    output.writeFieldBegin('deviceUid', Thrift.Type.STRING, 2);
    output.writeString(this.deviceUid);
    output.writeFieldEnd();
  }
  if (this.deviceInfo !== null && this.deviceInfo !== undefined) {
    output.writeFieldBegin('deviceInfo', Thrift.Type.STRUCT, 3);
    this.deviceInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateDeviceInfo_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateDeviceInfo_result.prototype = {};
LineService_updateDeviceInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateDeviceInfo_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateDeviceInfo_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateGroup_args = function(args) {
  this.reqSeq = null;
  this.group = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = new ttypes.Group(args.group);
    }
  }
};
LineService_updateGroup_args.prototype = {};
LineService_updateGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new ttypes.Group();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateGroup_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateGroup_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 2);
    this.group.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateGroup_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateGroup_result.prototype = {};
LineService_updateGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateGroup_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateGroup_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateNotificationToken_args = function(args) {
  this.type = null;
  this.token = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
LineService_updateNotificationToken_args.prototype = {};
LineService_updateNotificationToken_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateNotificationToken_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateNotificationToken_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateNotificationToken_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateNotificationToken_result.prototype = {};
LineService_updateNotificationToken_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateNotificationToken_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateNotificationToken_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateNotificationTokenWithBytes_args = function(args) {
  this.type = null;
  this.token = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
LineService_updateNotificationTokenWithBytes_args.prototype = {};
LineService_updateNotificationTokenWithBytes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateNotificationTokenWithBytes_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateNotificationTokenWithBytes_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeBinary(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateNotificationTokenWithBytes_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateNotificationTokenWithBytes_result.prototype = {};
LineService_updateNotificationTokenWithBytes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateNotificationTokenWithBytes_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateNotificationTokenWithBytes_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateProfile_args = function(args) {
  this.reqSeq = null;
  this.profile = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new ttypes.Profile(args.profile);
    }
  }
};
LineService_updateProfile_args.prototype = {};
LineService_updateProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new ttypes.Profile();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateProfile_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateProfile_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 2);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateProfile_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateProfile_result.prototype = {};
LineService_updateProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateProfile_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateProfile_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateProfileAttribute_args = function(args) {
  this.reqSeq = null;
  this.attr = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
LineService_updateProfileAttribute_args.prototype = {};
LineService_updateProfileAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateProfileAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateProfileAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.I32, 2);
    output.writeI32(this.attr);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateProfileAttribute_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateProfileAttribute_result.prototype = {};
LineService_updateProfileAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateProfileAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateProfileAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateRegion_args = function(args) {
  this.region = null;
  if (args) {
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
  }
};
LineService_updateRegion_args.prototype = {};
LineService_updateRegion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateRegion_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateRegion_args');
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateRegion_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateRegion_result.prototype = {};
LineService_updateRegion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateRegion_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateRegion_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettings_args = function(args) {
  this.reqSeq = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.Settings(args.settings);
    }
  }
};
LineService_updateSettings_args.prototype = {};
LineService_updateSettings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettings_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettings_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 2);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettings_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateSettings_result.prototype = {};
LineService_updateSettings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettings_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettings_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettings2_args = function(args) {
  this.reqSeq = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.Settings(args.settings);
    }
  }
};
LineService_updateSettings2_args.prototype = {};
LineService_updateSettings2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettings2_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettings2_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 2);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettings2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateSettings2_result.prototype = {};
LineService_updateSettings2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettings2_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettings2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettingsAttribute_args = function(args) {
  this.reqSeq = null;
  this.attr = null;
  this.value = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = args.attr;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
LineService_updateSettingsAttribute_args.prototype = {};
LineService_updateSettingsAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettingsAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettingsAttribute_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.I32, 2);
    output.writeI32(this.attr);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettingsAttribute_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateSettingsAttribute_result.prototype = {};
LineService_updateSettingsAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettingsAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettingsAttribute_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettingsAttributes_args = function(args) {
  this.reqSeq = null;
  this.attrBitset = null;
  this.settings = null;
  if (args) {
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.attrBitset !== undefined && args.attrBitset !== null) {
      this.attrBitset = args.attrBitset;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.Settings(args.settings);
    }
  }
};
LineService_updateSettingsAttributes_args.prototype = {};
LineService_updateSettingsAttributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attrBitset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.Settings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettingsAttributes_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettingsAttributes_args');
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 1);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.attrBitset !== null && this.attrBitset !== undefined) {
    output.writeFieldBegin('attrBitset', Thrift.Type.I32, 2);
    output.writeI32(this.attrBitset);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 3);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_updateSettingsAttributes_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_updateSettingsAttributes_result.prototype = {};
LineService_updateSettingsAttributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_updateSettingsAttributes_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_updateSettingsAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyIdentityCredential_args = function(args) {
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  if (args) {
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
LineService_verifyIdentityCredential_args.prototype = {};
LineService_verifyIdentityCredential_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyIdentityCredential_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyIdentityCredential_args');
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 8);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyIdentityCredential_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_verifyIdentityCredential_result.prototype = {};
LineService_verifyIdentityCredential_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyIdentityCredential_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyIdentityCredential_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyIdentityCredentialWithResult_args = function(args) {
  this.identityCredential = null;
  if (args) {
    if (args.identityCredential !== undefined && args.identityCredential !== null) {
      this.identityCredential = new ttypes.IdentityCredential(args.identityCredential);
    }
  }
};
LineService_verifyIdentityCredentialWithResult_args.prototype = {};
LineService_verifyIdentityCredentialWithResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identityCredential = new ttypes.IdentityCredential();
        this.identityCredential.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyIdentityCredentialWithResult_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyIdentityCredentialWithResult_args');
  if (this.identityCredential !== null && this.identityCredential !== undefined) {
    output.writeFieldBegin('identityCredential', Thrift.Type.STRUCT, 2);
    this.identityCredential.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyIdentityCredentialWithResult_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserAuthStatus(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_verifyIdentityCredentialWithResult_result.prototype = {};
LineService_verifyIdentityCredentialWithResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserAuthStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyIdentityCredentialWithResult_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyIdentityCredentialWithResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyPhone_args = function(args) {
  this.sessionId = null;
  this.pinCode = null;
  this.udidHash = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.udidHash !== undefined && args.udidHash !== null) {
      this.udidHash = args.udidHash;
    }
  }
};
LineService_verifyPhone_args.prototype = {};
LineService_verifyPhone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udidHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyPhone_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyPhone_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.udidHash !== null && this.udidHash !== undefined) {
    output.writeFieldBegin('udidHash', Thrift.Type.STRING, 4);
    output.writeString(this.udidHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyPhone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_verifyPhone_result.prototype = {};
LineService_verifyPhone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyPhone_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyPhone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyQrcode_args = function(args) {
  this.verifier = null;
  this.pinCode = null;
  if (args) {
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
  }
};
LineService_verifyQrcode_args.prototype = {};
LineService_verifyQrcode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyQrcode_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyQrcode_args');
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 3);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_verifyQrcode_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.TalkException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_verifyQrcode_result.prototype = {};
LineService_verifyQrcode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.TalkException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_verifyQrcode_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_verifyQrcode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notify_args = function(args) {
  this.event = null;
  if (args) {
    if (args.event !== undefined && args.event !== null) {
      this.event = new ttypes.GlobalEvent(args.event);
    }
  }
};
LineService_notify_args.prototype = {};
LineService_notify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new ttypes.GlobalEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notify_args.prototype.write = function(output) {
  output.writeStructBegin('LineService_notify_args');
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 2);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineService_notify_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.UniversalNotificationServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
LineService_notify_result.prototype = {};
LineService_notify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.UniversalNotificationServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineService_notify_result.prototype.write = function(output) {
  output.writeStructBegin('LineService_notify_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
LineServiceClient.prototype = {};
LineServiceClient.prototype.seqid = function() { return this._seqid; }
LineServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
LineServiceClient.prototype.getRSAKey = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRSAKey();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRSAKey();
  }
};

LineServiceClient.prototype.send_getRSAKey = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRSAKey', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getRSAKey_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getRSAKey = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getRSAKey_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRSAKey failed: unknown result');
};
LineServiceClient.prototype.notifyEmailConfirmationResult = function(parameterMap, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyEmailConfirmationResult(parameterMap);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyEmailConfirmationResult(parameterMap);
  }
};

LineServiceClient.prototype.send_notifyEmailConfirmationResult = function(parameterMap) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyEmailConfirmationResult', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyEmailConfirmationResult_args();
  args.parameterMap = parameterMap;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyEmailConfirmationResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyEmailConfirmationResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.registerVirtualAccount = function(locale, encryptedVirtualUserId, encryptedPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
  }
};

LineServiceClient.prototype.send_registerVirtualAccount = function(locale, encryptedVirtualUserId, encryptedPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerVirtualAccount', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerVirtualAccount_args();
  args.locale = locale;
  args.encryptedVirtualUserId = encryptedVirtualUserId;
  args.encryptedPassword = encryptedPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerVirtualAccount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerVirtualAccount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerVirtualAccount failed: unknown result');
};
LineServiceClient.prototype.requestVirtualAccountPasswordChange = function(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
  }
};

LineServiceClient.prototype.send_requestVirtualAccountPasswordChange = function(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestVirtualAccountPasswordChange', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_requestVirtualAccountPasswordChange_args();
  args.virtualMid = virtualMid;
  args.encryptedVirtualUserId = encryptedVirtualUserId;
  args.encryptedOldPassword = encryptedOldPassword;
  args.encryptedNewPassword = encryptedNewPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_requestVirtualAccountPasswordChange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_requestVirtualAccountPasswordChange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.requestVirtualAccountPasswordSet = function(virtualMid, encryptedVirtualUserId, encryptedNewPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
  }
};

LineServiceClient.prototype.send_requestVirtualAccountPasswordSet = function(virtualMid, encryptedVirtualUserId, encryptedNewPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestVirtualAccountPasswordSet', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_requestVirtualAccountPasswordSet_args();
  args.virtualMid = virtualMid;
  args.encryptedVirtualUserId = encryptedVirtualUserId;
  args.encryptedNewPassword = encryptedNewPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_requestVirtualAccountPasswordSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_requestVirtualAccountPasswordSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.unregisterVirtualAccount = function(virtualMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterVirtualAccount(virtualMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterVirtualAccount(virtualMid);
  }
};

LineServiceClient.prototype.send_unregisterVirtualAccount = function(virtualMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterVirtualAccount', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unregisterVirtualAccount_args();
  args.virtualMid = virtualMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unregisterVirtualAccount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unregisterVirtualAccount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.checkUserAge = function(carrier, sessionId, verifier, standardAge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkUserAge(carrier, sessionId, verifier, standardAge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkUserAge(carrier, sessionId, verifier, standardAge);
  }
};

LineServiceClient.prototype.send_checkUserAge = function(carrier, sessionId, verifier, standardAge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkUserAge', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_checkUserAge_args();
  args.carrier = carrier;
  args.sessionId = sessionId;
  args.verifier = verifier;
  args.standardAge = standardAge;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_checkUserAge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_checkUserAge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkUserAge failed: unknown result');
};
LineServiceClient.prototype.checkUserAgeWithDocomo = function(openIdRedirectUrl, standardAge, verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier);
  }
};

LineServiceClient.prototype.send_checkUserAgeWithDocomo = function(openIdRedirectUrl, standardAge, verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkUserAgeWithDocomo', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_checkUserAgeWithDocomo_args();
  args.openIdRedirectUrl = openIdRedirectUrl;
  args.standardAge = standardAge;
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_checkUserAgeWithDocomo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_checkUserAgeWithDocomo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkUserAgeWithDocomo failed: unknown result');
};
LineServiceClient.prototype.retrieveOpenIdAuthUrlWithDocomo = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_retrieveOpenIdAuthUrlWithDocomo();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_retrieveOpenIdAuthUrlWithDocomo();
  }
};

LineServiceClient.prototype.send_retrieveOpenIdAuthUrlWithDocomo = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('retrieveOpenIdAuthUrlWithDocomo', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_retrieveOpenIdAuthUrlWithDocomo_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_retrieveOpenIdAuthUrlWithDocomo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_retrieveOpenIdAuthUrlWithDocomo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('retrieveOpenIdAuthUrlWithDocomo failed: unknown result');
};
LineServiceClient.prototype.retrieveRequestToken = function(carrier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_retrieveRequestToken(carrier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_retrieveRequestToken(carrier);
  }
};

LineServiceClient.prototype.send_retrieveRequestToken = function(carrier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('retrieveRequestToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_retrieveRequestToken_args();
  args.carrier = carrier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_retrieveRequestToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_retrieveRequestToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('retrieveRequestToken failed: unknown result');
};
LineServiceClient.prototype.addBuddyMember = function(requestId, userMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addBuddyMember(requestId, userMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addBuddyMember(requestId, userMid);
  }
};

LineServiceClient.prototype.send_addBuddyMember = function(requestId, userMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addBuddyMember', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_addBuddyMember_args();
  args.requestId = requestId;
  args.userMid = userMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_addBuddyMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_addBuddyMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.addBuddyMembers = function(requestId, userMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addBuddyMembers(requestId, userMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addBuddyMembers(requestId, userMids);
  }
};

LineServiceClient.prototype.send_addBuddyMembers = function(requestId, userMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addBuddyMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_addBuddyMembers_args();
  args.requestId = requestId;
  args.userMids = userMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_addBuddyMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_addBuddyMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.blockBuddyMember = function(requestId, mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_blockBuddyMember(requestId, mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_blockBuddyMember(requestId, mid);
  }
};

LineServiceClient.prototype.send_blockBuddyMember = function(requestId, mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('blockBuddyMember', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_blockBuddyMember_args();
  args.requestId = requestId;
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_blockBuddyMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_blockBuddyMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.commitSendMessagesToAll = function(requestIdList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_commitSendMessagesToAll(requestIdList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_commitSendMessagesToAll(requestIdList);
  }
};

LineServiceClient.prototype.send_commitSendMessagesToAll = function(requestIdList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('commitSendMessagesToAll', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_commitSendMessagesToAll_args();
  args.requestIdList = requestIdList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_commitSendMessagesToAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_commitSendMessagesToAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('commitSendMessagesToAll failed: unknown result');
};
LineServiceClient.prototype.commitSendMessagesToMids = function(requestIdList, mids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_commitSendMessagesToMids(requestIdList, mids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_commitSendMessagesToMids(requestIdList, mids);
  }
};

LineServiceClient.prototype.send_commitSendMessagesToMids = function(requestIdList, mids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('commitSendMessagesToMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_commitSendMessagesToMids_args();
  args.requestIdList = requestIdList;
  args.mids = mids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_commitSendMessagesToMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_commitSendMessagesToMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('commitSendMessagesToMids failed: unknown result');
};
LineServiceClient.prototype.containsBuddyMember = function(requestId, userMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_containsBuddyMember(requestId, userMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_containsBuddyMember(requestId, userMid);
  }
};

LineServiceClient.prototype.send_containsBuddyMember = function(requestId, userMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('containsBuddyMember', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_containsBuddyMember_args();
  args.requestId = requestId;
  args.userMid = userMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_containsBuddyMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_containsBuddyMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('containsBuddyMember failed: unknown result');
};
LineServiceClient.prototype.downloadMessageContent = function(requestId, messageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_downloadMessageContent(requestId, messageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_downloadMessageContent(requestId, messageId);
  }
};

LineServiceClient.prototype.send_downloadMessageContent = function(requestId, messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('downloadMessageContent', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_downloadMessageContent_args();
  args.requestId = requestId;
  args.messageId = messageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_downloadMessageContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_downloadMessageContent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('downloadMessageContent failed: unknown result');
};
LineServiceClient.prototype.downloadMessageContentPreview = function(requestId, messageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_downloadMessageContentPreview(requestId, messageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_downloadMessageContentPreview(requestId, messageId);
  }
};

LineServiceClient.prototype.send_downloadMessageContentPreview = function(requestId, messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('downloadMessageContentPreview', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_downloadMessageContentPreview_args();
  args.requestId = requestId;
  args.messageId = messageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_downloadMessageContentPreview = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_downloadMessageContentPreview_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('downloadMessageContentPreview failed: unknown result');
};
LineServiceClient.prototype.downloadProfileImage = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_downloadProfileImage(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_downloadProfileImage(requestId);
  }
};

LineServiceClient.prototype.send_downloadProfileImage = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('downloadProfileImage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_downloadProfileImage_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_downloadProfileImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_downloadProfileImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('downloadProfileImage failed: unknown result');
};
LineServiceClient.prototype.downloadProfileImagePreview = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_downloadProfileImagePreview(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_downloadProfileImagePreview(requestId);
  }
};

LineServiceClient.prototype.send_downloadProfileImagePreview = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('downloadProfileImagePreview', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_downloadProfileImagePreview_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_downloadProfileImagePreview = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_downloadProfileImagePreview_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('downloadProfileImagePreview failed: unknown result');
};
LineServiceClient.prototype.getActiveMemberCountByBuddyMid = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActiveMemberCountByBuddyMid(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActiveMemberCountByBuddyMid(buddyMid);
  }
};

LineServiceClient.prototype.send_getActiveMemberCountByBuddyMid = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActiveMemberCountByBuddyMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getActiveMemberCountByBuddyMid_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getActiveMemberCountByBuddyMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getActiveMemberCountByBuddyMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActiveMemberCountByBuddyMid failed: unknown result');
};
LineServiceClient.prototype.getActiveMemberMidsByBuddyMid = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActiveMemberMidsByBuddyMid(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActiveMemberMidsByBuddyMid(buddyMid);
  }
};

LineServiceClient.prototype.send_getActiveMemberMidsByBuddyMid = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActiveMemberMidsByBuddyMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getActiveMemberMidsByBuddyMid_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getActiveMemberMidsByBuddyMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getActiveMemberMidsByBuddyMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActiveMemberMidsByBuddyMid failed: unknown result');
};
LineServiceClient.prototype.getAllBuddyMembers = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllBuddyMembers();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllBuddyMembers();
  }
};

LineServiceClient.prototype.send_getAllBuddyMembers = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllBuddyMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getAllBuddyMembers_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getAllBuddyMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getAllBuddyMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllBuddyMembers failed: unknown result');
};
LineServiceClient.prototype.getBlockedBuddyMembers = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlockedBuddyMembers();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlockedBuddyMembers();
  }
};

LineServiceClient.prototype.send_getBlockedBuddyMembers = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlockedBuddyMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBlockedBuddyMembers_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBlockedBuddyMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBlockedBuddyMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlockedBuddyMembers failed: unknown result');
};
LineServiceClient.prototype.getBlockerCountByBuddyMid = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlockerCountByBuddyMid(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlockerCountByBuddyMid(buddyMid);
  }
};

LineServiceClient.prototype.send_getBlockerCountByBuddyMid = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlockerCountByBuddyMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBlockerCountByBuddyMid_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBlockerCountByBuddyMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBlockerCountByBuddyMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlockerCountByBuddyMid failed: unknown result');
};
LineServiceClient.prototype.getBuddyDetailByMid = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyDetailByMid(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyDetailByMid(buddyMid);
  }
};

LineServiceClient.prototype.send_getBuddyDetailByMid = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyDetailByMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyDetailByMid_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyDetailByMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyDetailByMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyDetailByMid failed: unknown result');
};
LineServiceClient.prototype.getBuddyProfile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyProfile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyProfile();
  }
};

LineServiceClient.prototype.send_getBuddyProfile = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyProfile_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyProfile failed: unknown result');
};
LineServiceClient.prototype.getContactTicket = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactTicket();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactTicket();
  }
};

LineServiceClient.prototype.send_getContactTicket = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getContactTicket_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getContactTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getContactTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactTicket failed: unknown result');
};
LineServiceClient.prototype.getMemberCountByBuddyMid = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMemberCountByBuddyMid(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMemberCountByBuddyMid(buddyMid);
  }
};

LineServiceClient.prototype.send_getMemberCountByBuddyMid = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMemberCountByBuddyMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMemberCountByBuddyMid_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMemberCountByBuddyMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMemberCountByBuddyMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMemberCountByBuddyMid failed: unknown result');
};
LineServiceClient.prototype.getSendBuddyMessageResult = function(sendBuddyMessageRequestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSendBuddyMessageResult(sendBuddyMessageRequestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSendBuddyMessageResult(sendBuddyMessageRequestId);
  }
};

LineServiceClient.prototype.send_getSendBuddyMessageResult = function(sendBuddyMessageRequestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSendBuddyMessageResult', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSendBuddyMessageResult_args();
  args.sendBuddyMessageRequestId = sendBuddyMessageRequestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSendBuddyMessageResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSendBuddyMessageResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSendBuddyMessageResult failed: unknown result');
};
LineServiceClient.prototype.getSetBuddyOnAirResult = function(setBuddyOnAirRequestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSetBuddyOnAirResult(setBuddyOnAirRequestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSetBuddyOnAirResult(setBuddyOnAirRequestId);
  }
};

LineServiceClient.prototype.send_getSetBuddyOnAirResult = function(setBuddyOnAirRequestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSetBuddyOnAirResult', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSetBuddyOnAirResult_args();
  args.setBuddyOnAirRequestId = setBuddyOnAirRequestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSetBuddyOnAirResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSetBuddyOnAirResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSetBuddyOnAirResult failed: unknown result');
};
LineServiceClient.prototype.getUpdateBuddyProfileResult = function(updateBuddyProfileRequestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId);
  }
};

LineServiceClient.prototype.send_getUpdateBuddyProfileResult = function(updateBuddyProfileRequestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUpdateBuddyProfileResult', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUpdateBuddyProfileResult_args();
  args.updateBuddyProfileRequestId = updateBuddyProfileRequestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUpdateBuddyProfileResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUpdateBuddyProfileResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUpdateBuddyProfileResult failed: unknown result');
};
LineServiceClient.prototype.isBuddyOnAirByMid = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isBuddyOnAirByMid(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isBuddyOnAirByMid(buddyMid);
  }
};

LineServiceClient.prototype.send_isBuddyOnAirByMid = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isBuddyOnAirByMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_isBuddyOnAirByMid_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_isBuddyOnAirByMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_isBuddyOnAirByMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isBuddyOnAirByMid failed: unknown result');
};
LineServiceClient.prototype.linkAndSendBuddyContentMessageToAllAsync = function(requestId, msg, sourceContentId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId);
  }
};

LineServiceClient.prototype.send_linkAndSendBuddyContentMessageToAllAsync = function(requestId, msg, sourceContentId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('linkAndSendBuddyContentMessageToAllAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_linkAndSendBuddyContentMessageToAllAsync_args();
  args.requestId = requestId;
  args.msg = msg;
  args.sourceContentId = sourceContentId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_linkAndSendBuddyContentMessageToAllAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_linkAndSendBuddyContentMessageToAllAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('linkAndSendBuddyContentMessageToAllAsync failed: unknown result');
};
LineServiceClient.prototype.linkAndSendBuddyContentMessageToMids = function(requestId, msg, sourceContentId, mids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids);
  }
};

LineServiceClient.prototype.send_linkAndSendBuddyContentMessageToMids = function(requestId, msg, sourceContentId, mids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('linkAndSendBuddyContentMessageToMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_linkAndSendBuddyContentMessageToMids_args();
  args.requestId = requestId;
  args.msg = msg;
  args.sourceContentId = sourceContentId;
  args.mids = mids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_linkAndSendBuddyContentMessageToMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_linkAndSendBuddyContentMessageToMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('linkAndSendBuddyContentMessageToMids failed: unknown result');
};
LineServiceClient.prototype.notifyBuddyBlocked = function(buddyMid, blockerMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyBuddyBlocked(buddyMid, blockerMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyBuddyBlocked(buddyMid, blockerMid);
  }
};

LineServiceClient.prototype.send_notifyBuddyBlocked = function(buddyMid, blockerMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyBuddyBlocked', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyBuddyBlocked_args();
  args.buddyMid = buddyMid;
  args.blockerMid = blockerMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyBuddyBlocked = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyBuddyBlocked_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.notifyBuddyUnblocked = function(buddyMid, blockerMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyBuddyUnblocked(buddyMid, blockerMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyBuddyUnblocked(buddyMid, blockerMid);
  }
};

LineServiceClient.prototype.send_notifyBuddyUnblocked = function(buddyMid, blockerMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyBuddyUnblocked', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyBuddyUnblocked_args();
  args.buddyMid = buddyMid;
  args.blockerMid = blockerMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyBuddyUnblocked = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyBuddyUnblocked_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.registerBuddy = function(buddyId, searchId, displayName, statusMeessage, picture, settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings);
  }
};

LineServiceClient.prototype.send_registerBuddy = function(buddyId, searchId, displayName, statusMeessage, picture, settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerBuddy', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerBuddy_args();
  args.buddyId = buddyId;
  args.searchId = searchId;
  args.displayName = displayName;
  args.statusMeessage = statusMeessage;
  args.picture = picture;
  args.settings = settings;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerBuddy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerBuddy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerBuddy failed: unknown result');
};
LineServiceClient.prototype.registerBuddyAdmin = function(buddyId, searchId, displayName, statusMessage, picture, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture);
  }
};

LineServiceClient.prototype.send_registerBuddyAdmin = function(buddyId, searchId, displayName, statusMessage, picture) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerBuddyAdmin', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerBuddyAdmin_args();
  args.buddyId = buddyId;
  args.searchId = searchId;
  args.displayName = displayName;
  args.statusMessage = statusMessage;
  args.picture = picture;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerBuddyAdmin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerBuddyAdmin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerBuddyAdmin failed: unknown result');
};
LineServiceClient.prototype.reissueContactTicket = function(expirationTime, maxUseCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reissueContactTicket(expirationTime, maxUseCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reissueContactTicket(expirationTime, maxUseCount);
  }
};

LineServiceClient.prototype.send_reissueContactTicket = function(expirationTime, maxUseCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reissueContactTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reissueContactTicket_args();
  args.expirationTime = expirationTime;
  args.maxUseCount = maxUseCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reissueContactTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reissueContactTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reissueContactTicket failed: unknown result');
};
LineServiceClient.prototype.removeBuddyMember = function(requestId, userMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeBuddyMember(requestId, userMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeBuddyMember(requestId, userMid);
  }
};

LineServiceClient.prototype.send_removeBuddyMember = function(requestId, userMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeBuddyMember', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeBuddyMember_args();
  args.requestId = requestId;
  args.userMid = userMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeBuddyMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeBuddyMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.removeBuddyMembers = function(requestId, userMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeBuddyMembers(requestId, userMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeBuddyMembers(requestId, userMids);
  }
};

LineServiceClient.prototype.send_removeBuddyMembers = function(requestId, userMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeBuddyMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeBuddyMembers_args();
  args.requestId = requestId;
  args.userMids = userMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeBuddyMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeBuddyMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendBuddyContentMessageToAll = function(requestId, msg, content, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyContentMessageToAll(requestId, msg, content);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyContentMessageToAll(requestId, msg, content);
  }
};

LineServiceClient.prototype.send_sendBuddyContentMessageToAll = function(requestId, msg, content) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyContentMessageToAll', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyContentMessageToAll_args();
  args.requestId = requestId;
  args.msg = msg;
  args.content = content;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyContentMessageToAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyContentMessageToAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyContentMessageToAll failed: unknown result');
};
LineServiceClient.prototype.sendBuddyContentMessageToAllAsync = function(requestId, msg, content, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyContentMessageToAllAsync(requestId, msg, content);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyContentMessageToAllAsync(requestId, msg, content);
  }
};

LineServiceClient.prototype.send_sendBuddyContentMessageToAllAsync = function(requestId, msg, content) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyContentMessageToAllAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyContentMessageToAllAsync_args();
  args.requestId = requestId;
  args.msg = msg;
  args.content = content;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyContentMessageToAllAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyContentMessageToAllAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyContentMessageToAllAsync failed: unknown result');
};
LineServiceClient.prototype.sendBuddyContentMessageToMids = function(requestId, msg, content, mids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyContentMessageToMids(requestId, msg, content, mids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyContentMessageToMids(requestId, msg, content, mids);
  }
};

LineServiceClient.prototype.send_sendBuddyContentMessageToMids = function(requestId, msg, content, mids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyContentMessageToMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyContentMessageToMids_args();
  args.requestId = requestId;
  args.msg = msg;
  args.content = content;
  args.mids = mids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyContentMessageToMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyContentMessageToMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyContentMessageToMids failed: unknown result');
};
LineServiceClient.prototype.sendBuddyContentMessageToMidsAsync = function(requestId, msg, content, mids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids);
  }
};

LineServiceClient.prototype.send_sendBuddyContentMessageToMidsAsync = function(requestId, msg, content, mids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyContentMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyContentMessageToMidsAsync_args();
  args.requestId = requestId;
  args.msg = msg;
  args.content = content;
  args.mids = mids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyContentMessageToMidsAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyContentMessageToMidsAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyContentMessageToMidsAsync failed: unknown result');
};
LineServiceClient.prototype.sendBuddyMessageToAll = function(requestId, msg, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyMessageToAll(requestId, msg);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyMessageToAll(requestId, msg);
  }
};

LineServiceClient.prototype.send_sendBuddyMessageToAll = function(requestId, msg) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyMessageToAll', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyMessageToAll_args();
  args.requestId = requestId;
  args.msg = msg;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyMessageToAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyMessageToAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyMessageToAll failed: unknown result');
};
LineServiceClient.prototype.sendBuddyMessageToAllAsync = function(requestId, msg, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyMessageToAllAsync(requestId, msg);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyMessageToAllAsync(requestId, msg);
  }
};

LineServiceClient.prototype.send_sendBuddyMessageToAllAsync = function(requestId, msg) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyMessageToAllAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyMessageToAllAsync_args();
  args.requestId = requestId;
  args.msg = msg;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyMessageToAllAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyMessageToAllAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyMessageToAllAsync failed: unknown result');
};
LineServiceClient.prototype.sendBuddyMessageToMids = function(requestId, msg, mids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyMessageToMids(requestId, msg, mids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyMessageToMids(requestId, msg, mids);
  }
};

LineServiceClient.prototype.send_sendBuddyMessageToMids = function(requestId, msg, mids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyMessageToMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyMessageToMids_args();
  args.requestId = requestId;
  args.msg = msg;
  args.mids = mids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyMessageToMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyMessageToMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyMessageToMids failed: unknown result');
};
LineServiceClient.prototype.sendBuddyMessageToMidsAsync = function(requestId, msg, mids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendBuddyMessageToMidsAsync(requestId, msg, mids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendBuddyMessageToMidsAsync(requestId, msg, mids);
  }
};

LineServiceClient.prototype.send_sendBuddyMessageToMidsAsync = function(requestId, msg, mids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendBuddyMessageToMidsAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendBuddyMessageToMidsAsync_args();
  args.requestId = requestId;
  args.msg = msg;
  args.mids = mids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendBuddyMessageToMidsAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendBuddyMessageToMidsAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendBuddyMessageToMidsAsync failed: unknown result');
};
LineServiceClient.prototype.sendIndividualEventToAllAsync = function(requestId, buddyMid, notificationStatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus);
  }
};

LineServiceClient.prototype.send_sendIndividualEventToAllAsync = function(requestId, buddyMid, notificationStatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendIndividualEventToAllAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendIndividualEventToAllAsync_args();
  args.requestId = requestId;
  args.buddyMid = buddyMid;
  args.notificationStatus = notificationStatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendIndividualEventToAllAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendIndividualEventToAllAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.setBuddyOnAir = function(requestId, onAir, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBuddyOnAir(requestId, onAir);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBuddyOnAir(requestId, onAir);
  }
};

LineServiceClient.prototype.send_setBuddyOnAir = function(requestId, onAir) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setBuddyOnAir', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_setBuddyOnAir_args();
  args.requestId = requestId;
  args.onAir = onAir;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_setBuddyOnAir = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_setBuddyOnAir_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setBuddyOnAir failed: unknown result');
};
LineServiceClient.prototype.setBuddyOnAirAsync = function(requestId, onAir, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBuddyOnAirAsync(requestId, onAir);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBuddyOnAirAsync(requestId, onAir);
  }
};

LineServiceClient.prototype.send_setBuddyOnAirAsync = function(requestId, onAir) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setBuddyOnAirAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_setBuddyOnAirAsync_args();
  args.requestId = requestId;
  args.onAir = onAir;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_setBuddyOnAirAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_setBuddyOnAirAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setBuddyOnAirAsync failed: unknown result');
};
LineServiceClient.prototype.storeMessage = function(requestId, messageRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeMessage(requestId, messageRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeMessage(requestId, messageRequest);
  }
};

LineServiceClient.prototype.send_storeMessage = function(requestId, messageRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_storeMessage_args();
  args.requestId = requestId;
  args.messageRequest = messageRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_storeMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_storeMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeMessage failed: unknown result');
};
LineServiceClient.prototype.unblockBuddyMember = function(requestId, mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unblockBuddyMember(requestId, mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unblockBuddyMember(requestId, mid);
  }
};

LineServiceClient.prototype.send_unblockBuddyMember = function(requestId, mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unblockBuddyMember', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unblockBuddyMember_args();
  args.requestId = requestId;
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unblockBuddyMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unblockBuddyMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.unregisterBuddy = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterBuddy(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterBuddy(requestId);
  }
};

LineServiceClient.prototype.send_unregisterBuddy = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterBuddy', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unregisterBuddy_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unregisterBuddy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unregisterBuddy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.unregisterBuddyAdmin = function(requestId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterBuddyAdmin(requestId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterBuddyAdmin(requestId);
  }
};

LineServiceClient.prototype.send_unregisterBuddyAdmin = function(requestId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterBuddyAdmin', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unregisterBuddyAdmin_args();
  args.requestId = requestId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unregisterBuddyAdmin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unregisterBuddyAdmin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateBuddyAdminProfileAttribute = function(requestId, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddyAdminProfileAttribute(requestId, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddyAdminProfileAttribute(requestId, attributes);
  }
};

LineServiceClient.prototype.send_updateBuddyAdminProfileAttribute = function(requestId, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddyAdminProfileAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddyAdminProfileAttribute_args();
  args.requestId = requestId;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddyAdminProfileAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddyAdminProfileAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateBuddyAdminProfileImage = function(requestId, picture, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddyAdminProfileImage(requestId, picture);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddyAdminProfileImage(requestId, picture);
  }
};

LineServiceClient.prototype.send_updateBuddyAdminProfileImage = function(requestId, picture) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddyAdminProfileImage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddyAdminProfileImage_args();
  args.requestId = requestId;
  args.picture = picture;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddyAdminProfileImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddyAdminProfileImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateBuddyProfileAttributes = function(requestId, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddyProfileAttributes(requestId, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddyProfileAttributes(requestId, attributes);
  }
};

LineServiceClient.prototype.send_updateBuddyProfileAttributes = function(requestId, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddyProfileAttributes', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddyProfileAttributes_args();
  args.requestId = requestId;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddyProfileAttributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddyProfileAttributes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBuddyProfileAttributes failed: unknown result');
};
LineServiceClient.prototype.updateBuddyProfileAttributesAsync = function(requestId, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddyProfileAttributesAsync(requestId, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddyProfileAttributesAsync(requestId, attributes);
  }
};

LineServiceClient.prototype.send_updateBuddyProfileAttributesAsync = function(requestId, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddyProfileAttributesAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddyProfileAttributesAsync_args();
  args.requestId = requestId;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddyProfileAttributesAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddyProfileAttributesAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBuddyProfileAttributesAsync failed: unknown result');
};
LineServiceClient.prototype.updateBuddyProfileImage = function(requestId, image, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddyProfileImage(requestId, image);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddyProfileImage(requestId, image);
  }
};

LineServiceClient.prototype.send_updateBuddyProfileImage = function(requestId, image) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddyProfileImage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddyProfileImage_args();
  args.requestId = requestId;
  args.image = image;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddyProfileImage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddyProfileImage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBuddyProfileImage failed: unknown result');
};
LineServiceClient.prototype.updateBuddyProfileImageAsync = function(requestId, image, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddyProfileImageAsync(requestId, image);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddyProfileImageAsync(requestId, image);
  }
};

LineServiceClient.prototype.send_updateBuddyProfileImageAsync = function(requestId, image) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddyProfileImageAsync', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddyProfileImageAsync_args();
  args.requestId = requestId;
  args.image = image;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddyProfileImageAsync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddyProfileImageAsync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBuddyProfileImageAsync failed: unknown result');
};
LineServiceClient.prototype.updateBuddySearchId = function(requestId, searchId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddySearchId(requestId, searchId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddySearchId(requestId, searchId);
  }
};

LineServiceClient.prototype.send_updateBuddySearchId = function(requestId, searchId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddySearchId', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddySearchId_args();
  args.requestId = requestId;
  args.searchId = searchId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddySearchId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddySearchId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateBuddySettings = function(settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddySettings(settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddySettings(settings);
  }
};

LineServiceClient.prototype.send_updateBuddySettings = function(settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddySettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddySettings_args();
  args.settings = settings;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddySettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddySettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.uploadBuddyContent = function(contentType, content, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_uploadBuddyContent(contentType, content);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_uploadBuddyContent(contentType, content);
  }
};

LineServiceClient.prototype.send_uploadBuddyContent = function(contentType, content) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('uploadBuddyContent', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_uploadBuddyContent_args();
  args.contentType = contentType;
  args.content = content;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_uploadBuddyContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_uploadBuddyContent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('uploadBuddyContent failed: unknown result');
};
LineServiceClient.prototype.findBuddyContactsByQuery = function(language, country, query, fromIndex, count, requestSource, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource);
  }
};

LineServiceClient.prototype.send_findBuddyContactsByQuery = function(language, country, query, fromIndex, count, requestSource) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findBuddyContactsByQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findBuddyContactsByQuery_args();
  args.language = language;
  args.country = country;
  args.query = query;
  args.fromIndex = fromIndex;
  args.count = count;
  args.requestSource = requestSource;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findBuddyContactsByQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findBuddyContactsByQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findBuddyContactsByQuery failed: unknown result');
};
LineServiceClient.prototype.getBuddyContacts = function(language, country, classification, fromIndex, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyContacts(language, country, classification, fromIndex, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyContacts(language, country, classification, fromIndex, count);
  }
};

LineServiceClient.prototype.send_getBuddyContacts = function(language, country, classification, fromIndex, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyContacts_args();
  args.language = language;
  args.country = country;
  args.classification = classification;
  args.fromIndex = fromIndex;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyContacts failed: unknown result');
};
LineServiceClient.prototype.getBuddyDetail = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyDetail(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyDetail(buddyMid);
  }
};

LineServiceClient.prototype.send_getBuddyDetail = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyDetail', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyDetail_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyDetail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyDetail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyDetail failed: unknown result');
};
LineServiceClient.prototype.getBuddyOnAir = function(buddyMid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyOnAir(buddyMid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyOnAir(buddyMid);
  }
};

LineServiceClient.prototype.send_getBuddyOnAir = function(buddyMid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyOnAir', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyOnAir_args();
  args.buddyMid = buddyMid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyOnAir = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyOnAir_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyOnAir failed: unknown result');
};
LineServiceClient.prototype.getCountriesHavingBuddy = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCountriesHavingBuddy();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCountriesHavingBuddy();
  }
};

LineServiceClient.prototype.send_getCountriesHavingBuddy = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCountriesHavingBuddy', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCountriesHavingBuddy_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCountriesHavingBuddy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCountriesHavingBuddy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCountriesHavingBuddy failed: unknown result');
};
LineServiceClient.prototype.getNewlyReleasedBuddyIds = function(country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNewlyReleasedBuddyIds(country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNewlyReleasedBuddyIds(country);
  }
};

LineServiceClient.prototype.send_getNewlyReleasedBuddyIds = function(country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNewlyReleasedBuddyIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getNewlyReleasedBuddyIds_args();
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getNewlyReleasedBuddyIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getNewlyReleasedBuddyIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNewlyReleasedBuddyIds failed: unknown result');
};
LineServiceClient.prototype.getPopularBuddyBanner = function(language, country, applicationType, resourceSpecification, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification);
  }
};

LineServiceClient.prototype.send_getPopularBuddyBanner = function(language, country, applicationType, resourceSpecification) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPopularBuddyBanner', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPopularBuddyBanner_args();
  args.language = language;
  args.country = country;
  args.applicationType = applicationType;
  args.resourceSpecification = resourceSpecification;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPopularBuddyBanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPopularBuddyBanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPopularBuddyBanner failed: unknown result');
};
LineServiceClient.prototype.getPopularBuddyLists = function(language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPopularBuddyLists(language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPopularBuddyLists(language, country);
  }
};

LineServiceClient.prototype.send_getPopularBuddyLists = function(language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPopularBuddyLists', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPopularBuddyLists_args();
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPopularBuddyLists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPopularBuddyLists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPopularBuddyLists failed: unknown result');
};
LineServiceClient.prototype.getPromotedBuddyContacts = function(language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPromotedBuddyContacts(language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPromotedBuddyContacts(language, country);
  }
};

LineServiceClient.prototype.send_getPromotedBuddyContacts = function(language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPromotedBuddyContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPromotedBuddyContacts_args();
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPromotedBuddyContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPromotedBuddyContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPromotedBuddyContacts failed: unknown result');
};
LineServiceClient.prototype.activeBuddySubscriberCount = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_activeBuddySubscriberCount();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_activeBuddySubscriberCount();
  }
};

LineServiceClient.prototype.send_activeBuddySubscriberCount = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('activeBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_activeBuddySubscriberCount_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_activeBuddySubscriberCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_activeBuddySubscriberCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('activeBuddySubscriberCount failed: unknown result');
};
LineServiceClient.prototype.addOperationForChannel = function(opType, param1, param2, param3, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addOperationForChannel(opType, param1, param2, param3);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addOperationForChannel(opType, param1, param2, param3);
  }
};

LineServiceClient.prototype.send_addOperationForChannel = function(opType, param1, param2, param3) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addOperationForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_addOperationForChannel_args();
  args.opType = opType;
  args.param1 = param1;
  args.param2 = param2;
  args.param3 = param3;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_addOperationForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_addOperationForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.displayBuddySubscriberCount = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_displayBuddySubscriberCount();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_displayBuddySubscriberCount();
  }
};

LineServiceClient.prototype.send_displayBuddySubscriberCount = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('displayBuddySubscriberCount', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_displayBuddySubscriberCount_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_displayBuddySubscriberCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_displayBuddySubscriberCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('displayBuddySubscriberCount failed: unknown result');
};
LineServiceClient.prototype.findContactByUseridWithoutAbuseBlockForChannel = function(userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactByUseridWithoutAbuseBlockForChannel(userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactByUseridWithoutAbuseBlockForChannel(userid);
  }
};

LineServiceClient.prototype.send_findContactByUseridWithoutAbuseBlockForChannel = function(userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactByUseridWithoutAbuseBlockForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findContactByUseridWithoutAbuseBlockForChannel_args();
  args.userid = userid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findContactByUseridWithoutAbuseBlockForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findContactByUseridWithoutAbuseBlockForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactByUseridWithoutAbuseBlockForChannel failed: unknown result');
};
LineServiceClient.prototype.getAllContactIdsForChannel = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllContactIdsForChannel();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllContactIdsForChannel();
  }
};

LineServiceClient.prototype.send_getAllContactIdsForChannel = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllContactIdsForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getAllContactIdsForChannel_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getAllContactIdsForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getAllContactIdsForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllContactIdsForChannel failed: unknown result');
};
LineServiceClient.prototype.getCompactContacts = function(lastModifiedTimestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompactContacts(lastModifiedTimestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompactContacts(lastModifiedTimestamp);
  }
};

LineServiceClient.prototype.send_getCompactContacts = function(lastModifiedTimestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCompactContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCompactContacts_args();
  args.lastModifiedTimestamp = lastModifiedTimestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCompactContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCompactContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompactContacts failed: unknown result');
};
LineServiceClient.prototype.getContactsForChannel = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactsForChannel(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactsForChannel(ids);
  }
};

LineServiceClient.prototype.send_getContactsForChannel = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactsForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getContactsForChannel_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getContactsForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getContactsForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactsForChannel failed: unknown result');
};
LineServiceClient.prototype.getDisplayName = function(mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDisplayName(mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDisplayName(mid);
  }
};

LineServiceClient.prototype.send_getDisplayName = function(mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDisplayName', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getDisplayName_args();
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getDisplayName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getDisplayName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDisplayName failed: unknown result');
};
LineServiceClient.prototype.getFavoriteMidsForChannel = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFavoriteMidsForChannel();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFavoriteMidsForChannel();
  }
};

LineServiceClient.prototype.send_getFavoriteMidsForChannel = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFavoriteMidsForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getFavoriteMidsForChannel_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getFavoriteMidsForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getFavoriteMidsForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFavoriteMidsForChannel failed: unknown result');
};
LineServiceClient.prototype.getFriendMids = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFriendMids();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFriendMids();
  }
};

LineServiceClient.prototype.send_getFriendMids = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFriendMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getFriendMids_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getFriendMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getFriendMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFriendMids failed: unknown result');
};
LineServiceClient.prototype.getGroupMemberMids = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupMemberMids(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupMemberMids(groupId);
  }
};

LineServiceClient.prototype.send_getGroupMemberMids = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupMemberMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getGroupMemberMids_args();
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getGroupMemberMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getGroupMemberMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupMemberMids failed: unknown result');
};
LineServiceClient.prototype.getGroupsForChannel = function(groupIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupsForChannel(groupIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupsForChannel(groupIds);
  }
};

LineServiceClient.prototype.send_getGroupsForChannel = function(groupIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupsForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getGroupsForChannel_args();
  args.groupIds = groupIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getGroupsForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getGroupsForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupsForChannel failed: unknown result');
};
LineServiceClient.prototype.getIdentityCredential = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getIdentityCredential();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getIdentityCredential();
  }
};

LineServiceClient.prototype.send_getIdentityCredential = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getIdentityCredential_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getIdentityCredential failed: unknown result');
};
LineServiceClient.prototype.getJoinedGroupIdsForChannel = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getJoinedGroupIdsForChannel();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getJoinedGroupIdsForChannel();
  }
};

LineServiceClient.prototype.send_getJoinedGroupIdsForChannel = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getJoinedGroupIdsForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getJoinedGroupIdsForChannel_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getJoinedGroupIdsForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getJoinedGroupIdsForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getJoinedGroupIdsForChannel failed: unknown result');
};
LineServiceClient.prototype.getMetaProfile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMetaProfile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMetaProfile();
  }
};

LineServiceClient.prototype.send_getMetaProfile = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMetaProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMetaProfile_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMetaProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMetaProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMetaProfile failed: unknown result');
};
LineServiceClient.prototype.getMid = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMid();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMid();
  }
};

LineServiceClient.prototype.send_getMid = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMid_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMid failed: unknown result');
};
LineServiceClient.prototype.getPrimaryClientForChannel = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPrimaryClientForChannel();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPrimaryClientForChannel();
  }
};

LineServiceClient.prototype.send_getPrimaryClientForChannel = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPrimaryClientForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPrimaryClientForChannel_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPrimaryClientForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPrimaryClientForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPrimaryClientForChannel failed: unknown result');
};
LineServiceClient.prototype.getProfileForChannel = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfileForChannel();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfileForChannel();
  }
};

LineServiceClient.prototype.send_getProfileForChannel = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfileForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProfileForChannel_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProfileForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProfileForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfileForChannel failed: unknown result');
};
LineServiceClient.prototype.getSimpleChannelContacts = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSimpleChannelContacts(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSimpleChannelContacts(ids);
  }
};

LineServiceClient.prototype.send_getSimpleChannelContacts = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSimpleChannelContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSimpleChannelContacts_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSimpleChannelContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSimpleChannelContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSimpleChannelContacts failed: unknown result');
};
LineServiceClient.prototype.getUserCountryForBilling = function(country, remoteIp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserCountryForBilling(country, remoteIp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserCountryForBilling(country, remoteIp);
  }
};

LineServiceClient.prototype.send_getUserCountryForBilling = function(country, remoteIp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserCountryForBilling', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUserCountryForBilling_args();
  args.country = country;
  args.remoteIp = remoteIp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUserCountryForBilling = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUserCountryForBilling_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserCountryForBilling failed: unknown result');
};
LineServiceClient.prototype.getUserCreateTime = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserCreateTime();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserCreateTime();
  }
};

LineServiceClient.prototype.send_getUserCreateTime = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserCreateTime', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUserCreateTime_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUserCreateTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUserCreateTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserCreateTime failed: unknown result');
};
LineServiceClient.prototype.getUserIdentities = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserIdentities();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserIdentities();
  }
};

LineServiceClient.prototype.send_getUserIdentities = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserIdentities', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUserIdentities_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUserIdentities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUserIdentities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserIdentities failed: unknown result');
};
LineServiceClient.prototype.getUserLanguage = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserLanguage();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserLanguage();
  }
};

LineServiceClient.prototype.send_getUserLanguage = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserLanguage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUserLanguage_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUserLanguage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUserLanguage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserLanguage failed: unknown result');
};
LineServiceClient.prototype.getUserMidsWhoAddedMe = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserMidsWhoAddedMe();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserMidsWhoAddedMe();
  }
};

LineServiceClient.prototype.send_getUserMidsWhoAddedMe = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserMidsWhoAddedMe', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUserMidsWhoAddedMe_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUserMidsWhoAddedMe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUserMidsWhoAddedMe_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserMidsWhoAddedMe failed: unknown result');
};
LineServiceClient.prototype.isGroupMember = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isGroupMember(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isGroupMember(groupId);
  }
};

LineServiceClient.prototype.send_isGroupMember = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isGroupMember', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_isGroupMember_args();
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_isGroupMember = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_isGroupMember_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isGroupMember failed: unknown result');
};
LineServiceClient.prototype.isInContact = function(mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isInContact(mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isInContact(mid);
  }
};

LineServiceClient.prototype.send_isInContact = function(mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isInContact', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_isInContact_args();
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_isInContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_isInContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isInContact failed: unknown result');
};
LineServiceClient.prototype.registerChannelCP = function(cpId, registerPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerChannelCP(cpId, registerPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerChannelCP(cpId, registerPassword);
  }
};

LineServiceClient.prototype.send_registerChannelCP = function(cpId, registerPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerChannelCP', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerChannelCP_args();
  args.cpId = cpId;
  args.registerPassword = registerPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerChannelCP = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerChannelCP_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerChannelCP failed: unknown result');
};
LineServiceClient.prototype.removeNotificationStatus = function(notificationStatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeNotificationStatus(notificationStatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeNotificationStatus(notificationStatus);
  }
};

LineServiceClient.prototype.send_removeNotificationStatus = function(notificationStatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeNotificationStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeNotificationStatus_args();
  args.notificationStatus = notificationStatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeNotificationStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeNotificationStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendMessageForChannel = function(message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessageForChannel(message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessageForChannel(message);
  }
};

LineServiceClient.prototype.send_sendMessageForChannel = function(message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessageForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendMessageForChannel_args();
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendMessageForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendMessageForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMessageForChannel failed: unknown result');
};
LineServiceClient.prototype.sendPinCodeOperation = function(verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendPinCodeOperation(verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendPinCodeOperation(verifier);
  }
};

LineServiceClient.prototype.send_sendPinCodeOperation = function(verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendPinCodeOperation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendPinCodeOperation_args();
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendPinCodeOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendPinCodeOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateProfileAttributeForChannel = function(profileAttribute, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateProfileAttributeForChannel(profileAttribute, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateProfileAttributeForChannel(profileAttribute, value);
  }
};

LineServiceClient.prototype.send_updateProfileAttributeForChannel = function(profileAttribute, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateProfileAttributeForChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateProfileAttributeForChannel_args();
  args.profileAttribute = profileAttribute;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateProfileAttributeForChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateProfileAttributeForChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.approveChannelAndIssueChannelToken = function(channelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_approveChannelAndIssueChannelToken(channelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_approveChannelAndIssueChannelToken(channelId);
  }
};

LineServiceClient.prototype.send_approveChannelAndIssueChannelToken = function(channelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('approveChannelAndIssueChannelToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_approveChannelAndIssueChannelToken_args();
  args.channelId = channelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_approveChannelAndIssueChannelToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_approveChannelAndIssueChannelToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('approveChannelAndIssueChannelToken failed: unknown result');
};
LineServiceClient.prototype.approveChannelAndIssueRequestToken = function(channelId, otpId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_approveChannelAndIssueRequestToken(channelId, otpId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_approveChannelAndIssueRequestToken(channelId, otpId);
  }
};

LineServiceClient.prototype.send_approveChannelAndIssueRequestToken = function(channelId, otpId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('approveChannelAndIssueRequestToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_approveChannelAndIssueRequestToken_args();
  args.channelId = channelId;
  args.otpId = otpId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_approveChannelAndIssueRequestToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_approveChannelAndIssueRequestToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('approveChannelAndIssueRequestToken failed: unknown result');
};
LineServiceClient.prototype.fetchNotificationItems = function(localRev, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchNotificationItems(localRev);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchNotificationItems(localRev);
  }
};

LineServiceClient.prototype.send_fetchNotificationItems = function(localRev) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchNotificationItems', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_fetchNotificationItems_args();
  args.localRev = localRev;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_fetchNotificationItems = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_fetchNotificationItems_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchNotificationItems failed: unknown result');
};
LineServiceClient.prototype.getApprovedChannels = function(lastSynced, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getApprovedChannels(lastSynced, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getApprovedChannels(lastSynced, locale);
  }
};

LineServiceClient.prototype.send_getApprovedChannels = function(lastSynced, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getApprovedChannels', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getApprovedChannels_args();
  args.lastSynced = lastSynced;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getApprovedChannels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getApprovedChannels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getApprovedChannels failed: unknown result');
};
LineServiceClient.prototype.getChannelInfo = function(channelId, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChannelInfo(channelId, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChannelInfo(channelId, locale);
  }
};

LineServiceClient.prototype.send_getChannelInfo = function(channelId, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChannelInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getChannelInfo_args();
  args.channelId = channelId;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getChannelInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getChannelInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChannelInfo failed: unknown result');
};
LineServiceClient.prototype.getChannelNotificationSetting = function(channelId, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChannelNotificationSetting(channelId, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChannelNotificationSetting(channelId, locale);
  }
};

LineServiceClient.prototype.send_getChannelNotificationSetting = function(channelId, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChannelNotificationSetting', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getChannelNotificationSetting_args();
  args.channelId = channelId;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getChannelNotificationSetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getChannelNotificationSetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChannelNotificationSetting failed: unknown result');
};
LineServiceClient.prototype.getChannelNotificationSettings = function(locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChannelNotificationSettings(locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChannelNotificationSettings(locale);
  }
};

LineServiceClient.prototype.send_getChannelNotificationSettings = function(locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChannelNotificationSettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getChannelNotificationSettings_args();
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getChannelNotificationSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getChannelNotificationSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChannelNotificationSettings failed: unknown result');
};
LineServiceClient.prototype.getChannels = function(lastSynced, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChannels(lastSynced, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChannels(lastSynced, locale);
  }
};

LineServiceClient.prototype.send_getChannels = function(lastSynced, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChannels', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getChannels_args();
  args.lastSynced = lastSynced;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getChannels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getChannels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChannels failed: unknown result');
};
LineServiceClient.prototype.getDomains = function(lastSynced, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDomains(lastSynced);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDomains(lastSynced);
  }
};

LineServiceClient.prototype.send_getDomains = function(lastSynced) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDomains', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getDomains_args();
  args.lastSynced = lastSynced;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getDomains = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getDomains_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDomains failed: unknown result');
};
LineServiceClient.prototype.getFriendChannelMatrices = function(channelIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFriendChannelMatrices(channelIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFriendChannelMatrices(channelIds);
  }
};

LineServiceClient.prototype.send_getFriendChannelMatrices = function(channelIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFriendChannelMatrices', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getFriendChannelMatrices_args();
  args.channelIds = channelIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getFriendChannelMatrices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getFriendChannelMatrices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFriendChannelMatrices failed: unknown result');
};
LineServiceClient.prototype.getNotificationBadgeCount = function(localRev, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNotificationBadgeCount(localRev);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNotificationBadgeCount(localRev);
  }
};

LineServiceClient.prototype.send_getNotificationBadgeCount = function(localRev) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNotificationBadgeCount', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getNotificationBadgeCount_args();
  args.localRev = localRev;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getNotificationBadgeCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getNotificationBadgeCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNotificationBadgeCount failed: unknown result');
};
LineServiceClient.prototype.issueChannelToken = function(channelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueChannelToken(channelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueChannelToken(channelId);
  }
};

LineServiceClient.prototype.send_issueChannelToken = function(channelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('issueChannelToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_issueChannelToken_args();
  args.channelId = channelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_issueChannelToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_issueChannelToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueChannelToken failed: unknown result');
};
LineServiceClient.prototype.issueRequestToken = function(channelId, otpId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueRequestToken(channelId, otpId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueRequestToken(channelId, otpId);
  }
};

LineServiceClient.prototype.send_issueRequestToken = function(channelId, otpId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('issueRequestToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_issueRequestToken_args();
  args.channelId = channelId;
  args.otpId = otpId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_issueRequestToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_issueRequestToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueRequestToken failed: unknown result');
};
LineServiceClient.prototype.issueRequestTokenWithAuthScheme = function(channelId, otpId, authScheme, returnUrl, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl);
  }
};

LineServiceClient.prototype.send_issueRequestTokenWithAuthScheme = function(channelId, otpId, authScheme, returnUrl) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('issueRequestTokenWithAuthScheme', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_issueRequestTokenWithAuthScheme_args();
  args.channelId = channelId;
  args.otpId = otpId;
  args.authScheme = authScheme;
  args.returnUrl = returnUrl;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_issueRequestTokenWithAuthScheme = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_issueRequestTokenWithAuthScheme_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('issueRequestTokenWithAuthScheme failed: unknown result');
};
LineServiceClient.prototype.reserveCoinUse = function(request, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reserveCoinUse(request, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reserveCoinUse(request, locale);
  }
};

LineServiceClient.prototype.send_reserveCoinUse = function(request, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reserveCoinUse', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reserveCoinUse_args();
  args.request = request;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reserveCoinUse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reserveCoinUse_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reserveCoinUse failed: unknown result');
};
LineServiceClient.prototype.revokeChannel = function(channelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_revokeChannel(channelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_revokeChannel(channelId);
  }
};

LineServiceClient.prototype.send_revokeChannel = function(channelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('revokeChannel', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_revokeChannel_args();
  args.channelId = channelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_revokeChannel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_revokeChannel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.syncChannelData = function(lastSynced, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_syncChannelData(lastSynced, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_syncChannelData(lastSynced, locale);
  }
};

LineServiceClient.prototype.send_syncChannelData = function(lastSynced, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('syncChannelData', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_syncChannelData_args();
  args.lastSynced = lastSynced;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_syncChannelData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_syncChannelData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('syncChannelData failed: unknown result');
};
LineServiceClient.prototype.updateChannelNotificationSetting = function(setting, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChannelNotificationSetting(setting);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChannelNotificationSetting(setting);
  }
};

LineServiceClient.prototype.send_updateChannelNotificationSetting = function(setting) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChannelNotificationSetting', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateChannelNotificationSetting_args();
  args.setting = setting;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateChannelNotificationSetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateChannelNotificationSetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.fetchMessageOperations = function(localRevision, lastOpTimestamp, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchMessageOperations(localRevision, lastOpTimestamp, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchMessageOperations(localRevision, lastOpTimestamp, count);
  }
};

LineServiceClient.prototype.send_fetchMessageOperations = function(localRevision, lastOpTimestamp, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchMessageOperations', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_fetchMessageOperations_args();
  args.localRevision = localRevision;
  args.lastOpTimestamp = lastOpTimestamp;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_fetchMessageOperations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_fetchMessageOperations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchMessageOperations failed: unknown result');
};
LineServiceClient.prototype.getLastReadMessageIds = function(chatId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLastReadMessageIds(chatId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLastReadMessageIds(chatId);
  }
};

LineServiceClient.prototype.send_getLastReadMessageIds = function(chatId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLastReadMessageIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getLastReadMessageIds_args();
  args.chatId = chatId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getLastReadMessageIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getLastReadMessageIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLastReadMessageIds failed: unknown result');
};
LineServiceClient.prototype.multiGetLastReadMessageIds = function(chatIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multiGetLastReadMessageIds(chatIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multiGetLastReadMessageIds(chatIds);
  }
};

LineServiceClient.prototype.send_multiGetLastReadMessageIds = function(chatIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multiGetLastReadMessageIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_multiGetLastReadMessageIds_args();
  args.chatIds = chatIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_multiGetLastReadMessageIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_multiGetLastReadMessageIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiGetLastReadMessageIds failed: unknown result');
};
LineServiceClient.prototype.buyCoinProduct = function(paymentReservation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_buyCoinProduct(paymentReservation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_buyCoinProduct(paymentReservation);
  }
};

LineServiceClient.prototype.send_buyCoinProduct = function(paymentReservation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('buyCoinProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_buyCoinProduct_args();
  args.paymentReservation = paymentReservation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_buyCoinProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_buyCoinProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.buyFreeProduct = function(receiverMid, productId, messageTemplate, language, country, packageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
  }
};

LineServiceClient.prototype.send_buyFreeProduct = function(receiverMid, productId, messageTemplate, language, country, packageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('buyFreeProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_buyFreeProduct_args();
  args.receiverMid = receiverMid;
  args.productId = productId;
  args.messageTemplate = messageTemplate;
  args.language = language;
  args.country = country;
  args.packageId = packageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_buyFreeProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_buyFreeProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.buyMustbuyProduct = function(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
  }
};

LineServiceClient.prototype.send_buyMustbuyProduct = function(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('buyMustbuyProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_buyMustbuyProduct_args();
  args.receiverMid = receiverMid;
  args.productId = productId;
  args.messageTemplate = messageTemplate;
  args.language = language;
  args.country = country;
  args.packageId = packageId;
  args.serialNumber = serialNumber;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_buyMustbuyProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_buyMustbuyProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.checkCanReceivePresent = function(recipientMid, packageId, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkCanReceivePresent(recipientMid, packageId, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkCanReceivePresent(recipientMid, packageId, language, country);
  }
};

LineServiceClient.prototype.send_checkCanReceivePresent = function(recipientMid, packageId, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkCanReceivePresent', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_checkCanReceivePresent_args();
  args.recipientMid = recipientMid;
  args.packageId = packageId;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_checkCanReceivePresent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_checkCanReceivePresent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.getActivePurchases = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActivePurchases(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActivePurchases(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getActivePurchases = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActivePurchases', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getActivePurchases_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getActivePurchases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getActivePurchases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActivePurchases failed: unknown result');
};
LineServiceClient.prototype.getActivePurchaseVersions = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActivePurchaseVersions(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActivePurchaseVersions(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getActivePurchaseVersions = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActivePurchaseVersions', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getActivePurchaseVersions_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getActivePurchaseVersions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getActivePurchaseVersions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActivePurchaseVersions failed: unknown result');
};
LineServiceClient.prototype.getCoinProducts = function(appStoreCode, country, language, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoinProducts(appStoreCode, country, language);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoinProducts(appStoreCode, country, language);
  }
};

LineServiceClient.prototype.send_getCoinProducts = function(appStoreCode, country, language) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCoinProducts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCoinProducts_args();
  args.appStoreCode = appStoreCode;
  args.country = country;
  args.language = language;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCoinProducts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCoinProducts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoinProducts failed: unknown result');
};
LineServiceClient.prototype.getCoinProductsByPgCode = function(appStoreCode, pgCode, country, language, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language);
  }
};

LineServiceClient.prototype.send_getCoinProductsByPgCode = function(appStoreCode, pgCode, country, language) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCoinProductsByPgCode', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCoinProductsByPgCode_args();
  args.appStoreCode = appStoreCode;
  args.pgCode = pgCode;
  args.country = country;
  args.language = language;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCoinProductsByPgCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCoinProductsByPgCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoinProductsByPgCode failed: unknown result');
};
LineServiceClient.prototype.getCoinPurchaseHistory = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoinPurchaseHistory(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoinPurchaseHistory(request);
  }
};

LineServiceClient.prototype.send_getCoinPurchaseHistory = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCoinPurchaseHistory', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCoinPurchaseHistory_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCoinPurchaseHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCoinPurchaseHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoinPurchaseHistory failed: unknown result');
};
LineServiceClient.prototype.getCoinUseAndRefundHistory = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCoinUseAndRefundHistory(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCoinUseAndRefundHistory(request);
  }
};

LineServiceClient.prototype.send_getCoinUseAndRefundHistory = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCoinUseAndRefundHistory', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCoinUseAndRefundHistory_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCoinUseAndRefundHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCoinUseAndRefundHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCoinUseAndRefundHistory failed: unknown result');
};
LineServiceClient.prototype.getDownloads = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDownloads(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDownloads(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getDownloads = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDownloads', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getDownloads_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getDownloads = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getDownloads_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDownloads failed: unknown result');
};
LineServiceClient.prototype.getEventPackages = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEventPackages(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEventPackages(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getEventPackages = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getEventPackages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getEventPackages_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getEventPackages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getEventPackages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEventPackages failed: unknown result');
};
LineServiceClient.prototype.getNewlyReleasedPackages = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNewlyReleasedPackages(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNewlyReleasedPackages(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getNewlyReleasedPackages = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNewlyReleasedPackages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getNewlyReleasedPackages_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getNewlyReleasedPackages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getNewlyReleasedPackages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNewlyReleasedPackages failed: unknown result');
};
LineServiceClient.prototype.getPopularPackages = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPopularPackages(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPopularPackages(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getPopularPackages = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPopularPackages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPopularPackages_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPopularPackages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPopularPackages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPopularPackages failed: unknown result');
};
LineServiceClient.prototype.getPresentsReceived = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPresentsReceived(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPresentsReceived(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getPresentsReceived = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPresentsReceived', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPresentsReceived_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPresentsReceived = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPresentsReceived_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPresentsReceived failed: unknown result');
};
LineServiceClient.prototype.getPresentsSent = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPresentsSent(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPresentsSent(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getPresentsSent = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPresentsSent', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPresentsSent_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPresentsSent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPresentsSent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPresentsSent failed: unknown result');
};
LineServiceClient.prototype.getProduct = function(packageID, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProduct(packageID, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProduct(packageID, language, country);
  }
};

LineServiceClient.prototype.send_getProduct = function(packageID, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProduct', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProduct_args();
  args.packageID = packageID;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProduct = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProduct_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProduct failed: unknown result');
};
LineServiceClient.prototype.getProductList = function(productIdList, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProductList(productIdList, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProductList(productIdList, language, country);
  }
};

LineServiceClient.prototype.send_getProductList = function(productIdList, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProductList', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProductList_args();
  args.productIdList = productIdList;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProductList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProductList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProductList failed: unknown result');
};
LineServiceClient.prototype.getProductListWithCarrier = function(productIdList, language, country, carrierCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProductListWithCarrier(productIdList, language, country, carrierCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProductListWithCarrier(productIdList, language, country, carrierCode);
  }
};

LineServiceClient.prototype.send_getProductListWithCarrier = function(productIdList, language, country, carrierCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProductListWithCarrier', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProductListWithCarrier_args();
  args.productIdList = productIdList;
  args.language = language;
  args.country = country;
  args.carrierCode = carrierCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProductListWithCarrier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProductListWithCarrier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProductListWithCarrier failed: unknown result');
};
LineServiceClient.prototype.getProductWithCarrier = function(packageID, language, country, carrierCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProductWithCarrier(packageID, language, country, carrierCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProductWithCarrier(packageID, language, country, carrierCode);
  }
};

LineServiceClient.prototype.send_getProductWithCarrier = function(packageID, language, country, carrierCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProductWithCarrier', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProductWithCarrier_args();
  args.packageID = packageID;
  args.language = language;
  args.country = country;
  args.carrierCode = carrierCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProductWithCarrier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProductWithCarrier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProductWithCarrier failed: unknown result');
};
LineServiceClient.prototype.getPurchaseHistory = function(start, size, language, country, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPurchaseHistory(start, size, language, country);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPurchaseHistory(start, size, language, country);
  }
};

LineServiceClient.prototype.send_getPurchaseHistory = function(start, size, language, country) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPurchaseHistory', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPurchaseHistory_args();
  args.start = start;
  args.size = size;
  args.language = language;
  args.country = country;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPurchaseHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPurchaseHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPurchaseHistory failed: unknown result');
};
LineServiceClient.prototype.getTotalBalance = function(appStoreCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTotalBalance(appStoreCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTotalBalance(appStoreCode);
  }
};

LineServiceClient.prototype.send_getTotalBalance = function(appStoreCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTotalBalance', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getTotalBalance_args();
  args.appStoreCode = appStoreCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getTotalBalance = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getTotalBalance_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTotalBalance failed: unknown result');
};
LineServiceClient.prototype.notifyDownloaded = function(packageId, language, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyDownloaded(packageId, language);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyDownloaded(packageId, language);
  }
};

LineServiceClient.prototype.send_notifyDownloaded = function(packageId, language) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyDownloaded', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyDownloaded_args();
  args.packageId = packageId;
  args.language = language;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyDownloaded = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyDownloaded_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('notifyDownloaded failed: unknown result');
};
LineServiceClient.prototype.reserveCoinPurchase = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reserveCoinPurchase(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reserveCoinPurchase(request);
  }
};

LineServiceClient.prototype.send_reserveCoinPurchase = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reserveCoinPurchase', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reserveCoinPurchase_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reserveCoinPurchase = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reserveCoinPurchase_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reserveCoinPurchase failed: unknown result');
};
LineServiceClient.prototype.reservePayment = function(paymentReservation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reservePayment(paymentReservation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reservePayment(paymentReservation);
  }
};

LineServiceClient.prototype.send_reservePayment = function(paymentReservation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reservePayment', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reservePayment_args();
  args.paymentReservation = paymentReservation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reservePayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reservePayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reservePayment failed: unknown result');
};
LineServiceClient.prototype.getSnsFriends = function(snsIdType, snsAccessToken, startIdx, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit);
  }
};

LineServiceClient.prototype.send_getSnsFriends = function(snsIdType, snsAccessToken, startIdx, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSnsFriends', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSnsFriends_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.startIdx = startIdx;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSnsFriends = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSnsFriends_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSnsFriends failed: unknown result');
};
LineServiceClient.prototype.getSnsMyProfile = function(snsIdType, snsAccessToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSnsMyProfile(snsIdType, snsAccessToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSnsMyProfile(snsIdType, snsAccessToken);
  }
};

LineServiceClient.prototype.send_getSnsMyProfile = function(snsIdType, snsAccessToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSnsMyProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSnsMyProfile_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSnsMyProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSnsMyProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSnsMyProfile failed: unknown result');
};
LineServiceClient.prototype.postSnsInvitationMessage = function(snsIdType, snsAccessToken, toSnsUserId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
  }
};

LineServiceClient.prototype.send_postSnsInvitationMessage = function(snsIdType, snsAccessToken, toSnsUserId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('postSnsInvitationMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_postSnsInvitationMessage_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.toSnsUserId = toSnsUserId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_postSnsInvitationMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_postSnsInvitationMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.acceptGroupInvitation = function(reqSeq, groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptGroupInvitation(reqSeq, groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptGroupInvitation(reqSeq, groupId);
  }
};

LineServiceClient.prototype.send_acceptGroupInvitation = function(reqSeq, groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_acceptGroupInvitation_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_acceptGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_acceptGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.acceptGroupInvitationByTicket = function(reqSeq, groupId, ticketId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptGroupInvitationByTicket(reqSeq, groupId, ticketId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptGroupInvitationByTicket(reqSeq, groupId, ticketId);
  }
};

LineServiceClient.prototype.send_acceptGroupInvitationByTicket = function(reqSeq, groupId, ticketId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptGroupInvitationByTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_acceptGroupInvitationByTicket_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.ticketId = ticketId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_acceptGroupInvitationByTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_acceptGroupInvitationByTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.findGroupByTicket = function(ticketId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findGroupByTicket(ticketId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findGroupByTicket(ticketId);
  }
};

LineServiceClient.prototype.send_findGroupByTicket = function(ticketId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findGroupByTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findGroupByTicket_args();
  args.ticketId = ticketId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findGroupByTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findGroupByTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findGroupByTicket failed: unknown result');
};
LineServiceClient.prototype.acceptProximityMatches = function(sessionId, ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acceptProximityMatches(sessionId, ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acceptProximityMatches(sessionId, ids);
  }
};

LineServiceClient.prototype.send_acceptProximityMatches = function(sessionId, ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acceptProximityMatches', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_acceptProximityMatches_args();
  args.sessionId = sessionId;
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_acceptProximityMatches = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_acceptProximityMatches_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.acquireCallRoute = function(to, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acquireCallRoute(to);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acquireCallRoute(to);
  }
};

LineServiceClient.prototype.send_acquireCallRoute = function(to) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acquireCallRoute', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_acquireCallRoute_args();
  args.to = to;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_acquireCallRoute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_acquireCallRoute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acquireCallRoute failed: unknown result');
};
LineServiceClient.prototype.acquireCallTicket = function(to, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acquireCallTicket(to);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acquireCallTicket(to);
  }
};

LineServiceClient.prototype.send_acquireCallTicket = function(to) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acquireCallTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_acquireCallTicket_args();
  args.to = to;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_acquireCallTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_acquireCallTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acquireCallTicket failed: unknown result');
};
LineServiceClient.prototype.acquireEncryptedAccessToken = function(featureType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_acquireEncryptedAccessToken(featureType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_acquireEncryptedAccessToken(featureType);
  }
};

LineServiceClient.prototype.send_acquireEncryptedAccessToken = function(featureType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('acquireEncryptedAccessToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_acquireEncryptedAccessToken_args();
  args.featureType = featureType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_acquireEncryptedAccessToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_acquireEncryptedAccessToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('acquireEncryptedAccessToken failed: unknown result');
};
LineServiceClient.prototype.addSnsId = function(snsIdType, snsAccessToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addSnsId(snsIdType, snsAccessToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addSnsId(snsIdType, snsAccessToken);
  }
};

LineServiceClient.prototype.send_addSnsId = function(snsIdType, snsAccessToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addSnsId', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_addSnsId_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_addSnsId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_addSnsId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addSnsId failed: unknown result');
};
LineServiceClient.prototype.blockContact = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_blockContact(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_blockContact(reqSeq, id);
  }
};

LineServiceClient.prototype.send_blockContact = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('blockContact', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_blockContact_args();
  args.reqSeq = reqSeq;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_blockContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_blockContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.blockRecommendation = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_blockRecommendation(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_blockRecommendation(reqSeq, id);
  }
};

LineServiceClient.prototype.send_blockRecommendation = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('blockRecommendation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_blockRecommendation_args();
  args.reqSeq = reqSeq;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_blockRecommendation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_blockRecommendation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.cancelGroupInvitation = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelGroupInvitation(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelGroupInvitation(reqSeq, groupId, contactIds);
  }
};

LineServiceClient.prototype.send_cancelGroupInvitation = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_cancelGroupInvitation_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_cancelGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_cancelGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.changeVerificationMethod = function(sessionId, method, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeVerificationMethod(sessionId, method);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeVerificationMethod(sessionId, method);
  }
};

LineServiceClient.prototype.send_changeVerificationMethod = function(sessionId, method) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeVerificationMethod', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_changeVerificationMethod_args();
  args.sessionId = sessionId;
  args.method = method;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_changeVerificationMethod = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_changeVerificationMethod_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('changeVerificationMethod failed: unknown result');
};
LineServiceClient.prototype.clearIdentityCredential = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clearIdentityCredential();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clearIdentityCredential();
  }
};

LineServiceClient.prototype.send_clearIdentityCredential = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clearIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_clearIdentityCredential_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_clearIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_clearIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.clearMessageBox = function(channelId, messageBoxId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clearMessageBox(channelId, messageBoxId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clearMessageBox(channelId, messageBoxId);
  }
};

LineServiceClient.prototype.send_clearMessageBox = function(channelId, messageBoxId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clearMessageBox', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_clearMessageBox_args();
  args.channelId = channelId;
  args.messageBoxId = messageBoxId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_clearMessageBox = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_clearMessageBox_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.closeProximityMatch = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_closeProximityMatch(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_closeProximityMatch(sessionId);
  }
};

LineServiceClient.prototype.send_closeProximityMatch = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('closeProximityMatch', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_closeProximityMatch_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_closeProximityMatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_closeProximityMatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.commitSendMessage = function(seq, messageId, receiverMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_commitSendMessage(seq, messageId, receiverMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_commitSendMessage(seq, messageId, receiverMids);
  }
};

LineServiceClient.prototype.send_commitSendMessage = function(seq, messageId, receiverMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('commitSendMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_commitSendMessage_args();
  args.seq = seq;
  args.messageId = messageId;
  args.receiverMids = receiverMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_commitSendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_commitSendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('commitSendMessage failed: unknown result');
};
LineServiceClient.prototype.commitSendMessages = function(seq, messageIds, receiverMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_commitSendMessages(seq, messageIds, receiverMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_commitSendMessages(seq, messageIds, receiverMids);
  }
};

LineServiceClient.prototype.send_commitSendMessages = function(seq, messageIds, receiverMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('commitSendMessages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_commitSendMessages_args();
  args.seq = seq;
  args.messageIds = messageIds;
  args.receiverMids = receiverMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_commitSendMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_commitSendMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('commitSendMessages failed: unknown result');
};
LineServiceClient.prototype.commitUpdateProfile = function(seq, attrs, receiverMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_commitUpdateProfile(seq, attrs, receiverMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_commitUpdateProfile(seq, attrs, receiverMids);
  }
};

LineServiceClient.prototype.send_commitUpdateProfile = function(seq, attrs, receiverMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('commitUpdateProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_commitUpdateProfile_args();
  args.seq = seq;
  args.attrs = attrs;
  args.receiverMids = receiverMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_commitUpdateProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_commitUpdateProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('commitUpdateProfile failed: unknown result');
};
LineServiceClient.prototype.confirmEmail = function(verifier, pinCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirmEmail(verifier, pinCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirmEmail(verifier, pinCode);
  }
};

LineServiceClient.prototype.send_confirmEmail = function(verifier, pinCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('confirmEmail', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_confirmEmail_args();
  args.verifier = verifier;
  args.pinCode = pinCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_confirmEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_confirmEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.createGroup = function(seq, name, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createGroup(seq, name, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createGroup(seq, name, contactIds);
  }
};

LineServiceClient.prototype.send_createGroup = function(seq, name, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_createGroup_args();
  args.seq = seq;
  args.name = name;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_createGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_createGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createGroup failed: unknown result');
};
LineServiceClient.prototype.createQrcodeBase64Image = function(url, characterSet, imageSize, x, y, width, height, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height);
  }
};

LineServiceClient.prototype.send_createQrcodeBase64Image = function(url, characterSet, imageSize, x, y, width, height) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createQrcodeBase64Image', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_createQrcodeBase64Image_args();
  args.url = url;
  args.characterSet = characterSet;
  args.imageSize = imageSize;
  args.x = x;
  args.y = y;
  args.width = width;
  args.height = height;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_createQrcodeBase64Image = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_createQrcodeBase64Image_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createQrcodeBase64Image failed: unknown result');
};
LineServiceClient.prototype.createRoom = function(reqSeq, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createRoom(reqSeq, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createRoom(reqSeq, contactIds);
  }
};

LineServiceClient.prototype.send_createRoom = function(reqSeq, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createRoom', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_createRoom_args();
  args.reqSeq = reqSeq;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_createRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_createRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createRoom failed: unknown result');
};
LineServiceClient.prototype.createSession = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createSession();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createSession();
  }
};

LineServiceClient.prototype.send_createSession = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createSession', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_createSession_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_createSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_createSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createSession failed: unknown result');
};
LineServiceClient.prototype.fetchAnnouncements = function(lastFetchedIndex, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchAnnouncements(lastFetchedIndex);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchAnnouncements(lastFetchedIndex);
  }
};

LineServiceClient.prototype.send_fetchAnnouncements = function(lastFetchedIndex) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchAnnouncements', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_fetchAnnouncements_args();
  args.lastFetchedIndex = lastFetchedIndex;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_fetchAnnouncements = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_fetchAnnouncements_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchAnnouncements failed: unknown result');
};
LineServiceClient.prototype.fetchMessages = function(localTs, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchMessages(localTs, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchMessages(localTs, count);
  }
};

LineServiceClient.prototype.send_fetchMessages = function(localTs, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchMessages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_fetchMessages_args();
  args.localTs = localTs;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_fetchMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_fetchMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchMessages failed: unknown result');
};
LineServiceClient.prototype.fetchOperations = function(localRev, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchOperations(localRev, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchOperations(localRev, count);
  }
};

LineServiceClient.prototype.send_fetchOperations = function(localRev, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchOperations', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_fetchOperations_args();
  args.localRev = localRev;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_fetchOperations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_fetchOperations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchOperations failed: unknown result');
};
LineServiceClient.prototype.fetchOps = function(localRev, count, globalRev, individualRev, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fetchOps(localRev, count, globalRev, individualRev);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fetchOps(localRev, count, globalRev, individualRev);
  }
};

LineServiceClient.prototype.send_fetchOps = function(localRev, count, globalRev, individualRev) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fetchOps', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_fetchOps_args();
  args.localRev = localRev;
  args.count = count;
  args.globalRev = globalRev;
  args.individualRev = individualRev;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_fetchOps = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_fetchOps_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fetchOps failed: unknown result');
};
LineServiceClient.prototype.findAndAddContactsByEmail = function(reqSeq, emails, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByEmail(reqSeq, emails);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByEmail(reqSeq, emails);
  }
};

LineServiceClient.prototype.send_findAndAddContactsByEmail = function(reqSeq, emails) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByEmail', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findAndAddContactsByEmail_args();
  args.reqSeq = reqSeq;
  args.emails = emails;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findAndAddContactsByEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findAndAddContactsByEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByEmail failed: unknown result');
};
LineServiceClient.prototype.findAndAddContactsByMid = function(reqSeq, mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByMid(reqSeq, mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByMid(reqSeq, mid);
  }
};

LineServiceClient.prototype.send_findAndAddContactsByMid = function(reqSeq, mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByMid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findAndAddContactsByMid_args();
  args.reqSeq = reqSeq;
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findAndAddContactsByMid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findAndAddContactsByMid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByMid failed: unknown result');
};
LineServiceClient.prototype.findAndAddContactsByPhone = function(reqSeq, phones, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByPhone(reqSeq, phones);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByPhone(reqSeq, phones);
  }
};

LineServiceClient.prototype.send_findAndAddContactsByPhone = function(reqSeq, phones) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByPhone', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findAndAddContactsByPhone_args();
  args.reqSeq = reqSeq;
  args.phones = phones;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findAndAddContactsByPhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findAndAddContactsByPhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByPhone failed: unknown result');
};
LineServiceClient.prototype.findAndAddContactsByUserid = function(reqSeq, userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findAndAddContactsByUserid(reqSeq, userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findAndAddContactsByUserid(reqSeq, userid);
  }
};

LineServiceClient.prototype.send_findAndAddContactsByUserid = function(reqSeq, userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findAndAddContactsByUserid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findAndAddContactsByUserid_args();
  args.reqSeq = reqSeq;
  args.userid = userid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findAndAddContactsByUserid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findAndAddContactsByUserid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findAndAddContactsByUserid failed: unknown result');
};
LineServiceClient.prototype.findContactByUserid = function(userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactByUserid(userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactByUserid(userid);
  }
};

LineServiceClient.prototype.send_findContactByUserid = function(userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactByUserid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findContactByUserid_args();
  args.userid = userid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findContactByUserid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findContactByUserid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactByUserid failed: unknown result');
};
LineServiceClient.prototype.findContactByUserTicket = function(ticketId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactByUserTicket(ticketId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactByUserTicket(ticketId);
  }
};

LineServiceClient.prototype.send_findContactByUserTicket = function(ticketId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactByUserTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findContactByUserTicket_args();
  args.ticketId = ticketId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findContactByUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findContactByUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactByUserTicket failed: unknown result');
};
LineServiceClient.prototype.findContactsByEmail = function(emails, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactsByEmail(emails);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactsByEmail(emails);
  }
};

LineServiceClient.prototype.send_findContactsByEmail = function(emails) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactsByEmail', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findContactsByEmail_args();
  args.emails = emails;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findContactsByEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findContactsByEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactsByEmail failed: unknown result');
};
LineServiceClient.prototype.findContactsByPhone = function(phones, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findContactsByPhone(phones);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findContactsByPhone(phones);
  }
};

LineServiceClient.prototype.send_findContactsByPhone = function(phones) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findContactsByPhone', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findContactsByPhone_args();
  args.phones = phones;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findContactsByPhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findContactsByPhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findContactsByPhone failed: unknown result');
};
LineServiceClient.prototype.findSnsIdUserStatus = function(snsIdType, snsAccessToken, udidHash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash);
  }
};

LineServiceClient.prototype.send_findSnsIdUserStatus = function(snsIdType, snsAccessToken, udidHash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findSnsIdUserStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_findSnsIdUserStatus_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.udidHash = udidHash;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_findSnsIdUserStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_findSnsIdUserStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findSnsIdUserStatus failed: unknown result');
};
LineServiceClient.prototype.finishUpdateVerification = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_finishUpdateVerification(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_finishUpdateVerification(sessionId);
  }
};

LineServiceClient.prototype.send_finishUpdateVerification = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('finishUpdateVerification', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_finishUpdateVerification_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_finishUpdateVerification = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_finishUpdateVerification_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.generateUserTicket = function(expirationTime, maxUseCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generateUserTicket(expirationTime, maxUseCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generateUserTicket(expirationTime, maxUseCount);
  }
};

LineServiceClient.prototype.send_generateUserTicket = function(expirationTime, maxUseCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('generateUserTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_generateUserTicket_args();
  args.expirationTime = expirationTime;
  args.maxUseCount = maxUseCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_generateUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_generateUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generateUserTicket failed: unknown result');
};
LineServiceClient.prototype.getAcceptedProximityMatches = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAcceptedProximityMatches(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAcceptedProximityMatches(sessionId);
  }
};

LineServiceClient.prototype.send_getAcceptedProximityMatches = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAcceptedProximityMatches', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getAcceptedProximityMatches_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getAcceptedProximityMatches = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getAcceptedProximityMatches_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAcceptedProximityMatches failed: unknown result');
};
LineServiceClient.prototype.getActiveBuddySubscriberIds = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActiveBuddySubscriberIds();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActiveBuddySubscriberIds();
  }
};

LineServiceClient.prototype.send_getActiveBuddySubscriberIds = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActiveBuddySubscriberIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getActiveBuddySubscriberIds_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getActiveBuddySubscriberIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getActiveBuddySubscriberIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActiveBuddySubscriberIds failed: unknown result');
};
LineServiceClient.prototype.getAllContactIds = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllContactIds();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllContactIds();
  }
};

LineServiceClient.prototype.send_getAllContactIds = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllContactIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getAllContactIds_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getAllContactIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getAllContactIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllContactIds failed: unknown result');
};
LineServiceClient.prototype.getAuthQrcode = function(keepLoggedIn, systemName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAuthQrcode(keepLoggedIn, systemName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAuthQrcode(keepLoggedIn, systemName);
  }
};

LineServiceClient.prototype.send_getAuthQrcode = function(keepLoggedIn, systemName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAuthQrcode', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getAuthQrcode_args();
  args.keepLoggedIn = keepLoggedIn;
  args.systemName = systemName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getAuthQrcode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getAuthQrcode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAuthQrcode failed: unknown result');
};
LineServiceClient.prototype.getBlockedContactIds = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlockedContactIds();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlockedContactIds();
  }
};

LineServiceClient.prototype.send_getBlockedContactIds = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlockedContactIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBlockedContactIds_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBlockedContactIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBlockedContactIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlockedContactIds failed: unknown result');
};
LineServiceClient.prototype.getBlockedContactIdsByRange = function(start, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlockedContactIdsByRange(start, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlockedContactIdsByRange(start, count);
  }
};

LineServiceClient.prototype.send_getBlockedContactIdsByRange = function(start, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlockedContactIdsByRange', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBlockedContactIdsByRange_args();
  args.start = start;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBlockedContactIdsByRange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBlockedContactIdsByRange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlockedContactIdsByRange failed: unknown result');
};
LineServiceClient.prototype.getBlockedRecommendationIds = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlockedRecommendationIds();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlockedRecommendationIds();
  }
};

LineServiceClient.prototype.send_getBlockedRecommendationIds = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlockedRecommendationIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBlockedRecommendationIds_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBlockedRecommendationIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBlockedRecommendationIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlockedRecommendationIds failed: unknown result');
};
LineServiceClient.prototype.getBuddyBlockerIds = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyBlockerIds();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyBlockerIds();
  }
};

LineServiceClient.prototype.send_getBuddyBlockerIds = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyBlockerIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyBlockerIds_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyBlockerIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyBlockerIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyBlockerIds failed: unknown result');
};
LineServiceClient.prototype.getBuddyLocation = function(mid, index, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBuddyLocation(mid, index);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBuddyLocation(mid, index);
  }
};

LineServiceClient.prototype.send_getBuddyLocation = function(mid, index) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBuddyLocation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getBuddyLocation_args();
  args.mid = mid;
  args.index = index;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getBuddyLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getBuddyLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBuddyLocation failed: unknown result');
};
LineServiceClient.prototype.getCompactContactsModifiedSince = function(timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompactContactsModifiedSince(timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompactContactsModifiedSince(timestamp);
  }
};

LineServiceClient.prototype.send_getCompactContactsModifiedSince = function(timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCompactContactsModifiedSince', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCompactContactsModifiedSince_args();
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCompactContactsModifiedSince = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCompactContactsModifiedSince_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompactContactsModifiedSince failed: unknown result');
};
LineServiceClient.prototype.getCompactGroup = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompactGroup(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompactGroup(groupId);
  }
};

LineServiceClient.prototype.send_getCompactGroup = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCompactGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCompactGroup_args();
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCompactGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCompactGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompactGroup failed: unknown result');
};
LineServiceClient.prototype.getCompactRoom = function(roomId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCompactRoom(roomId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCompactRoom(roomId);
  }
};

LineServiceClient.prototype.send_getCompactRoom = function(roomId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCompactRoom', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCompactRoom_args();
  args.roomId = roomId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCompactRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCompactRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCompactRoom failed: unknown result');
};
LineServiceClient.prototype.getContact = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContact(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContact(id);
  }
};

LineServiceClient.prototype.send_getContact = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContact', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getContact_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContact failed: unknown result');
};
LineServiceClient.prototype.getContacts = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContacts(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContacts(ids);
  }
};

LineServiceClient.prototype.send_getContacts = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getContacts_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContacts failed: unknown result');
};
LineServiceClient.prototype.getCountryWithRequestIp = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCountryWithRequestIp();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCountryWithRequestIp();
  }
};

LineServiceClient.prototype.send_getCountryWithRequestIp = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCountryWithRequestIp', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getCountryWithRequestIp_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getCountryWithRequestIp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getCountryWithRequestIp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCountryWithRequestIp failed: unknown result');
};
LineServiceClient.prototype.getFavoriteMids = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFavoriteMids();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFavoriteMids();
  }
};

LineServiceClient.prototype.send_getFavoriteMids = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFavoriteMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getFavoriteMids_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getFavoriteMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getFavoriteMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFavoriteMids failed: unknown result');
};
LineServiceClient.prototype.getGroup = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroup(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroup(groupId);
  }
};

LineServiceClient.prototype.send_getGroup = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getGroup_args();
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroup failed: unknown result');
};
LineServiceClient.prototype.getGroupIdsInvited = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupIdsInvited();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupIdsInvited();
  }
};

LineServiceClient.prototype.send_getGroupIdsInvited = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupIdsInvited', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getGroupIdsInvited_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getGroupIdsInvited = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getGroupIdsInvited_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupIdsInvited failed: unknown result');
};
LineServiceClient.prototype.getGroupIdsJoined = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroupIdsJoined();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroupIdsJoined();
  }
};

LineServiceClient.prototype.send_getGroupIdsJoined = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroupIdsJoined', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getGroupIdsJoined_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getGroupIdsJoined = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getGroupIdsJoined_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroupIdsJoined failed: unknown result');
};
LineServiceClient.prototype.getGroups = function(groupIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getGroups(groupIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getGroups(groupIds);
  }
};

LineServiceClient.prototype.send_getGroups = function(groupIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getGroups_args();
  args.groupIds = groupIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getGroups failed: unknown result');
};
LineServiceClient.prototype.getHiddenContactMids = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getHiddenContactMids();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getHiddenContactMids();
  }
};

LineServiceClient.prototype.send_getHiddenContactMids = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getHiddenContactMids', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getHiddenContactMids_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getHiddenContactMids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getHiddenContactMids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getHiddenContactMids failed: unknown result');
};
LineServiceClient.prototype.getIdentityIdentifier = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getIdentityIdentifier();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getIdentityIdentifier();
  }
};

LineServiceClient.prototype.send_getIdentityIdentifier = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getIdentityIdentifier', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getIdentityIdentifier_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getIdentityIdentifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getIdentityIdentifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getIdentityIdentifier failed: unknown result');
};
LineServiceClient.prototype.getLastAnnouncementIndex = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLastAnnouncementIndex();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLastAnnouncementIndex();
  }
};

LineServiceClient.prototype.send_getLastAnnouncementIndex = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLastAnnouncementIndex', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getLastAnnouncementIndex_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getLastAnnouncementIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getLastAnnouncementIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLastAnnouncementIndex failed: unknown result');
};
LineServiceClient.prototype.getLastOpRevision = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLastOpRevision();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLastOpRevision();
  }
};

LineServiceClient.prototype.send_getLastOpRevision = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLastOpRevision', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getLastOpRevision_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getLastOpRevision = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getLastOpRevision_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLastOpRevision failed: unknown result');
};
LineServiceClient.prototype.getMessageBox = function(channelId, messageBoxId, lastMessagesCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBox(channelId, messageBoxId, lastMessagesCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBox(channelId, messageBoxId, lastMessagesCount);
  }
};

LineServiceClient.prototype.send_getMessageBox = function(channelId, messageBoxId, lastMessagesCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBox', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBox_args();
  args.channelId = channelId;
  args.messageBoxId = messageBoxId;
  args.lastMessagesCount = lastMessagesCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBox = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBox_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBox failed: unknown result');
};
LineServiceClient.prototype.getMessageBoxCompactWrapUp = function(mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBoxCompactWrapUp(mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBoxCompactWrapUp(mid);
  }
};

LineServiceClient.prototype.send_getMessageBoxCompactWrapUp = function(mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBoxCompactWrapUp', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBoxCompactWrapUp_args();
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBoxCompactWrapUp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBoxCompactWrapUp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBoxCompactWrapUp failed: unknown result');
};
LineServiceClient.prototype.getMessageBoxCompactWrapUpList = function(start, messageBoxCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBoxCompactWrapUpList(start, messageBoxCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBoxCompactWrapUpList(start, messageBoxCount);
  }
};

LineServiceClient.prototype.send_getMessageBoxCompactWrapUpList = function(start, messageBoxCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBoxCompactWrapUpList', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBoxCompactWrapUpList_args();
  args.start = start;
  args.messageBoxCount = messageBoxCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBoxCompactWrapUpList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBoxCompactWrapUpList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBoxCompactWrapUpList failed: unknown result');
};
LineServiceClient.prototype.getMessageBoxList = function(channelId, lastMessagesCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBoxList(channelId, lastMessagesCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBoxList(channelId, lastMessagesCount);
  }
};

LineServiceClient.prototype.send_getMessageBoxList = function(channelId, lastMessagesCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBoxList', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBoxList_args();
  args.channelId = channelId;
  args.lastMessagesCount = lastMessagesCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBoxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBoxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBoxList failed: unknown result');
};
LineServiceClient.prototype.getMessageBoxListByStatus = function(channelId, lastMessagesCount, status, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBoxListByStatus(channelId, lastMessagesCount, status);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBoxListByStatus(channelId, lastMessagesCount, status);
  }
};

LineServiceClient.prototype.send_getMessageBoxListByStatus = function(channelId, lastMessagesCount, status) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBoxListByStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBoxListByStatus_args();
  args.channelId = channelId;
  args.lastMessagesCount = lastMessagesCount;
  args.status = status;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBoxListByStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBoxListByStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBoxListByStatus failed: unknown result');
};
LineServiceClient.prototype.getMessageBoxWrapUp = function(mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBoxWrapUp(mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBoxWrapUp(mid);
  }
};

LineServiceClient.prototype.send_getMessageBoxWrapUp = function(mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBoxWrapUp', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBoxWrapUp_args();
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBoxWrapUp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBoxWrapUp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBoxWrapUp failed: unknown result');
};
LineServiceClient.prototype.getMessageBoxWrapUpList = function(start, messageBoxCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessageBoxWrapUpList(start, messageBoxCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessageBoxWrapUpList(start, messageBoxCount);
  }
};

LineServiceClient.prototype.send_getMessageBoxWrapUpList = function(start, messageBoxCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessageBoxWrapUpList', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessageBoxWrapUpList_args();
  args.start = start;
  args.messageBoxCount = messageBoxCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessageBoxWrapUpList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessageBoxWrapUpList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessageBoxWrapUpList failed: unknown result');
};
LineServiceClient.prototype.getMessagesBySequenceNumber = function(channelId, messageBoxId, startSeq, endSeq, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq);
  }
};

LineServiceClient.prototype.send_getMessagesBySequenceNumber = function(channelId, messageBoxId, startSeq, endSeq) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMessagesBySequenceNumber', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getMessagesBySequenceNumber_args();
  args.channelId = channelId;
  args.messageBoxId = messageBoxId;
  args.startSeq = startSeq;
  args.endSeq = endSeq;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getMessagesBySequenceNumber = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getMessagesBySequenceNumber_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMessagesBySequenceNumber failed: unknown result');
};
LineServiceClient.prototype.getNextMessages = function(messageBoxId, startSeq, messagesCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNextMessages(messageBoxId, startSeq, messagesCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNextMessages(messageBoxId, startSeq, messagesCount);
  }
};

LineServiceClient.prototype.send_getNextMessages = function(messageBoxId, startSeq, messagesCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNextMessages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getNextMessages_args();
  args.messageBoxId = messageBoxId;
  args.startSeq = startSeq;
  args.messagesCount = messagesCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getNextMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getNextMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNextMessages failed: unknown result');
};
LineServiceClient.prototype.getNotificationPolicy = function(carrier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNotificationPolicy(carrier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNotificationPolicy(carrier);
  }
};

LineServiceClient.prototype.send_getNotificationPolicy = function(carrier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNotificationPolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getNotificationPolicy_args();
  args.carrier = carrier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getNotificationPolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getNotificationPolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNotificationPolicy failed: unknown result');
};
LineServiceClient.prototype.getPreviousMessages = function(messageBoxId, endSeq, messagesCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPreviousMessages(messageBoxId, endSeq, messagesCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPreviousMessages(messageBoxId, endSeq, messagesCount);
  }
};

LineServiceClient.prototype.send_getPreviousMessages = function(messageBoxId, endSeq, messagesCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPreviousMessages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getPreviousMessages_args();
  args.messageBoxId = messageBoxId;
  args.endSeq = endSeq;
  args.messagesCount = messagesCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getPreviousMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getPreviousMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPreviousMessages failed: unknown result');
};
LineServiceClient.prototype.getProfile = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProfile();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProfile();
  }
};

LineServiceClient.prototype.send_getProfile = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProfile_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProfile failed: unknown result');
};
LineServiceClient.prototype.getProximityMatchCandidateList = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProximityMatchCandidateList(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProximityMatchCandidateList(sessionId);
  }
};

LineServiceClient.prototype.send_getProximityMatchCandidateList = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProximityMatchCandidateList', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProximityMatchCandidateList_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProximityMatchCandidateList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProximityMatchCandidateList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProximityMatchCandidateList failed: unknown result');
};
LineServiceClient.prototype.getProximityMatchCandidates = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProximityMatchCandidates(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProximityMatchCandidates(sessionId);
  }
};

LineServiceClient.prototype.send_getProximityMatchCandidates = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProximityMatchCandidates', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getProximityMatchCandidates_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getProximityMatchCandidates = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getProximityMatchCandidates_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProximityMatchCandidates failed: unknown result');
};
LineServiceClient.prototype.getRecentMessages = function(messageBoxId, messagesCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRecentMessages(messageBoxId, messagesCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRecentMessages(messageBoxId, messagesCount);
  }
};

LineServiceClient.prototype.send_getRecentMessages = function(messageBoxId, messagesCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRecentMessages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getRecentMessages_args();
  args.messageBoxId = messageBoxId;
  args.messagesCount = messagesCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getRecentMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getRecentMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecentMessages failed: unknown result');
};
LineServiceClient.prototype.getRecommendationIds = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRecommendationIds();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRecommendationIds();
  }
};

LineServiceClient.prototype.send_getRecommendationIds = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRecommendationIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getRecommendationIds_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getRecommendationIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getRecommendationIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecommendationIds failed: unknown result');
};
LineServiceClient.prototype.getRoom = function(roomId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRoom(roomId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRoom(roomId);
  }
};

LineServiceClient.prototype.send_getRoom = function(roomId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRoom', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getRoom_args();
  args.roomId = roomId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRoom failed: unknown result');
};
LineServiceClient.prototype.getRSAKeyInfo = function(provider, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRSAKeyInfo(provider);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRSAKeyInfo(provider);
  }
};

LineServiceClient.prototype.send_getRSAKeyInfo = function(provider) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRSAKeyInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getRSAKeyInfo_args();
  args.provider = provider;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getRSAKeyInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getRSAKeyInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRSAKeyInfo failed: unknown result');
};
LineServiceClient.prototype.getServerTime = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServerTime();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServerTime();
  }
};

LineServiceClient.prototype.send_getServerTime = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServerTime', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getServerTime_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getServerTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getServerTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServerTime failed: unknown result');
};
LineServiceClient.prototype.getSessions = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSessions();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSessions();
  }
};

LineServiceClient.prototype.send_getSessions = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSessions', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSessions_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSessions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSessions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSessions failed: unknown result');
};
LineServiceClient.prototype.getSettings = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSettings();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSettings();
  }
};

LineServiceClient.prototype.send_getSettings = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSettings_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSettings failed: unknown result');
};
LineServiceClient.prototype.getSettingsAttributes = function(attrBitset, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSettingsAttributes(attrBitset);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSettingsAttributes(attrBitset);
  }
};

LineServiceClient.prototype.send_getSettingsAttributes = function(attrBitset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSettingsAttributes', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSettingsAttributes_args();
  args.attrBitset = attrBitset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSettingsAttributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSettingsAttributes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSettingsAttributes failed: unknown result');
};
LineServiceClient.prototype.getSystemConfiguration = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSystemConfiguration();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSystemConfiguration();
  }
};

LineServiceClient.prototype.send_getSystemConfiguration = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSystemConfiguration', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getSystemConfiguration_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getSystemConfiguration = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getSystemConfiguration_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSystemConfiguration failed: unknown result');
};
LineServiceClient.prototype.getUserTicket = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserTicket();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserTicket();
  }
};

LineServiceClient.prototype.send_getUserTicket = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getUserTicket_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserTicket failed: unknown result');
};
LineServiceClient.prototype.getWapInvitation = function(invitationHash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getWapInvitation(invitationHash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getWapInvitation(invitationHash);
  }
};

LineServiceClient.prototype.send_getWapInvitation = function(invitationHash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWapInvitation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_getWapInvitation_args();
  args.invitationHash = invitationHash;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_getWapInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_getWapInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWapInvitation failed: unknown result');
};
LineServiceClient.prototype.invalidateUserTicket = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_invalidateUserTicket();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_invalidateUserTicket();
  }
};

LineServiceClient.prototype.send_invalidateUserTicket = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invalidateUserTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_invalidateUserTicket_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_invalidateUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_invalidateUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.inviteFriendsBySms = function(phoneNumberList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteFriendsBySms(phoneNumberList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteFriendsBySms(phoneNumberList);
  }
};

LineServiceClient.prototype.send_inviteFriendsBySms = function(phoneNumberList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteFriendsBySms', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_inviteFriendsBySms_args();
  args.phoneNumberList = phoneNumberList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_inviteFriendsBySms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_inviteFriendsBySms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.inviteIntoGroup = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteIntoGroup(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteIntoGroup(reqSeq, groupId, contactIds);
  }
};

LineServiceClient.prototype.send_inviteIntoGroup = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteIntoGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_inviteIntoGroup_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_inviteIntoGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_inviteIntoGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.inviteIntoRoom = function(reqSeq, roomId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteIntoRoom(reqSeq, roomId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteIntoRoom(reqSeq, roomId, contactIds);
  }
};

LineServiceClient.prototype.send_inviteIntoRoom = function(reqSeq, roomId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteIntoRoom', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_inviteIntoRoom_args();
  args.reqSeq = reqSeq;
  args.roomId = roomId;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_inviteIntoRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_inviteIntoRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.inviteViaEmail = function(reqSeq, email, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_inviteViaEmail(reqSeq, email, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_inviteViaEmail(reqSeq, email, name);
  }
};

LineServiceClient.prototype.send_inviteViaEmail = function(reqSeq, email, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('inviteViaEmail', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_inviteViaEmail_args();
  args.reqSeq = reqSeq;
  args.email = email;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_inviteViaEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_inviteViaEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.isIdentityIdentifierAvailable = function(provider, identifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isIdentityIdentifierAvailable(provider, identifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isIdentityIdentifierAvailable(provider, identifier);
  }
};

LineServiceClient.prototype.send_isIdentityIdentifierAvailable = function(provider, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isIdentityIdentifierAvailable', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_isIdentityIdentifierAvailable_args();
  args.provider = provider;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_isIdentityIdentifierAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_isIdentityIdentifierAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isIdentityIdentifierAvailable failed: unknown result');
};
LineServiceClient.prototype.isUseridAvailable = function(userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isUseridAvailable(userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isUseridAvailable(userid);
  }
};

LineServiceClient.prototype.send_isUseridAvailable = function(userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isUseridAvailable', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_isUseridAvailable_args();
  args.userid = userid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_isUseridAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_isUseridAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isUseridAvailable failed: unknown result');
};
LineServiceClient.prototype.kickoutFromGroup = function(reqSeq, groupId, contactIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_kickoutFromGroup(reqSeq, groupId, contactIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_kickoutFromGroup(reqSeq, groupId, contactIds);
  }
};

LineServiceClient.prototype.send_kickoutFromGroup = function(reqSeq, groupId, contactIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('kickoutFromGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_kickoutFromGroup_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.contactIds = contactIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_kickoutFromGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_kickoutFromGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.leaveGroup = function(reqSeq, groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_leaveGroup(reqSeq, groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_leaveGroup(reqSeq, groupId);
  }
};

LineServiceClient.prototype.send_leaveGroup = function(reqSeq, groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('leaveGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_leaveGroup_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_leaveGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_leaveGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.leaveRoom = function(reqSeq, roomId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_leaveRoom(reqSeq, roomId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_leaveRoom(reqSeq, roomId);
  }
};

LineServiceClient.prototype.send_leaveRoom = function(reqSeq, roomId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('leaveRoom', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_leaveRoom_args();
  args.reqSeq = reqSeq;
  args.roomId = roomId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_leaveRoom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_leaveRoom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.loginWithIdentityCredential = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
  }
};

LineServiceClient.prototype.send_loginWithIdentityCredential = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_loginWithIdentityCredential_args();
  args.identityProvider = identityProvider;
  args.identifier = identifier;
  args.password = password;
  args.keepLoggedIn = keepLoggedIn;
  args.accessLocation = accessLocation;
  args.systemName = systemName;
  args.certificate = certificate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_loginWithIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_loginWithIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithIdentityCredential failed: unknown result');
};
LineServiceClient.prototype.loginWithIdentityCredentialForCertificate = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
  }
};

LineServiceClient.prototype.send_loginWithIdentityCredentialForCertificate = function(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithIdentityCredentialForCertificate', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_loginWithIdentityCredentialForCertificate_args();
  args.identityProvider = identityProvider;
  args.identifier = identifier;
  args.password = password;
  args.keepLoggedIn = keepLoggedIn;
  args.accessLocation = accessLocation;
  args.systemName = systemName;
  args.certificate = certificate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_loginWithIdentityCredentialForCertificate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_loginWithIdentityCredentialForCertificate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithIdentityCredentialForCertificate failed: unknown result');
};
LineServiceClient.prototype.loginWithVerifier = function(verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithVerifier(verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithVerifier(verifier);
  }
};

LineServiceClient.prototype.send_loginWithVerifier = function(verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithVerifier', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_loginWithVerifier_args();
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_loginWithVerifier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_loginWithVerifier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithVerifier failed: unknown result');
};
LineServiceClient.prototype.loginWithVerifierForCerificate = function(verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithVerifierForCerificate(verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithVerifierForCerificate(verifier);
  }
};

LineServiceClient.prototype.send_loginWithVerifierForCerificate = function(verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithVerifierForCerificate', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_loginWithVerifierForCerificate_args();
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_loginWithVerifierForCerificate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_loginWithVerifierForCerificate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithVerifierForCerificate failed: unknown result');
};
LineServiceClient.prototype.loginWithVerifierForCertificate = function(verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_loginWithVerifierForCertificate(verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_loginWithVerifierForCertificate(verifier);
  }
};

LineServiceClient.prototype.send_loginWithVerifierForCertificate = function(verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('loginWithVerifierForCertificate', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_loginWithVerifierForCertificate_args();
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_loginWithVerifierForCertificate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_loginWithVerifierForCertificate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('loginWithVerifierForCertificate failed: unknown result');
};
LineServiceClient.prototype.logout = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logout();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logout();
  }
};

LineServiceClient.prototype.send_logout = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_logout_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_logout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_logout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.logoutSession = function(tokenKey, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logoutSession(tokenKey);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logoutSession(tokenKey);
  }
};

LineServiceClient.prototype.send_logoutSession = function(tokenKey) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('logoutSession', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_logoutSession_args();
  args.tokenKey = tokenKey;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_logoutSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_logoutSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.noop = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_noop();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_noop();
  }
};

LineServiceClient.prototype.send_noop = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('noop', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_noop_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_noop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_noop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.notifiedRedirect = function(paramMap, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifiedRedirect(paramMap);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifiedRedirect(paramMap);
  }
};

LineServiceClient.prototype.send_notifiedRedirect = function(paramMap) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifiedRedirect', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifiedRedirect_args();
  args.paramMap = paramMap;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifiedRedirect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifiedRedirect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.notifyBuddyOnAir = function(seq, receiverMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyBuddyOnAir(seq, receiverMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyBuddyOnAir(seq, receiverMids);
  }
};

LineServiceClient.prototype.send_notifyBuddyOnAir = function(seq, receiverMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyBuddyOnAir', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyBuddyOnAir_args();
  args.seq = seq;
  args.receiverMids = receiverMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyBuddyOnAir = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyBuddyOnAir_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('notifyBuddyOnAir failed: unknown result');
};
LineServiceClient.prototype.notifyIndividualEvent = function(notificationStatus, receiverMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyIndividualEvent(notificationStatus, receiverMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyIndividualEvent(notificationStatus, receiverMids);
  }
};

LineServiceClient.prototype.send_notifyIndividualEvent = function(notificationStatus, receiverMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyIndividualEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyIndividualEvent_args();
  args.notificationStatus = notificationStatus;
  args.receiverMids = receiverMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyIndividualEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyIndividualEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.notifyInstalled = function(udidHash, applicationTypeWithExtensions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyInstalled(udidHash, applicationTypeWithExtensions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyInstalled(udidHash, applicationTypeWithExtensions);
  }
};

LineServiceClient.prototype.send_notifyInstalled = function(udidHash, applicationTypeWithExtensions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyInstalled', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyInstalled_args();
  args.udidHash = udidHash;
  args.applicationTypeWithExtensions = applicationTypeWithExtensions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyInstalled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyInstalled_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
LineServiceClient.prototype.notifyRegistrationComplete = function(udidHash, applicationTypeWithExtensions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
  }
};

LineServiceClient.prototype.send_notifyRegistrationComplete = function(udidHash, applicationTypeWithExtensions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyRegistrationComplete', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyRegistrationComplete_args();
  args.udidHash = udidHash;
  args.applicationTypeWithExtensions = applicationTypeWithExtensions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyRegistrationComplete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyRegistrationComplete_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
LineServiceClient.prototype.notifySleep = function(lastRev, badge, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifySleep(lastRev, badge);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifySleep(lastRev, badge);
  }
};

LineServiceClient.prototype.send_notifySleep = function(lastRev, badge) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifySleep', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifySleep_args();
  args.lastRev = lastRev;
  args.badge = badge;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifySleep = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifySleep_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.notifyUpdated = function(lastRev, deviceInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notifyUpdated(lastRev, deviceInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notifyUpdated(lastRev, deviceInfo);
  }
};

LineServiceClient.prototype.send_notifyUpdated = function(lastRev, deviceInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notifyUpdated', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notifyUpdated_args();
  args.lastRev = lastRev;
  args.deviceInfo = deviceInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notifyUpdated = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notifyUpdated_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.openProximityMatch = function(location, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_openProximityMatch(location);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_openProximityMatch(location);
  }
};

LineServiceClient.prototype.send_openProximityMatch = function(location) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('openProximityMatch', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_openProximityMatch_args();
  args.location = location;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_openProximityMatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_openProximityMatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('openProximityMatch failed: unknown result');
};
LineServiceClient.prototype.registerBuddyUser = function(buddyId, registrarPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerBuddyUser(buddyId, registrarPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerBuddyUser(buddyId, registrarPassword);
  }
};

LineServiceClient.prototype.send_registerBuddyUser = function(buddyId, registrarPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerBuddyUser', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerBuddyUser_args();
  args.buddyId = buddyId;
  args.registrarPassword = registrarPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerBuddyUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerBuddyUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerBuddyUser failed: unknown result');
};
LineServiceClient.prototype.registerBuddyUserid = function(seq, userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerBuddyUserid(seq, userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerBuddyUserid(seq, userid);
  }
};

LineServiceClient.prototype.send_registerBuddyUserid = function(seq, userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerBuddyUserid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerBuddyUserid_args();
  args.seq = seq;
  args.userid = userid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerBuddyUserid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerBuddyUserid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.registerDevice = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDevice(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDevice(sessionId);
  }
};

LineServiceClient.prototype.send_registerDevice = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDevice', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerDevice_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDevice failed: unknown result');
};
LineServiceClient.prototype.registerDeviceWithIdentityCredential = function(sessionId, provider, identifier, verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier);
  }
};

LineServiceClient.prototype.send_registerDeviceWithIdentityCredential = function(sessionId, provider, identifier, verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDeviceWithIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerDeviceWithIdentityCredential_args();
  args.sessionId = sessionId;
  args.provider = provider;
  args.identifier = identifier;
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerDeviceWithIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerDeviceWithIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDeviceWithIdentityCredential failed: unknown result');
};
LineServiceClient.prototype.registerDeviceWithoutPhoneNumber = function(region, udidHash, deviceInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo);
  }
};

LineServiceClient.prototype.send_registerDeviceWithoutPhoneNumber = function(region, udidHash, deviceInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDeviceWithoutPhoneNumber', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerDeviceWithoutPhoneNumber_args();
  args.region = region;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerDeviceWithoutPhoneNumber = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerDeviceWithoutPhoneNumber_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDeviceWithoutPhoneNumber failed: unknown result');
};
LineServiceClient.prototype.registerDeviceWithoutPhoneNumberWithIdentityCredential = function(region, udidHash, deviceInfo, provider, identifier, verifier, mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid);
  }
};

LineServiceClient.prototype.send_registerDeviceWithoutPhoneNumberWithIdentityCredential = function(region, udidHash, deviceInfo, provider, identifier, verifier, mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerDeviceWithoutPhoneNumberWithIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
  args.region = region;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.provider = provider;
  args.identifier = identifier;
  args.verifier = verifier;
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerDeviceWithoutPhoneNumberWithIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result');
};
LineServiceClient.prototype.registerUserid = function(reqSeq, userid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerUserid(reqSeq, userid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerUserid(reqSeq, userid);
  }
};

LineServiceClient.prototype.send_registerUserid = function(reqSeq, userid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerUserid', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerUserid_args();
  args.reqSeq = reqSeq;
  args.userid = userid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerUserid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerUserid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerUserid failed: unknown result');
};
LineServiceClient.prototype.registerWapDevice = function(invitationHash, guidHash, email, deviceInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWapDevice(invitationHash, guidHash, email, deviceInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWapDevice(invitationHash, guidHash, email, deviceInfo);
  }
};

LineServiceClient.prototype.send_registerWapDevice = function(invitationHash, guidHash, email, deviceInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWapDevice', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerWapDevice_args();
  args.invitationHash = invitationHash;
  args.guidHash = guidHash;
  args.email = email;
  args.deviceInfo = deviceInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerWapDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerWapDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWapDevice failed: unknown result');
};
LineServiceClient.prototype.registerWithExistingSnsIdAndIdentityCredential = function(identityCredential, region, udidHash, deviceInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo);
  }
};

LineServiceClient.prototype.send_registerWithExistingSnsIdAndIdentityCredential = function(identityCredential, region, udidHash, deviceInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWithExistingSnsIdAndIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerWithExistingSnsIdAndIdentityCredential_args();
  args.identityCredential = identityCredential;
  args.region = region;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerWithExistingSnsIdAndIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerWithExistingSnsIdAndIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWithExistingSnsIdAndIdentityCredential failed: unknown result');
};
LineServiceClient.prototype.registerWithSnsId = function(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
  }
};

LineServiceClient.prototype.send_registerWithSnsId = function(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWithSnsId', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerWithSnsId_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.region = region;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.mid = mid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerWithSnsId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerWithSnsId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWithSnsId failed: unknown result');
};
LineServiceClient.prototype.registerWithSnsIdAndIdentityCredential = function(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
  }
};

LineServiceClient.prototype.send_registerWithSnsIdAndIdentityCredential = function(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerWithSnsIdAndIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_registerWithSnsIdAndIdentityCredential_args();
  args.snsIdType = snsIdType;
  args.snsAccessToken = snsAccessToken;
  args.identityCredential = identityCredential;
  args.region = region;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_registerWithSnsIdAndIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_registerWithSnsIdAndIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerWithSnsIdAndIdentityCredential failed: unknown result');
};
LineServiceClient.prototype.reissueDeviceCredential = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reissueDeviceCredential();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reissueDeviceCredential();
  }
};

LineServiceClient.prototype.send_reissueDeviceCredential = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reissueDeviceCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reissueDeviceCredential_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reissueDeviceCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reissueDeviceCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reissueDeviceCredential failed: unknown result');
};
LineServiceClient.prototype.reissueUserTicket = function(expirationTime, maxUseCount, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reissueUserTicket(expirationTime, maxUseCount);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reissueUserTicket(expirationTime, maxUseCount);
  }
};

LineServiceClient.prototype.send_reissueUserTicket = function(expirationTime, maxUseCount) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reissueUserTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reissueUserTicket_args();
  args.expirationTime = expirationTime;
  args.maxUseCount = maxUseCount;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reissueUserTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reissueUserTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reissueUserTicket failed: unknown result');
};
LineServiceClient.prototype.reissueGroupTicket = function(groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reissueGroupTicket(groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reissueGroupTicket(groupId);
  }
};

LineServiceClient.prototype.send_reissueGroupTicket = function(groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reissueGroupTicket', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reissueGroupTicket_args();
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reissueGroupTicket = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reissueGroupTicket_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reissueGroupTicket failed: unknown result');
};
LineServiceClient.prototype.rejectGroupInvitation = function(reqSeq, groupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rejectGroupInvitation(reqSeq, groupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rejectGroupInvitation(reqSeq, groupId);
  }
};

LineServiceClient.prototype.send_rejectGroupInvitation = function(reqSeq, groupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rejectGroupInvitation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_rejectGroupInvitation_args();
  args.reqSeq = reqSeq;
  args.groupId = groupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_rejectGroupInvitation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_rejectGroupInvitation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.releaseSession = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_releaseSession();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_releaseSession();
  }
};

LineServiceClient.prototype.send_releaseSession = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('releaseSession', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_releaseSession_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_releaseSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_releaseSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.removeAllMessages = function(seq, lastMessageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeAllMessages(seq, lastMessageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeAllMessages(seq, lastMessageId);
  }
};

LineServiceClient.prototype.send_removeAllMessages = function(seq, lastMessageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeAllMessages', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeAllMessages_args();
  args.seq = seq;
  args.lastMessageId = lastMessageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeAllMessages = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeAllMessages_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.removeBuddyLocation = function(mid, index, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeBuddyLocation(mid, index);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeBuddyLocation(mid, index);
  }
};

LineServiceClient.prototype.send_removeBuddyLocation = function(mid, index) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeBuddyLocation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeBuddyLocation_args();
  args.mid = mid;
  args.index = index;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeBuddyLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeBuddyLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.removeMessage = function(messageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeMessage(messageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeMessage(messageId);
  }
};

LineServiceClient.prototype.send_removeMessage = function(messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeMessage_args();
  args.messageId = messageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeMessage failed: unknown result');
};
LineServiceClient.prototype.removeMessageFromMyHome = function(messageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeMessageFromMyHome(messageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeMessageFromMyHome(messageId);
  }
};

LineServiceClient.prototype.send_removeMessageFromMyHome = function(messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeMessageFromMyHome', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeMessageFromMyHome_args();
  args.messageId = messageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeMessageFromMyHome = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeMessageFromMyHome_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeMessageFromMyHome failed: unknown result');
};
LineServiceClient.prototype.removeSnsId = function(snsIdType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeSnsId(snsIdType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeSnsId(snsIdType);
  }
};

LineServiceClient.prototype.send_removeSnsId = function(snsIdType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeSnsId', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_removeSnsId_args();
  args.snsIdType = snsIdType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_removeSnsId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_removeSnsId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeSnsId failed: unknown result');
};
LineServiceClient.prototype.report = function(syncOpRevision, category, report, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_report(syncOpRevision, category, report);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_report(syncOpRevision, category, report);
  }
};

LineServiceClient.prototype.send_report = function(syncOpRevision, category, report) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('report', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_report_args();
  args.syncOpRevision = syncOpRevision;
  args.category = category;
  args.report = report;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_report = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_report_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.reportContacts = function(syncOpRevision, category, contactReports, actionType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportContacts(syncOpRevision, category, contactReports, actionType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportContacts(syncOpRevision, category, contactReports, actionType);
  }
};

LineServiceClient.prototype.send_reportContacts = function(syncOpRevision, category, contactReports, actionType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reportContacts_args();
  args.syncOpRevision = syncOpRevision;
  args.category = category;
  args.contactReports = contactReports;
  args.actionType = actionType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reportContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reportContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reportContacts failed: unknown result');
};
LineServiceClient.prototype.reportGroups = function(syncOpRevision, groups, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportGroups(syncOpRevision, groups);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportGroups(syncOpRevision, groups);
  }
};

LineServiceClient.prototype.send_reportGroups = function(syncOpRevision, groups) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reportGroups_args();
  args.syncOpRevision = syncOpRevision;
  args.groups = groups;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reportGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reportGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.reportProfile = function(syncOpRevision, profile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportProfile(syncOpRevision, profile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportProfile(syncOpRevision, profile);
  }
};

LineServiceClient.prototype.send_reportProfile = function(syncOpRevision, profile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reportProfile_args();
  args.syncOpRevision = syncOpRevision;
  args.profile = profile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reportProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reportProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.reportRooms = function(syncOpRevision, rooms, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportRooms(syncOpRevision, rooms);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportRooms(syncOpRevision, rooms);
  }
};

LineServiceClient.prototype.send_reportRooms = function(syncOpRevision, rooms) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportRooms', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reportRooms_args();
  args.syncOpRevision = syncOpRevision;
  args.rooms = rooms;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reportRooms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reportRooms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.reportSettings = function(syncOpRevision, settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportSettings(syncOpRevision, settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportSettings(syncOpRevision, settings);
  }
};

LineServiceClient.prototype.send_reportSettings = function(syncOpRevision, settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportSettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reportSettings_args();
  args.syncOpRevision = syncOpRevision;
  args.settings = settings;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reportSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reportSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.reportSpammer = function(spammerMid, spammerReasons, spamMessageIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reportSpammer(spammerMid, spammerReasons, spamMessageIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reportSpammer(spammerMid, spammerReasons, spamMessageIds);
  }
};

LineServiceClient.prototype.send_reportSpammer = function(spammerMid, spammerReasons, spamMessageIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reportSpammer', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_reportSpammer_args();
  args.spammerMid = spammerMid;
  args.spammerReasons = spammerReasons;
  args.spamMessageIds = spamMessageIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_reportSpammer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_reportSpammer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.requestAccountPasswordReset = function(provider, identifier, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestAccountPasswordReset(provider, identifier, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestAccountPasswordReset(provider, identifier, locale);
  }
};

LineServiceClient.prototype.send_requestAccountPasswordReset = function(provider, identifier, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestAccountPasswordReset', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_requestAccountPasswordReset_args();
  args.provider = provider;
  args.identifier = identifier;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_requestAccountPasswordReset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_requestAccountPasswordReset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.requestEmailConfirmation = function(emailConfirmation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestEmailConfirmation(emailConfirmation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestEmailConfirmation(emailConfirmation);
  }
};

LineServiceClient.prototype.send_requestEmailConfirmation = function(emailConfirmation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestEmailConfirmation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_requestEmailConfirmation_args();
  args.emailConfirmation = emailConfirmation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_requestEmailConfirmation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_requestEmailConfirmation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('requestEmailConfirmation failed: unknown result');
};
LineServiceClient.prototype.requestIdentityUnbind = function(provider, identifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_requestIdentityUnbind(provider, identifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_requestIdentityUnbind(provider, identifier);
  }
};

LineServiceClient.prototype.send_requestIdentityUnbind = function(provider, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('requestIdentityUnbind', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_requestIdentityUnbind_args();
  args.provider = provider;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_requestIdentityUnbind = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_requestIdentityUnbind_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.resendEmailConfirmation = function(verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resendEmailConfirmation(verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resendEmailConfirmation(verifier);
  }
};

LineServiceClient.prototype.send_resendEmailConfirmation = function(verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resendEmailConfirmation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_resendEmailConfirmation_args();
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_resendEmailConfirmation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_resendEmailConfirmation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('resendEmailConfirmation failed: unknown result');
};
LineServiceClient.prototype.resendPinCode = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resendPinCode(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resendPinCode(sessionId);
  }
};

LineServiceClient.prototype.send_resendPinCode = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resendPinCode', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_resendPinCode_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_resendPinCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_resendPinCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.resendPinCodeBySMS = function(sessionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_resendPinCodeBySMS(sessionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_resendPinCodeBySMS(sessionId);
  }
};

LineServiceClient.prototype.send_resendPinCodeBySMS = function(sessionId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resendPinCodeBySMS', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_resendPinCodeBySMS_args();
  args.sessionId = sessionId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_resendPinCodeBySMS = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_resendPinCodeBySMS_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendChatChecked = function(seq, consumer, lastMessageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendChatChecked(seq, consumer, lastMessageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendChatChecked(seq, consumer, lastMessageId);
  }
};

LineServiceClient.prototype.send_sendChatChecked = function(seq, consumer, lastMessageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendChatChecked', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendChatChecked_args();
  args.seq = seq;
  args.consumer = consumer;
  args.lastMessageId = lastMessageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendChatChecked = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendChatChecked_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendChatRemoved = function(seq, consumer, lastMessageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendChatRemoved(seq, consumer, lastMessageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendChatRemoved(seq, consumer, lastMessageId);
  }
};

LineServiceClient.prototype.send_sendChatRemoved = function(seq, consumer, lastMessageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendChatRemoved', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendChatRemoved_args();
  args.seq = seq;
  args.consumer = consumer;
  args.lastMessageId = lastMessageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendChatRemoved = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendChatRemoved_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendContentPreviewUpdated = function(esq, messageId, receiverMids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendContentPreviewUpdated(esq, messageId, receiverMids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendContentPreviewUpdated(esq, messageId, receiverMids);
  }
};

LineServiceClient.prototype.send_sendContentPreviewUpdated = function(esq, messageId, receiverMids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendContentPreviewUpdated', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendContentPreviewUpdated_args();
  args.esq = esq;
  args.messageId = messageId;
  args.receiverMids = receiverMids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendContentPreviewUpdated = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendContentPreviewUpdated_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendContentPreviewUpdated failed: unknown result');
};
LineServiceClient.prototype.sendContentReceipt = function(seq, consumer, messageId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendContentReceipt(seq, consumer, messageId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendContentReceipt(seq, consumer, messageId);
  }
};

LineServiceClient.prototype.send_sendContentReceipt = function(seq, consumer, messageId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendContentReceipt', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendContentReceipt_args();
  args.seq = seq;
  args.consumer = consumer;
  args.messageId = messageId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendContentReceipt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendContentReceipt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendDummyPush = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendDummyPush();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendDummyPush();
  }
};

LineServiceClient.prototype.send_sendDummyPush = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendDummyPush', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendDummyPush_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendDummyPush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendDummyPush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendEvent = function(seq, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendEvent(seq, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendEvent(seq, message);
  }
};

LineServiceClient.prototype.send_sendEvent = function(seq, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendEvent_args();
  args.seq = seq;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendEvent failed: unknown result');
};
LineServiceClient.prototype.sendMessage = function(seq, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessage(seq, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessage(seq, message);
  }
};

LineServiceClient.prototype.send_sendMessage = function(seq, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendMessage_args();
  args.seq = seq;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMessage failed: unknown result');
};
LineServiceClient.prototype.sendMessageIgnored = function(seq, consumer, messageIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessageIgnored(seq, consumer, messageIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessageIgnored(seq, consumer, messageIds);
  }
};

LineServiceClient.prototype.send_sendMessageIgnored = function(seq, consumer, messageIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessageIgnored', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendMessageIgnored_args();
  args.seq = seq;
  args.consumer = consumer;
  args.messageIds = messageIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendMessageIgnored = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendMessageIgnored_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendMessageReceipt = function(seq, consumer, messageIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessageReceipt(seq, consumer, messageIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessageReceipt(seq, consumer, messageIds);
  }
};

LineServiceClient.prototype.send_sendMessageReceipt = function(seq, consumer, messageIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessageReceipt', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendMessageReceipt_args();
  args.seq = seq;
  args.consumer = consumer;
  args.messageIds = messageIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendMessageReceipt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendMessageReceipt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.sendMessageToMyHome = function(seq, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendMessageToMyHome(seq, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendMessageToMyHome(seq, message);
  }
};

LineServiceClient.prototype.send_sendMessageToMyHome = function(seq, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendMessageToMyHome', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_sendMessageToMyHome_args();
  args.seq = seq;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_sendMessageToMyHome = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_sendMessageToMyHome_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendMessageToMyHome failed: unknown result');
};
LineServiceClient.prototype.setBuddyLocation = function(mid, index, location, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setBuddyLocation(mid, index, location);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setBuddyLocation(mid, index, location);
  }
};

LineServiceClient.prototype.send_setBuddyLocation = function(mid, index, location) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setBuddyLocation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_setBuddyLocation_args();
  args.mid = mid;
  args.index = index;
  args.location = location;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_setBuddyLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_setBuddyLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.setIdentityCredential = function(provider, identifier, verifier, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setIdentityCredential(provider, identifier, verifier);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setIdentityCredential(provider, identifier, verifier);
  }
};

LineServiceClient.prototype.send_setIdentityCredential = function(provider, identifier, verifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_setIdentityCredential_args();
  args.provider = provider;
  args.identifier = identifier;
  args.verifier = verifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_setIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_setIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.setNotificationsEnabled = function(reqSeq, type, target, enablement, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setNotificationsEnabled(reqSeq, type, target, enablement);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setNotificationsEnabled(reqSeq, type, target, enablement);
  }
};

LineServiceClient.prototype.send_setNotificationsEnabled = function(reqSeq, type, target, enablement) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setNotificationsEnabled', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_setNotificationsEnabled_args();
  args.reqSeq = reqSeq;
  args.type = type;
  args.target = target;
  args.enablement = enablement;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_setNotificationsEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_setNotificationsEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.startUpdateVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
  }
};

LineServiceClient.prototype.send_startUpdateVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startUpdateVerification', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_startUpdateVerification_args();
  args.region = region;
  args.carrier = carrier;
  args.phone = phone;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.networkCode = networkCode;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_startUpdateVerification = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_startUpdateVerification_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startUpdateVerification failed: unknown result');
};
LineServiceClient.prototype.startVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale);
  }
};

LineServiceClient.prototype.send_startVerification = function(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startVerification', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_startVerification_args();
  args.region = region;
  args.carrier = carrier;
  args.phone = phone;
  args.udidHash = udidHash;
  args.deviceInfo = deviceInfo;
  args.networkCode = networkCode;
  args.mid = mid;
  args.locale = locale;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_startVerification = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_startVerification_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startVerification failed: unknown result');
};
LineServiceClient.prototype.storeUpdateProfileAttribute = function(seq, profileAttribute, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeUpdateProfileAttribute(seq, profileAttribute, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeUpdateProfileAttribute(seq, profileAttribute, value);
  }
};

LineServiceClient.prototype.send_storeUpdateProfileAttribute = function(seq, profileAttribute, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeUpdateProfileAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_storeUpdateProfileAttribute_args();
  args.seq = seq;
  args.profileAttribute = profileAttribute;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_storeUpdateProfileAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_storeUpdateProfileAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.syncContactBySnsIds = function(reqSeq, modifications, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_syncContactBySnsIds(reqSeq, modifications);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_syncContactBySnsIds(reqSeq, modifications);
  }
};

LineServiceClient.prototype.send_syncContactBySnsIds = function(reqSeq, modifications) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('syncContactBySnsIds', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_syncContactBySnsIds_args();
  args.reqSeq = reqSeq;
  args.modifications = modifications;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_syncContactBySnsIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_syncContactBySnsIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('syncContactBySnsIds failed: unknown result');
};
LineServiceClient.prototype.syncContacts = function(reqSeq, localContacts, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_syncContacts(reqSeq, localContacts);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_syncContacts(reqSeq, localContacts);
  }
};

LineServiceClient.prototype.send_syncContacts = function(reqSeq, localContacts) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('syncContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_syncContacts_args();
  args.reqSeq = reqSeq;
  args.localContacts = localContacts;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_syncContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_syncContacts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('syncContacts failed: unknown result');
};
LineServiceClient.prototype.trySendMessage = function(seq, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_trySendMessage(seq, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_trySendMessage(seq, message);
  }
};

LineServiceClient.prototype.send_trySendMessage = function(seq, message) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('trySendMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_trySendMessage_args();
  args.seq = seq;
  args.message = message;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_trySendMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_trySendMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('trySendMessage failed: unknown result');
};
LineServiceClient.prototype.unblockContact = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unblockContact(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unblockContact(reqSeq, id);
  }
};

LineServiceClient.prototype.send_unblockContact = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unblockContact', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unblockContact_args();
  args.reqSeq = reqSeq;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unblockContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unblockContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.unblockRecommendation = function(reqSeq, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unblockRecommendation(reqSeq, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unblockRecommendation(reqSeq, id);
  }
};

LineServiceClient.prototype.send_unblockRecommendation = function(reqSeq, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unblockRecommendation', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unblockRecommendation_args();
  args.reqSeq = reqSeq;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unblockRecommendation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unblockRecommendation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.unregisterUserAndDevice = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregisterUserAndDevice();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregisterUserAndDevice();
  }
};

LineServiceClient.prototype.send_unregisterUserAndDevice = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unregisterUserAndDevice', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_unregisterUserAndDevice_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_unregisterUserAndDevice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_unregisterUserAndDevice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unregisterUserAndDevice failed: unknown result');
};
LineServiceClient.prototype.updateApnsDeviceToken = function(apnsDeviceToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateApnsDeviceToken(apnsDeviceToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateApnsDeviceToken(apnsDeviceToken);
  }
};

LineServiceClient.prototype.send_updateApnsDeviceToken = function(apnsDeviceToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateApnsDeviceToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateApnsDeviceToken_args();
  args.apnsDeviceToken = apnsDeviceToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateApnsDeviceToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateApnsDeviceToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateBuddySetting = function(key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBuddySetting(key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBuddySetting(key, value);
  }
};

LineServiceClient.prototype.send_updateBuddySetting = function(key, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBuddySetting', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateBuddySetting_args();
  args.key = key;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateBuddySetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateBuddySetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateC2DMRegistrationId = function(registrationId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateC2DMRegistrationId(registrationId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateC2DMRegistrationId(registrationId);
  }
};

LineServiceClient.prototype.send_updateC2DMRegistrationId = function(registrationId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateC2DMRegistrationId', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateC2DMRegistrationId_args();
  args.registrationId = registrationId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateC2DMRegistrationId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateC2DMRegistrationId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateContactSetting = function(reqSeq, mid, flag, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateContactSetting(reqSeq, mid, flag, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateContactSetting(reqSeq, mid, flag, value);
  }
};

LineServiceClient.prototype.send_updateContactSetting = function(reqSeq, mid, flag, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateContactSetting', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateContactSetting_args();
  args.reqSeq = reqSeq;
  args.mid = mid;
  args.flag = flag;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateContactSetting = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateContactSetting_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateCustomModeSettings = function(customMode, paramMap, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateCustomModeSettings(customMode, paramMap);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateCustomModeSettings(customMode, paramMap);
  }
};

LineServiceClient.prototype.send_updateCustomModeSettings = function(customMode, paramMap) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateCustomModeSettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateCustomModeSettings_args();
  args.customMode = customMode;
  args.paramMap = paramMap;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateCustomModeSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateCustomModeSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateDeviceInfo = function(deviceUid, deviceInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDeviceInfo(deviceUid, deviceInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDeviceInfo(deviceUid, deviceInfo);
  }
};

LineServiceClient.prototype.send_updateDeviceInfo = function(deviceUid, deviceInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDeviceInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateDeviceInfo_args();
  args.deviceUid = deviceUid;
  args.deviceInfo = deviceInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateDeviceInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateDeviceInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateGroup = function(reqSeq, group, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateGroup(reqSeq, group);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateGroup(reqSeq, group);
  }
};

LineServiceClient.prototype.send_updateGroup = function(reqSeq, group) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateGroup_args();
  args.reqSeq = reqSeq;
  args.group = group;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateNotificationToken = function(type, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateNotificationToken(type, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateNotificationToken(type, token);
  }
};

LineServiceClient.prototype.send_updateNotificationToken = function(type, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateNotificationToken', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateNotificationToken_args();
  args.type = type;
  args.token = token;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateNotificationToken = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateNotificationToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateNotificationTokenWithBytes = function(type, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateNotificationTokenWithBytes(type, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateNotificationTokenWithBytes(type, token);
  }
};

LineServiceClient.prototype.send_updateNotificationTokenWithBytes = function(type, token) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateNotificationTokenWithBytes', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateNotificationTokenWithBytes_args();
  args.type = type;
  args.token = token;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateNotificationTokenWithBytes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateNotificationTokenWithBytes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateProfile = function(reqSeq, profile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateProfile(reqSeq, profile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateProfile(reqSeq, profile);
  }
};

LineServiceClient.prototype.send_updateProfile = function(reqSeq, profile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateProfile', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateProfile_args();
  args.reqSeq = reqSeq;
  args.profile = profile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateProfileAttribute = function(reqSeq, attr, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateProfileAttribute(reqSeq, attr, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateProfileAttribute(reqSeq, attr, value);
  }
};

LineServiceClient.prototype.send_updateProfileAttribute = function(reqSeq, attr, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateProfileAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateProfileAttribute_args();
  args.reqSeq = reqSeq;
  args.attr = attr;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateProfileAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateProfileAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateRegion = function(region, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateRegion(region);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateRegion(region);
  }
};

LineServiceClient.prototype.send_updateRegion = function(region) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateRegion', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateRegion_args();
  args.region = region;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateRegion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateRegion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateSettings = function(reqSeq, settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSettings(reqSeq, settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSettings(reqSeq, settings);
  }
};

LineServiceClient.prototype.send_updateSettings = function(reqSeq, settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSettings', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateSettings_args();
  args.reqSeq = reqSeq;
  args.settings = settings;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateSettings_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateSettings2 = function(reqSeq, settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSettings2(reqSeq, settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSettings2(reqSeq, settings);
  }
};

LineServiceClient.prototype.send_updateSettings2 = function(reqSeq, settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSettings2', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateSettings2_args();
  args.reqSeq = reqSeq;
  args.settings = settings;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateSettings2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateSettings2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSettings2 failed: unknown result');
};
LineServiceClient.prototype.updateSettingsAttribute = function(reqSeq, attr, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSettingsAttribute(reqSeq, attr, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSettingsAttribute(reqSeq, attr, value);
  }
};

LineServiceClient.prototype.send_updateSettingsAttribute = function(reqSeq, attr, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSettingsAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateSettingsAttribute_args();
  args.reqSeq = reqSeq;
  args.attr = attr;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateSettingsAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateSettingsAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.updateSettingsAttributes = function(reqSeq, attrBitset, settings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSettingsAttributes(reqSeq, attrBitset, settings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSettingsAttributes(reqSeq, attrBitset, settings);
  }
};

LineServiceClient.prototype.send_updateSettingsAttributes = function(reqSeq, attrBitset, settings) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSettingsAttributes', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_updateSettingsAttributes_args();
  args.reqSeq = reqSeq;
  args.attrBitset = attrBitset;
  args.settings = settings;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_updateSettingsAttributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_updateSettingsAttributes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSettingsAttributes failed: unknown result');
};
LineServiceClient.prototype.verifyIdentityCredential = function(identityProvider, identifier, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyIdentityCredential(identityProvider, identifier, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyIdentityCredential(identityProvider, identifier, password);
  }
};

LineServiceClient.prototype.send_verifyIdentityCredential = function(identityProvider, identifier, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyIdentityCredential', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_verifyIdentityCredential_args();
  args.identityProvider = identityProvider;
  args.identifier = identifier;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_verifyIdentityCredential = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_verifyIdentityCredential_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceClient.prototype.verifyIdentityCredentialWithResult = function(identityCredential, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyIdentityCredentialWithResult(identityCredential);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyIdentityCredentialWithResult(identityCredential);
  }
};

LineServiceClient.prototype.send_verifyIdentityCredentialWithResult = function(identityCredential) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyIdentityCredentialWithResult', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_verifyIdentityCredentialWithResult_args();
  args.identityCredential = identityCredential;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_verifyIdentityCredentialWithResult = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_verifyIdentityCredentialWithResult_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyIdentityCredentialWithResult failed: unknown result');
};
LineServiceClient.prototype.verifyPhone = function(sessionId, pinCode, udidHash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyPhone(sessionId, pinCode, udidHash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyPhone(sessionId, pinCode, udidHash);
  }
};

LineServiceClient.prototype.send_verifyPhone = function(sessionId, pinCode, udidHash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyPhone', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_verifyPhone_args();
  args.sessionId = sessionId;
  args.pinCode = pinCode;
  args.udidHash = udidHash;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_verifyPhone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_verifyPhone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyPhone failed: unknown result');
};
LineServiceClient.prototype.verifyQrcode = function(verifier, pinCode, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyQrcode(verifier, pinCode);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyQrcode(verifier, pinCode);
  }
};

LineServiceClient.prototype.send_verifyQrcode = function(verifier, pinCode) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyQrcode', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_verifyQrcode_args();
  args.verifier = verifier;
  args.pinCode = pinCode;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_verifyQrcode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_verifyQrcode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyQrcode failed: unknown result');
};
LineServiceClient.prototype.notify = function(event, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_notify(event);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_notify(event);
  }
};

LineServiceClient.prototype.send_notify = function(event) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('notify', Thrift.MessageType.CALL, this.seqid());
  var args = new LineService_notify_args();
  args.event = event;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

LineServiceClient.prototype.recv_notify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LineService_notify_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
LineServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
LineServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

LineServiceProcessor.prototype.process_getRSAKey = function(seqid, input, output) {
  var args = new LineService_getRSAKey_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRSAKey.length === 0) {
    Q.fcall(this._handler.getRSAKey)
      .then(function(result) {
        var result = new LineService_getRSAKey_result({success: result});
        output.writeMessageBegin("getRSAKey", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getRSAKey_result(err);
          output.writeMessageBegin("getRSAKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRSAKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRSAKey(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getRSAKey_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRSAKey", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRSAKey", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyEmailConfirmationResult = function(seqid, input, output) {
  var args = new LineService_notifyEmailConfirmationResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyEmailConfirmationResult.length === 1) {
    Q.fcall(this._handler.notifyEmailConfirmationResult, args.parameterMap)
      .then(function(result) {
        var result = new LineService_notifyEmailConfirmationResult_result({success: result});
        output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyEmailConfirmationResult_result(err);
          output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyEmailConfirmationResult(args.parameterMap, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyEmailConfirmationResult_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyEmailConfirmationResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerVirtualAccount = function(seqid, input, output) {
  var args = new LineService_registerVirtualAccount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerVirtualAccount.length === 3) {
    Q.fcall(this._handler.registerVirtualAccount, args.locale, args.encryptedVirtualUserId, args.encryptedPassword)
      .then(function(result) {
        var result = new LineService_registerVirtualAccount_result({success: result});
        output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerVirtualAccount_result(err);
          output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerVirtualAccount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_requestVirtualAccountPasswordChange = function(seqid, input, output) {
  var args = new LineService_requestVirtualAccountPasswordChange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestVirtualAccountPasswordChange.length === 4) {
    Q.fcall(this._handler.requestVirtualAccountPasswordChange, args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword)
      .then(function(result) {
        var result = new LineService_requestVirtualAccountPasswordChange_result({success: result});
        output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_requestVirtualAccountPasswordChange_result(err);
          output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_requestVirtualAccountPasswordChange_result((err != null ? err : {success: result}));
        output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestVirtualAccountPasswordChange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_requestVirtualAccountPasswordSet = function(seqid, input, output) {
  var args = new LineService_requestVirtualAccountPasswordSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestVirtualAccountPasswordSet.length === 3) {
    Q.fcall(this._handler.requestVirtualAccountPasswordSet, args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword)
      .then(function(result) {
        var result = new LineService_requestVirtualAccountPasswordSet_result({success: result});
        output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_requestVirtualAccountPasswordSet_result(err);
          output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_requestVirtualAccountPasswordSet_result((err != null ? err : {success: result}));
        output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestVirtualAccountPasswordSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unregisterVirtualAccount = function(seqid, input, output) {
  var args = new LineService_unregisterVirtualAccount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterVirtualAccount.length === 1) {
    Q.fcall(this._handler.unregisterVirtualAccount, args.virtualMid)
      .then(function(result) {
        var result = new LineService_unregisterVirtualAccount_result({success: result});
        output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unregisterVirtualAccount_result(err);
          output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterVirtualAccount(args.virtualMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unregisterVirtualAccount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterVirtualAccount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_checkUserAge = function(seqid, input, output) {
  var args = new LineService_checkUserAge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkUserAge.length === 4) {
    Q.fcall(this._handler.checkUserAge, args.carrier, args.sessionId, args.verifier, args.standardAge)
      .then(function(result) {
        var result = new LineService_checkUserAge_result({success: result});
        output.writeMessageBegin("checkUserAge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_checkUserAge_result(err);
          output.writeMessageBegin("checkUserAge", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUserAge", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_checkUserAge_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkUserAge", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkUserAge", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_checkUserAgeWithDocomo = function(seqid, input, output) {
  var args = new LineService_checkUserAgeWithDocomo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkUserAgeWithDocomo.length === 3) {
    Q.fcall(this._handler.checkUserAgeWithDocomo, args.openIdRedirectUrl, args.standardAge, args.verifier)
      .then(function(result) {
        var result = new LineService_checkUserAgeWithDocomo_result({success: result});
        output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_checkUserAgeWithDocomo_result(err);
          output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_checkUserAgeWithDocomo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkUserAgeWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_retrieveOpenIdAuthUrlWithDocomo = function(seqid, input, output) {
  var args = new LineService_retrieveOpenIdAuthUrlWithDocomo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.retrieveOpenIdAuthUrlWithDocomo.length === 0) {
    Q.fcall(this._handler.retrieveOpenIdAuthUrlWithDocomo)
      .then(function(result) {
        var result = new LineService_retrieveOpenIdAuthUrlWithDocomo_result({success: result});
        output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_retrieveOpenIdAuthUrlWithDocomo_result(err);
          output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.retrieveOpenIdAuthUrlWithDocomo(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_retrieveOpenIdAuthUrlWithDocomo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("retrieveOpenIdAuthUrlWithDocomo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_retrieveRequestToken = function(seqid, input, output) {
  var args = new LineService_retrieveRequestToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.retrieveRequestToken.length === 1) {
    Q.fcall(this._handler.retrieveRequestToken, args.carrier)
      .then(function(result) {
        var result = new LineService_retrieveRequestToken_result({success: result});
        output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_retrieveRequestToken_result(err);
          output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.retrieveRequestToken(args.carrier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_retrieveRequestToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("retrieveRequestToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_addBuddyMember = function(seqid, input, output) {
  var args = new LineService_addBuddyMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addBuddyMember.length === 2) {
    Q.fcall(this._handler.addBuddyMember, args.requestId, args.userMid)
      .then(function(result) {
        var result = new LineService_addBuddyMember_result({success: result});
        output.writeMessageBegin("addBuddyMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_addBuddyMember_result(err);
          output.writeMessageBegin("addBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addBuddyMember(args.requestId, args.userMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_addBuddyMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addBuddyMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_addBuddyMembers = function(seqid, input, output) {
  var args = new LineService_addBuddyMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addBuddyMembers.length === 2) {
    Q.fcall(this._handler.addBuddyMembers, args.requestId, args.userMids)
      .then(function(result) {
        var result = new LineService_addBuddyMembers_result({success: result});
        output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_addBuddyMembers_result(err);
          output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addBuddyMembers(args.requestId, args.userMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_addBuddyMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_blockBuddyMember = function(seqid, input, output) {
  var args = new LineService_blockBuddyMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.blockBuddyMember.length === 2) {
    Q.fcall(this._handler.blockBuddyMember, args.requestId, args.mid)
      .then(function(result) {
        var result = new LineService_blockBuddyMember_result({success: result});
        output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_blockBuddyMember_result(err);
          output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.blockBuddyMember(args.requestId, args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_blockBuddyMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("blockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_commitSendMessagesToAll = function(seqid, input, output) {
  var args = new LineService_commitSendMessagesToAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.commitSendMessagesToAll.length === 1) {
    Q.fcall(this._handler.commitSendMessagesToAll, args.requestIdList)
      .then(function(result) {
        var result = new LineService_commitSendMessagesToAll_result({success: result});
        output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_commitSendMessagesToAll_result(err);
          output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.commitSendMessagesToAll(args.requestIdList, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_commitSendMessagesToAll_result((err != null ? err : {success: result}));
        output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("commitSendMessagesToAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_commitSendMessagesToMids = function(seqid, input, output) {
  var args = new LineService_commitSendMessagesToMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.commitSendMessagesToMids.length === 2) {
    Q.fcall(this._handler.commitSendMessagesToMids, args.requestIdList, args.mids)
      .then(function(result) {
        var result = new LineService_commitSendMessagesToMids_result({success: result});
        output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_commitSendMessagesToMids_result(err);
          output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.commitSendMessagesToMids(args.requestIdList, args.mids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_commitSendMessagesToMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("commitSendMessagesToMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_containsBuddyMember = function(seqid, input, output) {
  var args = new LineService_containsBuddyMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.containsBuddyMember.length === 2) {
    Q.fcall(this._handler.containsBuddyMember, args.requestId, args.userMid)
      .then(function(result) {
        var result = new LineService_containsBuddyMember_result({success: result});
        output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_containsBuddyMember_result(err);
          output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.containsBuddyMember(args.requestId, args.userMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_containsBuddyMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("containsBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_downloadMessageContent = function(seqid, input, output) {
  var args = new LineService_downloadMessageContent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.downloadMessageContent.length === 2) {
    Q.fcall(this._handler.downloadMessageContent, args.requestId, args.messageId)
      .then(function(result) {
        var result = new LineService_downloadMessageContent_result({success: result});
        output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_downloadMessageContent_result(err);
          output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.downloadMessageContent(args.requestId, args.messageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_downloadMessageContent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("downloadMessageContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_downloadMessageContentPreview = function(seqid, input, output) {
  var args = new LineService_downloadMessageContentPreview_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.downloadMessageContentPreview.length === 2) {
    Q.fcall(this._handler.downloadMessageContentPreview, args.requestId, args.messageId)
      .then(function(result) {
        var result = new LineService_downloadMessageContentPreview_result({success: result});
        output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_downloadMessageContentPreview_result(err);
          output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.downloadMessageContentPreview(args.requestId, args.messageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_downloadMessageContentPreview_result((err != null ? err : {success: result}));
        output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("downloadMessageContentPreview", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_downloadProfileImage = function(seqid, input, output) {
  var args = new LineService_downloadProfileImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.downloadProfileImage.length === 1) {
    Q.fcall(this._handler.downloadProfileImage, args.requestId)
      .then(function(result) {
        var result = new LineService_downloadProfileImage_result({success: result});
        output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_downloadProfileImage_result(err);
          output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.downloadProfileImage(args.requestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_downloadProfileImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("downloadProfileImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_downloadProfileImagePreview = function(seqid, input, output) {
  var args = new LineService_downloadProfileImagePreview_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.downloadProfileImagePreview.length === 1) {
    Q.fcall(this._handler.downloadProfileImagePreview, args.requestId)
      .then(function(result) {
        var result = new LineService_downloadProfileImagePreview_result({success: result});
        output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_downloadProfileImagePreview_result(err);
          output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.downloadProfileImagePreview(args.requestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_downloadProfileImagePreview_result((err != null ? err : {success: result}));
        output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("downloadProfileImagePreview", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getActiveMemberCountByBuddyMid = function(seqid, input, output) {
  var args = new LineService_getActiveMemberCountByBuddyMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActiveMemberCountByBuddyMid.length === 1) {
    Q.fcall(this._handler.getActiveMemberCountByBuddyMid, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getActiveMemberCountByBuddyMid_result({success: result});
        output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getActiveMemberCountByBuddyMid_result(err);
          output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActiveMemberCountByBuddyMid(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getActiveMemberCountByBuddyMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActiveMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getActiveMemberMidsByBuddyMid = function(seqid, input, output) {
  var args = new LineService_getActiveMemberMidsByBuddyMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActiveMemberMidsByBuddyMid.length === 1) {
    Q.fcall(this._handler.getActiveMemberMidsByBuddyMid, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getActiveMemberMidsByBuddyMid_result({success: result});
        output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getActiveMemberMidsByBuddyMid_result(err);
          output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActiveMemberMidsByBuddyMid(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getActiveMemberMidsByBuddyMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActiveMemberMidsByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getAllBuddyMembers = function(seqid, input, output) {
  var args = new LineService_getAllBuddyMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllBuddyMembers.length === 0) {
    Q.fcall(this._handler.getAllBuddyMembers)
      .then(function(result) {
        var result = new LineService_getAllBuddyMembers_result({success: result});
        output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getAllBuddyMembers_result(err);
          output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllBuddyMembers(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getAllBuddyMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBlockedBuddyMembers = function(seqid, input, output) {
  var args = new LineService_getBlockedBuddyMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlockedBuddyMembers.length === 0) {
    Q.fcall(this._handler.getBlockedBuddyMembers)
      .then(function(result) {
        var result = new LineService_getBlockedBuddyMembers_result({success: result});
        output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBlockedBuddyMembers_result(err);
          output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlockedBuddyMembers(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBlockedBuddyMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBlockedBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBlockerCountByBuddyMid = function(seqid, input, output) {
  var args = new LineService_getBlockerCountByBuddyMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlockerCountByBuddyMid.length === 1) {
    Q.fcall(this._handler.getBlockerCountByBuddyMid, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getBlockerCountByBuddyMid_result({success: result});
        output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBlockerCountByBuddyMid_result(err);
          output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlockerCountByBuddyMid(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBlockerCountByBuddyMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBlockerCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyDetailByMid = function(seqid, input, output) {
  var args = new LineService_getBuddyDetailByMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyDetailByMid.length === 1) {
    Q.fcall(this._handler.getBuddyDetailByMid, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getBuddyDetailByMid_result({success: result});
        output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyDetailByMid_result(err);
          output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyDetailByMid(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyDetailByMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyDetailByMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyProfile = function(seqid, input, output) {
  var args = new LineService_getBuddyProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyProfile.length === 0) {
    Q.fcall(this._handler.getBuddyProfile)
      .then(function(result) {
        var result = new LineService_getBuddyProfile_result({success: result});
        output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyProfile_result(err);
          output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyProfile(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getContactTicket = function(seqid, input, output) {
  var args = new LineService_getContactTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactTicket.length === 0) {
    Q.fcall(this._handler.getContactTicket)
      .then(function(result) {
        var result = new LineService_getContactTicket_result({success: result});
        output.writeMessageBegin("getContactTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getContactTicket_result(err);
          output.writeMessageBegin("getContactTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactTicket(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getContactTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContactTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContactTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMemberCountByBuddyMid = function(seqid, input, output) {
  var args = new LineService_getMemberCountByBuddyMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMemberCountByBuddyMid.length === 1) {
    Q.fcall(this._handler.getMemberCountByBuddyMid, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getMemberCountByBuddyMid_result({success: result});
        output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMemberCountByBuddyMid_result(err);
          output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMemberCountByBuddyMid(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMemberCountByBuddyMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMemberCountByBuddyMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSendBuddyMessageResult = function(seqid, input, output) {
  var args = new LineService_getSendBuddyMessageResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSendBuddyMessageResult.length === 1) {
    Q.fcall(this._handler.getSendBuddyMessageResult, args.sendBuddyMessageRequestId)
      .then(function(result) {
        var result = new LineService_getSendBuddyMessageResult_result({success: result});
        output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSendBuddyMessageResult_result(err);
          output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSendBuddyMessageResult(args.sendBuddyMessageRequestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSendBuddyMessageResult_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSendBuddyMessageResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSetBuddyOnAirResult = function(seqid, input, output) {
  var args = new LineService_getSetBuddyOnAirResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSetBuddyOnAirResult.length === 1) {
    Q.fcall(this._handler.getSetBuddyOnAirResult, args.setBuddyOnAirRequestId)
      .then(function(result) {
        var result = new LineService_getSetBuddyOnAirResult_result({success: result});
        output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSetBuddyOnAirResult_result(err);
          output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSetBuddyOnAirResult(args.setBuddyOnAirRequestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSetBuddyOnAirResult_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSetBuddyOnAirResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUpdateBuddyProfileResult = function(seqid, input, output) {
  var args = new LineService_getUpdateBuddyProfileResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUpdateBuddyProfileResult.length === 1) {
    Q.fcall(this._handler.getUpdateBuddyProfileResult, args.updateBuddyProfileRequestId)
      .then(function(result) {
        var result = new LineService_getUpdateBuddyProfileResult_result({success: result});
        output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUpdateBuddyProfileResult_result(err);
          output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUpdateBuddyProfileResult(args.updateBuddyProfileRequestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUpdateBuddyProfileResult_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUpdateBuddyProfileResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_isBuddyOnAirByMid = function(seqid, input, output) {
  var args = new LineService_isBuddyOnAirByMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isBuddyOnAirByMid.length === 1) {
    Q.fcall(this._handler.isBuddyOnAirByMid, args.buddyMid)
      .then(function(result) {
        var result = new LineService_isBuddyOnAirByMid_result({success: result});
        output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_isBuddyOnAirByMid_result(err);
          output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isBuddyOnAirByMid(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_isBuddyOnAirByMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isBuddyOnAirByMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_linkAndSendBuddyContentMessageToAllAsync = function(seqid, input, output) {
  var args = new LineService_linkAndSendBuddyContentMessageToAllAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.linkAndSendBuddyContentMessageToAllAsync.length === 3) {
    Q.fcall(this._handler.linkAndSendBuddyContentMessageToAllAsync, args.requestId, args.msg, args.sourceContentId)
      .then(function(result) {
        var result = new LineService_linkAndSendBuddyContentMessageToAllAsync_result({success: result});
        output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_linkAndSendBuddyContentMessageToAllAsync_result(err);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.linkAndSendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.sourceContentId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_linkAndSendBuddyContentMessageToAllAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("linkAndSendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_linkAndSendBuddyContentMessageToMids = function(seqid, input, output) {
  var args = new LineService_linkAndSendBuddyContentMessageToMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.linkAndSendBuddyContentMessageToMids.length === 4) {
    Q.fcall(this._handler.linkAndSendBuddyContentMessageToMids, args.requestId, args.msg, args.sourceContentId, args.mids)
      .then(function(result) {
        var result = new LineService_linkAndSendBuddyContentMessageToMids_result({success: result});
        output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_linkAndSendBuddyContentMessageToMids_result(err);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.linkAndSendBuddyContentMessageToMids(args.requestId, args.msg, args.sourceContentId, args.mids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_linkAndSendBuddyContentMessageToMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("linkAndSendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyBuddyBlocked = function(seqid, input, output) {
  var args = new LineService_notifyBuddyBlocked_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyBuddyBlocked.length === 2) {
    Q.fcall(this._handler.notifyBuddyBlocked, args.buddyMid, args.blockerMid)
      .then(function(result) {
        var result = new LineService_notifyBuddyBlocked_result({success: result});
        output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyBuddyBlocked_result(err);
          output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyBuddyBlocked(args.buddyMid, args.blockerMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyBuddyBlocked_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyBuddyBlocked", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyBuddyUnblocked = function(seqid, input, output) {
  var args = new LineService_notifyBuddyUnblocked_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyBuddyUnblocked.length === 2) {
    Q.fcall(this._handler.notifyBuddyUnblocked, args.buddyMid, args.blockerMid)
      .then(function(result) {
        var result = new LineService_notifyBuddyUnblocked_result({success: result});
        output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyBuddyUnblocked_result(err);
          output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyBuddyUnblocked(args.buddyMid, args.blockerMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyBuddyUnblocked_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyBuddyUnblocked", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerBuddy = function(seqid, input, output) {
  var args = new LineService_registerBuddy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerBuddy.length === 6) {
    Q.fcall(this._handler.registerBuddy, args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings)
      .then(function(result) {
        var result = new LineService_registerBuddy_result({success: result});
        output.writeMessageBegin("registerBuddy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerBuddy_result(err);
          output.writeMessageBegin("registerBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerBuddy(args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerBuddy_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerBuddy", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerBuddy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerBuddyAdmin = function(seqid, input, output) {
  var args = new LineService_registerBuddyAdmin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerBuddyAdmin.length === 5) {
    Q.fcall(this._handler.registerBuddyAdmin, args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture)
      .then(function(result) {
        var result = new LineService_registerBuddyAdmin_result({success: result});
        output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerBuddyAdmin_result(err);
          output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerBuddyAdmin(args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerBuddyAdmin_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reissueContactTicket = function(seqid, input, output) {
  var args = new LineService_reissueContactTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reissueContactTicket.length === 2) {
    Q.fcall(this._handler.reissueContactTicket, args.expirationTime, args.maxUseCount)
      .then(function(result) {
        var result = new LineService_reissueContactTicket_result({success: result});
        output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reissueContactTicket_result(err);
          output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reissueContactTicket(args.expirationTime, args.maxUseCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reissueContactTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reissueContactTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeBuddyMember = function(seqid, input, output) {
  var args = new LineService_removeBuddyMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeBuddyMember.length === 2) {
    Q.fcall(this._handler.removeBuddyMember, args.requestId, args.userMid)
      .then(function(result) {
        var result = new LineService_removeBuddyMember_result({success: result});
        output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeBuddyMember_result(err);
          output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeBuddyMember(args.requestId, args.userMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeBuddyMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeBuddyMembers = function(seqid, input, output) {
  var args = new LineService_removeBuddyMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeBuddyMembers.length === 2) {
    Q.fcall(this._handler.removeBuddyMembers, args.requestId, args.userMids)
      .then(function(result) {
        var result = new LineService_removeBuddyMembers_result({success: result});
        output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeBuddyMembers_result(err);
          output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeBuddyMembers(args.requestId, args.userMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeBuddyMembers_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeBuddyMembers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyContentMessageToAll = function(seqid, input, output) {
  var args = new LineService_sendBuddyContentMessageToAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyContentMessageToAll.length === 3) {
    Q.fcall(this._handler.sendBuddyContentMessageToAll, args.requestId, args.msg, args.content)
      .then(function(result) {
        var result = new LineService_sendBuddyContentMessageToAll_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyContentMessageToAll_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyContentMessageToAll(args.requestId, args.msg, args.content, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyContentMessageToAll_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyContentMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyContentMessageToAllAsync = function(seqid, input, output) {
  var args = new LineService_sendBuddyContentMessageToAllAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyContentMessageToAllAsync.length === 3) {
    Q.fcall(this._handler.sendBuddyContentMessageToAllAsync, args.requestId, args.msg, args.content)
      .then(function(result) {
        var result = new LineService_sendBuddyContentMessageToAllAsync_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyContentMessageToAllAsync_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.content, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyContentMessageToAllAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyContentMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyContentMessageToMids = function(seqid, input, output) {
  var args = new LineService_sendBuddyContentMessageToMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyContentMessageToMids.length === 4) {
    Q.fcall(this._handler.sendBuddyContentMessageToMids, args.requestId, args.msg, args.content, args.mids)
      .then(function(result) {
        var result = new LineService_sendBuddyContentMessageToMids_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyContentMessageToMids_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyContentMessageToMids(args.requestId, args.msg, args.content, args.mids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyContentMessageToMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyContentMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyContentMessageToMidsAsync = function(seqid, input, output) {
  var args = new LineService_sendBuddyContentMessageToMidsAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyContentMessageToMidsAsync.length === 4) {
    Q.fcall(this._handler.sendBuddyContentMessageToMidsAsync, args.requestId, args.msg, args.content, args.mids)
      .then(function(result) {
        var result = new LineService_sendBuddyContentMessageToMidsAsync_result({success: result});
        output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyContentMessageToMidsAsync_result(err);
          output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyContentMessageToMidsAsync(args.requestId, args.msg, args.content, args.mids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyContentMessageToMidsAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyContentMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyMessageToAll = function(seqid, input, output) {
  var args = new LineService_sendBuddyMessageToAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyMessageToAll.length === 2) {
    Q.fcall(this._handler.sendBuddyMessageToAll, args.requestId, args.msg)
      .then(function(result) {
        var result = new LineService_sendBuddyMessageToAll_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyMessageToAll_result(err);
          output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyMessageToAll(args.requestId, args.msg, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyMessageToAll_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyMessageToAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyMessageToAllAsync = function(seqid, input, output) {
  var args = new LineService_sendBuddyMessageToAllAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyMessageToAllAsync.length === 2) {
    Q.fcall(this._handler.sendBuddyMessageToAllAsync, args.requestId, args.msg)
      .then(function(result) {
        var result = new LineService_sendBuddyMessageToAllAsync_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyMessageToAllAsync_result(err);
          output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyMessageToAllAsync(args.requestId, args.msg, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyMessageToAllAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyMessageToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyMessageToMids = function(seqid, input, output) {
  var args = new LineService_sendBuddyMessageToMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyMessageToMids.length === 3) {
    Q.fcall(this._handler.sendBuddyMessageToMids, args.requestId, args.msg, args.mids)
      .then(function(result) {
        var result = new LineService_sendBuddyMessageToMids_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyMessageToMids_result(err);
          output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyMessageToMids(args.requestId, args.msg, args.mids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyMessageToMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyMessageToMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendBuddyMessageToMidsAsync = function(seqid, input, output) {
  var args = new LineService_sendBuddyMessageToMidsAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendBuddyMessageToMidsAsync.length === 3) {
    Q.fcall(this._handler.sendBuddyMessageToMidsAsync, args.requestId, args.msg, args.mids)
      .then(function(result) {
        var result = new LineService_sendBuddyMessageToMidsAsync_result({success: result});
        output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendBuddyMessageToMidsAsync_result(err);
          output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendBuddyMessageToMidsAsync(args.requestId, args.msg, args.mids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendBuddyMessageToMidsAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendBuddyMessageToMidsAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendIndividualEventToAllAsync = function(seqid, input, output) {
  var args = new LineService_sendIndividualEventToAllAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendIndividualEventToAllAsync.length === 3) {
    Q.fcall(this._handler.sendIndividualEventToAllAsync, args.requestId, args.buddyMid, args.notificationStatus)
      .then(function(result) {
        var result = new LineService_sendIndividualEventToAllAsync_result({success: result});
        output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendIndividualEventToAllAsync_result(err);
          output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendIndividualEventToAllAsync(args.requestId, args.buddyMid, args.notificationStatus, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendIndividualEventToAllAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendIndividualEventToAllAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_setBuddyOnAir = function(seqid, input, output) {
  var args = new LineService_setBuddyOnAir_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBuddyOnAir.length === 2) {
    Q.fcall(this._handler.setBuddyOnAir, args.requestId, args.onAir)
      .then(function(result) {
        var result = new LineService_setBuddyOnAir_result({success: result});
        output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_setBuddyOnAir_result(err);
          output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setBuddyOnAir(args.requestId, args.onAir, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_setBuddyOnAir_result((err != null ? err : {success: result}));
        output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_setBuddyOnAirAsync = function(seqid, input, output) {
  var args = new LineService_setBuddyOnAirAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBuddyOnAirAsync.length === 2) {
    Q.fcall(this._handler.setBuddyOnAirAsync, args.requestId, args.onAir)
      .then(function(result) {
        var result = new LineService_setBuddyOnAirAsync_result({success: result});
        output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_setBuddyOnAirAsync_result(err);
          output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setBuddyOnAirAsync(args.requestId, args.onAir, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_setBuddyOnAirAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBuddyOnAirAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_storeMessage = function(seqid, input, output) {
  var args = new LineService_storeMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeMessage.length === 2) {
    Q.fcall(this._handler.storeMessage, args.requestId, args.messageRequest)
      .then(function(result) {
        var result = new LineService_storeMessage_result({success: result});
        output.writeMessageBegin("storeMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_storeMessage_result(err);
          output.writeMessageBegin("storeMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeMessage(args.requestId, args.messageRequest, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_storeMessage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unblockBuddyMember = function(seqid, input, output) {
  var args = new LineService_unblockBuddyMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unblockBuddyMember.length === 2) {
    Q.fcall(this._handler.unblockBuddyMember, args.requestId, args.mid)
      .then(function(result) {
        var result = new LineService_unblockBuddyMember_result({success: result});
        output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unblockBuddyMember_result(err);
          output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unblockBuddyMember(args.requestId, args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unblockBuddyMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unblockBuddyMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unregisterBuddy = function(seqid, input, output) {
  var args = new LineService_unregisterBuddy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterBuddy.length === 1) {
    Q.fcall(this._handler.unregisterBuddy, args.requestId)
      .then(function(result) {
        var result = new LineService_unregisterBuddy_result({success: result});
        output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unregisterBuddy_result(err);
          output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterBuddy(args.requestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unregisterBuddy_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterBuddy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unregisterBuddyAdmin = function(seqid, input, output) {
  var args = new LineService_unregisterBuddyAdmin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterBuddyAdmin.length === 1) {
    Q.fcall(this._handler.unregisterBuddyAdmin, args.requestId)
      .then(function(result) {
        var result = new LineService_unregisterBuddyAdmin_result({success: result});
        output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unregisterBuddyAdmin_result(err);
          output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterBuddyAdmin(args.requestId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unregisterBuddyAdmin_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterBuddyAdmin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddyAdminProfileAttribute = function(seqid, input, output) {
  var args = new LineService_updateBuddyAdminProfileAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddyAdminProfileAttribute.length === 2) {
    Q.fcall(this._handler.updateBuddyAdminProfileAttribute, args.requestId, args.attributes)
      .then(function(result) {
        var result = new LineService_updateBuddyAdminProfileAttribute_result({success: result});
        output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddyAdminProfileAttribute_result(err);
          output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddyAdminProfileAttribute(args.requestId, args.attributes, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddyAdminProfileAttribute_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddyAdminProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddyAdminProfileImage = function(seqid, input, output) {
  var args = new LineService_updateBuddyAdminProfileImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddyAdminProfileImage.length === 2) {
    Q.fcall(this._handler.updateBuddyAdminProfileImage, args.requestId, args.picture)
      .then(function(result) {
        var result = new LineService_updateBuddyAdminProfileImage_result({success: result});
        output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddyAdminProfileImage_result(err);
          output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddyAdminProfileImage(args.requestId, args.picture, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddyAdminProfileImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddyAdminProfileImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddyProfileAttributes = function(seqid, input, output) {
  var args = new LineService_updateBuddyProfileAttributes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddyProfileAttributes.length === 2) {
    Q.fcall(this._handler.updateBuddyProfileAttributes, args.requestId, args.attributes)
      .then(function(result) {
        var result = new LineService_updateBuddyProfileAttributes_result({success: result});
        output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddyProfileAttributes_result(err);
          output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddyProfileAttributes(args.requestId, args.attributes, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddyProfileAttributes_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddyProfileAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddyProfileAttributesAsync = function(seqid, input, output) {
  var args = new LineService_updateBuddyProfileAttributesAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddyProfileAttributesAsync.length === 2) {
    Q.fcall(this._handler.updateBuddyProfileAttributesAsync, args.requestId, args.attributes)
      .then(function(result) {
        var result = new LineService_updateBuddyProfileAttributesAsync_result({success: result});
        output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddyProfileAttributesAsync_result(err);
          output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddyProfileAttributesAsync(args.requestId, args.attributes, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddyProfileAttributesAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddyProfileAttributesAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddyProfileImage = function(seqid, input, output) {
  var args = new LineService_updateBuddyProfileImage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddyProfileImage.length === 2) {
    Q.fcall(this._handler.updateBuddyProfileImage, args.requestId, args.image)
      .then(function(result) {
        var result = new LineService_updateBuddyProfileImage_result({success: result});
        output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddyProfileImage_result(err);
          output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddyProfileImage(args.requestId, args.image, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddyProfileImage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddyProfileImage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddyProfileImageAsync = function(seqid, input, output) {
  var args = new LineService_updateBuddyProfileImageAsync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddyProfileImageAsync.length === 2) {
    Q.fcall(this._handler.updateBuddyProfileImageAsync, args.requestId, args.image)
      .then(function(result) {
        var result = new LineService_updateBuddyProfileImageAsync_result({success: result});
        output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddyProfileImageAsync_result(err);
          output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddyProfileImageAsync(args.requestId, args.image, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddyProfileImageAsync_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddyProfileImageAsync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddySearchId = function(seqid, input, output) {
  var args = new LineService_updateBuddySearchId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddySearchId.length === 2) {
    Q.fcall(this._handler.updateBuddySearchId, args.requestId, args.searchId)
      .then(function(result) {
        var result = new LineService_updateBuddySearchId_result({success: result});
        output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddySearchId_result(err);
          output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddySearchId(args.requestId, args.searchId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddySearchId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddySearchId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddySettings = function(seqid, input, output) {
  var args = new LineService_updateBuddySettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddySettings.length === 1) {
    Q.fcall(this._handler.updateBuddySettings, args.settings)
      .then(function(result) {
        var result = new LineService_updateBuddySettings_result({success: result});
        output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddySettings_result(err);
          output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddySettings(args.settings, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddySettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddySettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_uploadBuddyContent = function(seqid, input, output) {
  var args = new LineService_uploadBuddyContent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.uploadBuddyContent.length === 2) {
    Q.fcall(this._handler.uploadBuddyContent, args.contentType, args.content)
      .then(function(result) {
        var result = new LineService_uploadBuddyContent_result({success: result});
        output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_uploadBuddyContent_result(err);
          output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.uploadBuddyContent(args.contentType, args.content, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_uploadBuddyContent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uploadBuddyContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findBuddyContactsByQuery = function(seqid, input, output) {
  var args = new LineService_findBuddyContactsByQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findBuddyContactsByQuery.length === 6) {
    Q.fcall(this._handler.findBuddyContactsByQuery, args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource)
      .then(function(result) {
        var result = new LineService_findBuddyContactsByQuery_result({success: result});
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findBuddyContactsByQuery_result(err);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findBuddyContactsByQuery(args.language, args.country, args.query, args.fromIndex, args.count, args.requestSource, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findBuddyContactsByQuery_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findBuddyContactsByQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyContacts = function(seqid, input, output) {
  var args = new LineService_getBuddyContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyContacts.length === 5) {
    Q.fcall(this._handler.getBuddyContacts, args.language, args.country, args.classification, args.fromIndex, args.count)
      .then(function(result) {
        var result = new LineService_getBuddyContacts_result({success: result});
        output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyContacts_result(err);
          output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyContacts(args.language, args.country, args.classification, args.fromIndex, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyDetail = function(seqid, input, output) {
  var args = new LineService_getBuddyDetail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyDetail.length === 1) {
    Q.fcall(this._handler.getBuddyDetail, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getBuddyDetail_result({success: result});
        output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyDetail_result(err);
          output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyDetail(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyDetail_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyDetail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyOnAir = function(seqid, input, output) {
  var args = new LineService_getBuddyOnAir_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyOnAir.length === 1) {
    Q.fcall(this._handler.getBuddyOnAir, args.buddyMid)
      .then(function(result) {
        var result = new LineService_getBuddyOnAir_result({success: result});
        output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyOnAir_result(err);
          output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyOnAir(args.buddyMid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyOnAir_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCountriesHavingBuddy = function(seqid, input, output) {
  var args = new LineService_getCountriesHavingBuddy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCountriesHavingBuddy.length === 0) {
    Q.fcall(this._handler.getCountriesHavingBuddy)
      .then(function(result) {
        var result = new LineService_getCountriesHavingBuddy_result({success: result});
        output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCountriesHavingBuddy_result(err);
          output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCountriesHavingBuddy(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCountriesHavingBuddy_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCountriesHavingBuddy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getNewlyReleasedBuddyIds = function(seqid, input, output) {
  var args = new LineService_getNewlyReleasedBuddyIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNewlyReleasedBuddyIds.length === 1) {
    Q.fcall(this._handler.getNewlyReleasedBuddyIds, args.country)
      .then(function(result) {
        var result = new LineService_getNewlyReleasedBuddyIds_result({success: result});
        output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getNewlyReleasedBuddyIds_result(err);
          output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNewlyReleasedBuddyIds(args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getNewlyReleasedBuddyIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNewlyReleasedBuddyIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPopularBuddyBanner = function(seqid, input, output) {
  var args = new LineService_getPopularBuddyBanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPopularBuddyBanner.length === 4) {
    Q.fcall(this._handler.getPopularBuddyBanner, args.language, args.country, args.applicationType, args.resourceSpecification)
      .then(function(result) {
        var result = new LineService_getPopularBuddyBanner_result({success: result});
        output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPopularBuddyBanner_result(err);
          output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPopularBuddyBanner(args.language, args.country, args.applicationType, args.resourceSpecification, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPopularBuddyBanner_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPopularBuddyBanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPopularBuddyLists = function(seqid, input, output) {
  var args = new LineService_getPopularBuddyLists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPopularBuddyLists.length === 2) {
    Q.fcall(this._handler.getPopularBuddyLists, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getPopularBuddyLists_result({success: result});
        output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPopularBuddyLists_result(err);
          output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPopularBuddyLists(args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPopularBuddyLists_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPopularBuddyLists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPromotedBuddyContacts = function(seqid, input, output) {
  var args = new LineService_getPromotedBuddyContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPromotedBuddyContacts.length === 2) {
    Q.fcall(this._handler.getPromotedBuddyContacts, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getPromotedBuddyContacts_result({success: result});
        output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPromotedBuddyContacts_result(err);
          output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPromotedBuddyContacts(args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPromotedBuddyContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPromotedBuddyContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_activeBuddySubscriberCount = function(seqid, input, output) {
  var args = new LineService_activeBuddySubscriberCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.activeBuddySubscriberCount.length === 0) {
    Q.fcall(this._handler.activeBuddySubscriberCount)
      .then(function(result) {
        var result = new LineService_activeBuddySubscriberCount_result({success: result});
        output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_activeBuddySubscriberCount_result(err);
          output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.activeBuddySubscriberCount(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_activeBuddySubscriberCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("activeBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_addOperationForChannel = function(seqid, input, output) {
  var args = new LineService_addOperationForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addOperationForChannel.length === 4) {
    Q.fcall(this._handler.addOperationForChannel, args.opType, args.param1, args.param2, args.param3)
      .then(function(result) {
        var result = new LineService_addOperationForChannel_result({success: result});
        output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_addOperationForChannel_result(err);
          output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addOperationForChannel(args.opType, args.param1, args.param2, args.param3, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_addOperationForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addOperationForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_displayBuddySubscriberCount = function(seqid, input, output) {
  var args = new LineService_displayBuddySubscriberCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.displayBuddySubscriberCount.length === 0) {
    Q.fcall(this._handler.displayBuddySubscriberCount)
      .then(function(result) {
        var result = new LineService_displayBuddySubscriberCount_result({success: result});
        output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_displayBuddySubscriberCount_result(err);
          output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.displayBuddySubscriberCount(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_displayBuddySubscriberCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("displayBuddySubscriberCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findContactByUseridWithoutAbuseBlockForChannel = function(seqid, input, output) {
  var args = new LineService_findContactByUseridWithoutAbuseBlockForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactByUseridWithoutAbuseBlockForChannel.length === 1) {
    Q.fcall(this._handler.findContactByUseridWithoutAbuseBlockForChannel, args.userid)
      .then(function(result) {
        var result = new LineService_findContactByUseridWithoutAbuseBlockForChannel_result({success: result});
        output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findContactByUseridWithoutAbuseBlockForChannel_result(err);
          output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactByUseridWithoutAbuseBlockForChannel(args.userid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findContactByUseridWithoutAbuseBlockForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactByUseridWithoutAbuseBlockForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getAllContactIdsForChannel = function(seqid, input, output) {
  var args = new LineService_getAllContactIdsForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllContactIdsForChannel.length === 0) {
    Q.fcall(this._handler.getAllContactIdsForChannel)
      .then(function(result) {
        var result = new LineService_getAllContactIdsForChannel_result({success: result});
        output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getAllContactIdsForChannel_result(err);
          output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllContactIdsForChannel(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getAllContactIdsForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllContactIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCompactContacts = function(seqid, input, output) {
  var args = new LineService_getCompactContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompactContacts.length === 1) {
    Q.fcall(this._handler.getCompactContacts, args.lastModifiedTimestamp)
      .then(function(result) {
        var result = new LineService_getCompactContacts_result({success: result});
        output.writeMessageBegin("getCompactContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCompactContacts_result(err);
          output.writeMessageBegin("getCompactContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCompactContacts(args.lastModifiedTimestamp, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCompactContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCompactContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompactContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getContactsForChannel = function(seqid, input, output) {
  var args = new LineService_getContactsForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactsForChannel.length === 1) {
    Q.fcall(this._handler.getContactsForChannel, args.ids)
      .then(function(result) {
        var result = new LineService_getContactsForChannel_result({success: result});
        output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getContactsForChannel_result(err);
          output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactsForChannel(args.ids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getContactsForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContactsForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getDisplayName = function(seqid, input, output) {
  var args = new LineService_getDisplayName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDisplayName.length === 1) {
    Q.fcall(this._handler.getDisplayName, args.mid)
      .then(function(result) {
        var result = new LineService_getDisplayName_result({success: result});
        output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getDisplayName_result(err);
          output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDisplayName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDisplayName(args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getDisplayName_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDisplayName", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDisplayName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getFavoriteMidsForChannel = function(seqid, input, output) {
  var args = new LineService_getFavoriteMidsForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFavoriteMidsForChannel.length === 0) {
    Q.fcall(this._handler.getFavoriteMidsForChannel)
      .then(function(result) {
        var result = new LineService_getFavoriteMidsForChannel_result({success: result});
        output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getFavoriteMidsForChannel_result(err);
          output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFavoriteMidsForChannel(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getFavoriteMidsForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFavoriteMidsForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getFriendMids = function(seqid, input, output) {
  var args = new LineService_getFriendMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFriendMids.length === 0) {
    Q.fcall(this._handler.getFriendMids)
      .then(function(result) {
        var result = new LineService_getFriendMids_result({success: result});
        output.writeMessageBegin("getFriendMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getFriendMids_result(err);
          output.writeMessageBegin("getFriendMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFriendMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFriendMids(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getFriendMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFriendMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFriendMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getGroupMemberMids = function(seqid, input, output) {
  var args = new LineService_getGroupMemberMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupMemberMids.length === 1) {
    Q.fcall(this._handler.getGroupMemberMids, args.groupId)
      .then(function(result) {
        var result = new LineService_getGroupMemberMids_result({success: result});
        output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getGroupMemberMids_result(err);
          output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupMemberMids(args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getGroupMemberMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupMemberMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getGroupsForChannel = function(seqid, input, output) {
  var args = new LineService_getGroupsForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupsForChannel.length === 1) {
    Q.fcall(this._handler.getGroupsForChannel, args.groupIds)
      .then(function(result) {
        var result = new LineService_getGroupsForChannel_result({success: result});
        output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getGroupsForChannel_result(err);
          output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupsForChannel(args.groupIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getGroupsForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupsForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getIdentityCredential = function(seqid, input, output) {
  var args = new LineService_getIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getIdentityCredential.length === 0) {
    Q.fcall(this._handler.getIdentityCredential)
      .then(function(result) {
        var result = new LineService_getIdentityCredential_result({success: result});
        output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getIdentityCredential_result(err);
          output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getIdentityCredential(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getJoinedGroupIdsForChannel = function(seqid, input, output) {
  var args = new LineService_getJoinedGroupIdsForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getJoinedGroupIdsForChannel.length === 0) {
    Q.fcall(this._handler.getJoinedGroupIdsForChannel)
      .then(function(result) {
        var result = new LineService_getJoinedGroupIdsForChannel_result({success: result});
        output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getJoinedGroupIdsForChannel_result(err);
          output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getJoinedGroupIdsForChannel(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getJoinedGroupIdsForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getJoinedGroupIdsForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMetaProfile = function(seqid, input, output) {
  var args = new LineService_getMetaProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMetaProfile.length === 0) {
    Q.fcall(this._handler.getMetaProfile)
      .then(function(result) {
        var result = new LineService_getMetaProfile_result({success: result});
        output.writeMessageBegin("getMetaProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMetaProfile_result(err);
          output.writeMessageBegin("getMetaProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMetaProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMetaProfile(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMetaProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMetaProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMetaProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMid = function(seqid, input, output) {
  var args = new LineService_getMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMid.length === 0) {
    Q.fcall(this._handler.getMid)
      .then(function(result) {
        var result = new LineService_getMid_result({success: result});
        output.writeMessageBegin("getMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMid_result(err);
          output.writeMessageBegin("getMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMid(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPrimaryClientForChannel = function(seqid, input, output) {
  var args = new LineService_getPrimaryClientForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPrimaryClientForChannel.length === 0) {
    Q.fcall(this._handler.getPrimaryClientForChannel)
      .then(function(result) {
        var result = new LineService_getPrimaryClientForChannel_result({success: result});
        output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPrimaryClientForChannel_result(err);
          output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPrimaryClientForChannel(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPrimaryClientForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPrimaryClientForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProfileForChannel = function(seqid, input, output) {
  var args = new LineService_getProfileForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfileForChannel.length === 0) {
    Q.fcall(this._handler.getProfileForChannel)
      .then(function(result) {
        var result = new LineService_getProfileForChannel_result({success: result});
        output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProfileForChannel_result(err);
          output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfileForChannel(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProfileForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProfileForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSimpleChannelContacts = function(seqid, input, output) {
  var args = new LineService_getSimpleChannelContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSimpleChannelContacts.length === 1) {
    Q.fcall(this._handler.getSimpleChannelContacts, args.ids)
      .then(function(result) {
        var result = new LineService_getSimpleChannelContacts_result({success: result});
        output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSimpleChannelContacts_result(err);
          output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSimpleChannelContacts(args.ids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSimpleChannelContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSimpleChannelContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUserCountryForBilling = function(seqid, input, output) {
  var args = new LineService_getUserCountryForBilling_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserCountryForBilling.length === 2) {
    Q.fcall(this._handler.getUserCountryForBilling, args.country, args.remoteIp)
      .then(function(result) {
        var result = new LineService_getUserCountryForBilling_result({success: result});
        output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUserCountryForBilling_result(err);
          output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserCountryForBilling(args.country, args.remoteIp, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUserCountryForBilling_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserCountryForBilling", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUserCreateTime = function(seqid, input, output) {
  var args = new LineService_getUserCreateTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserCreateTime.length === 0) {
    Q.fcall(this._handler.getUserCreateTime)
      .then(function(result) {
        var result = new LineService_getUserCreateTime_result({success: result});
        output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUserCreateTime_result(err);
          output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserCreateTime(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUserCreateTime_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserCreateTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUserIdentities = function(seqid, input, output) {
  var args = new LineService_getUserIdentities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserIdentities.length === 0) {
    Q.fcall(this._handler.getUserIdentities)
      .then(function(result) {
        var result = new LineService_getUserIdentities_result({success: result});
        output.writeMessageBegin("getUserIdentities", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUserIdentities_result(err);
          output.writeMessageBegin("getUserIdentities", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserIdentities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserIdentities(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUserIdentities_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserIdentities", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserIdentities", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUserLanguage = function(seqid, input, output) {
  var args = new LineService_getUserLanguage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserLanguage.length === 0) {
    Q.fcall(this._handler.getUserLanguage)
      .then(function(result) {
        var result = new LineService_getUserLanguage_result({success: result});
        output.writeMessageBegin("getUserLanguage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUserLanguage_result(err);
          output.writeMessageBegin("getUserLanguage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserLanguage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserLanguage(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUserLanguage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserLanguage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserLanguage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUserMidsWhoAddedMe = function(seqid, input, output) {
  var args = new LineService_getUserMidsWhoAddedMe_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserMidsWhoAddedMe.length === 0) {
    Q.fcall(this._handler.getUserMidsWhoAddedMe)
      .then(function(result) {
        var result = new LineService_getUserMidsWhoAddedMe_result({success: result});
        output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUserMidsWhoAddedMe_result(err);
          output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserMidsWhoAddedMe(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUserMidsWhoAddedMe_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserMidsWhoAddedMe", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_isGroupMember = function(seqid, input, output) {
  var args = new LineService_isGroupMember_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isGroupMember.length === 1) {
    Q.fcall(this._handler.isGroupMember, args.groupId)
      .then(function(result) {
        var result = new LineService_isGroupMember_result({success: result});
        output.writeMessageBegin("isGroupMember", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_isGroupMember_result(err);
          output.writeMessageBegin("isGroupMember", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isGroupMember", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isGroupMember(args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_isGroupMember_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isGroupMember", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isGroupMember", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_isInContact = function(seqid, input, output) {
  var args = new LineService_isInContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isInContact.length === 1) {
    Q.fcall(this._handler.isInContact, args.mid)
      .then(function(result) {
        var result = new LineService_isInContact_result({success: result});
        output.writeMessageBegin("isInContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_isInContact_result(err);
          output.writeMessageBegin("isInContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isInContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isInContact(args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_isInContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isInContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isInContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerChannelCP = function(seqid, input, output) {
  var args = new LineService_registerChannelCP_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerChannelCP.length === 2) {
    Q.fcall(this._handler.registerChannelCP, args.cpId, args.registerPassword)
      .then(function(result) {
        var result = new LineService_registerChannelCP_result({success: result});
        output.writeMessageBegin("registerChannelCP", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerChannelCP_result(err);
          output.writeMessageBegin("registerChannelCP", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerChannelCP", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerChannelCP(args.cpId, args.registerPassword, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerChannelCP_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerChannelCP", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerChannelCP", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeNotificationStatus = function(seqid, input, output) {
  var args = new LineService_removeNotificationStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeNotificationStatus.length === 1) {
    Q.fcall(this._handler.removeNotificationStatus, args.notificationStatus)
      .then(function(result) {
        var result = new LineService_removeNotificationStatus_result({success: result});
        output.writeMessageBegin("removeNotificationStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeNotificationStatus_result(err);
          output.writeMessageBegin("removeNotificationStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeNotificationStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeNotificationStatus(args.notificationStatus, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeNotificationStatus_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeNotificationStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeNotificationStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendMessageForChannel = function(seqid, input, output) {
  var args = new LineService_sendMessageForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessageForChannel.length === 1) {
    Q.fcall(this._handler.sendMessageForChannel, args.message)
      .then(function(result) {
        var result = new LineService_sendMessageForChannel_result({success: result});
        output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendMessageForChannel_result(err);
          output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessageForChannel(args.message, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendMessageForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMessageForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendPinCodeOperation = function(seqid, input, output) {
  var args = new LineService_sendPinCodeOperation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendPinCodeOperation.length === 1) {
    Q.fcall(this._handler.sendPinCodeOperation, args.verifier)
      .then(function(result) {
        var result = new LineService_sendPinCodeOperation_result({success: result});
        output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendPinCodeOperation_result(err);
          output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendPinCodeOperation(args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendPinCodeOperation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendPinCodeOperation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateProfileAttributeForChannel = function(seqid, input, output) {
  var args = new LineService_updateProfileAttributeForChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateProfileAttributeForChannel.length === 2) {
    Q.fcall(this._handler.updateProfileAttributeForChannel, args.profileAttribute, args.value)
      .then(function(result) {
        var result = new LineService_updateProfileAttributeForChannel_result({success: result});
        output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateProfileAttributeForChannel_result(err);
          output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateProfileAttributeForChannel(args.profileAttribute, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateProfileAttributeForChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateProfileAttributeForChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_approveChannelAndIssueChannelToken = function(seqid, input, output) {
  var args = new LineService_approveChannelAndIssueChannelToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.approveChannelAndIssueChannelToken.length === 1) {
    Q.fcall(this._handler.approveChannelAndIssueChannelToken, args.channelId)
      .then(function(result) {
        var result = new LineService_approveChannelAndIssueChannelToken_result({success: result});
        output.writeMessageBegin("approveChannelAndIssueChannelToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_approveChannelAndIssueChannelToken_result(err);
          output.writeMessageBegin("approveChannelAndIssueChannelToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("approveChannelAndIssueChannelToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.approveChannelAndIssueChannelToken(args.channelId, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_approveChannelAndIssueChannelToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("approveChannelAndIssueChannelToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("approveChannelAndIssueChannelToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_approveChannelAndIssueRequestToken = function(seqid, input, output) {
  var args = new LineService_approveChannelAndIssueRequestToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.approveChannelAndIssueRequestToken.length === 2) {
    Q.fcall(this._handler.approveChannelAndIssueRequestToken, args.channelId, args.otpId)
      .then(function(result) {
        var result = new LineService_approveChannelAndIssueRequestToken_result({success: result});
        output.writeMessageBegin("approveChannelAndIssueRequestToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_approveChannelAndIssueRequestToken_result(err);
          output.writeMessageBegin("approveChannelAndIssueRequestToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("approveChannelAndIssueRequestToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.approveChannelAndIssueRequestToken(args.channelId, args.otpId, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_approveChannelAndIssueRequestToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("approveChannelAndIssueRequestToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("approveChannelAndIssueRequestToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_fetchNotificationItems = function(seqid, input, output) {
  var args = new LineService_fetchNotificationItems_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchNotificationItems.length === 1) {
    Q.fcall(this._handler.fetchNotificationItems, args.localRev)
      .then(function(result) {
        var result = new LineService_fetchNotificationItems_result({success: result});
        output.writeMessageBegin("fetchNotificationItems", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_fetchNotificationItems_result(err);
          output.writeMessageBegin("fetchNotificationItems", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchNotificationItems", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchNotificationItems(args.localRev, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_fetchNotificationItems_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fetchNotificationItems", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchNotificationItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getApprovedChannels = function(seqid, input, output) {
  var args = new LineService_getApprovedChannels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getApprovedChannels.length === 2) {
    Q.fcall(this._handler.getApprovedChannels, args.lastSynced, args.locale)
      .then(function(result) {
        var result = new LineService_getApprovedChannels_result({success: result});
        output.writeMessageBegin("getApprovedChannels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getApprovedChannels_result(err);
          output.writeMessageBegin("getApprovedChannels", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getApprovedChannels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getApprovedChannels(args.lastSynced, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getApprovedChannels_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getApprovedChannels", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getApprovedChannels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getChannelInfo = function(seqid, input, output) {
  var args = new LineService_getChannelInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChannelInfo.length === 2) {
    Q.fcall(this._handler.getChannelInfo, args.channelId, args.locale)
      .then(function(result) {
        var result = new LineService_getChannelInfo_result({success: result});
        output.writeMessageBegin("getChannelInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getChannelInfo_result(err);
          output.writeMessageBegin("getChannelInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChannelInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChannelInfo(args.channelId, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getChannelInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChannelInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChannelInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getChannelNotificationSetting = function(seqid, input, output) {
  var args = new LineService_getChannelNotificationSetting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChannelNotificationSetting.length === 2) {
    Q.fcall(this._handler.getChannelNotificationSetting, args.channelId, args.locale)
      .then(function(result) {
        var result = new LineService_getChannelNotificationSetting_result({success: result});
        output.writeMessageBegin("getChannelNotificationSetting", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getChannelNotificationSetting_result(err);
          output.writeMessageBegin("getChannelNotificationSetting", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChannelNotificationSetting", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChannelNotificationSetting(args.channelId, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getChannelNotificationSetting_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChannelNotificationSetting", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChannelNotificationSetting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getChannelNotificationSettings = function(seqid, input, output) {
  var args = new LineService_getChannelNotificationSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChannelNotificationSettings.length === 1) {
    Q.fcall(this._handler.getChannelNotificationSettings, args.locale)
      .then(function(result) {
        var result = new LineService_getChannelNotificationSettings_result({success: result});
        output.writeMessageBegin("getChannelNotificationSettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getChannelNotificationSettings_result(err);
          output.writeMessageBegin("getChannelNotificationSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChannelNotificationSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChannelNotificationSettings(args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getChannelNotificationSettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChannelNotificationSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChannelNotificationSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getChannels = function(seqid, input, output) {
  var args = new LineService_getChannels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChannels.length === 2) {
    Q.fcall(this._handler.getChannels, args.lastSynced, args.locale)
      .then(function(result) {
        var result = new LineService_getChannels_result({success: result});
        output.writeMessageBegin("getChannels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getChannels_result(err);
          output.writeMessageBegin("getChannels", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getChannels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChannels(args.lastSynced, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getChannels_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getChannels", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getChannels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getDomains = function(seqid, input, output) {
  var args = new LineService_getDomains_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDomains.length === 1) {
    Q.fcall(this._handler.getDomains, args.lastSynced)
      .then(function(result) {
        var result = new LineService_getDomains_result({success: result});
        output.writeMessageBegin("getDomains", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getDomains_result(err);
          output.writeMessageBegin("getDomains", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDomains", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDomains(args.lastSynced, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getDomains_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDomains", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDomains", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getFriendChannelMatrices = function(seqid, input, output) {
  var args = new LineService_getFriendChannelMatrices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFriendChannelMatrices.length === 1) {
    Q.fcall(this._handler.getFriendChannelMatrices, args.channelIds)
      .then(function(result) {
        var result = new LineService_getFriendChannelMatrices_result({success: result});
        output.writeMessageBegin("getFriendChannelMatrices", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getFriendChannelMatrices_result(err);
          output.writeMessageBegin("getFriendChannelMatrices", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFriendChannelMatrices", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFriendChannelMatrices(args.channelIds, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getFriendChannelMatrices_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFriendChannelMatrices", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFriendChannelMatrices", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getNotificationBadgeCount = function(seqid, input, output) {
  var args = new LineService_getNotificationBadgeCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNotificationBadgeCount.length === 1) {
    Q.fcall(this._handler.getNotificationBadgeCount, args.localRev)
      .then(function(result) {
        var result = new LineService_getNotificationBadgeCount_result({success: result});
        output.writeMessageBegin("getNotificationBadgeCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_getNotificationBadgeCount_result(err);
          output.writeMessageBegin("getNotificationBadgeCount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNotificationBadgeCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNotificationBadgeCount(args.localRev, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_getNotificationBadgeCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNotificationBadgeCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNotificationBadgeCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_issueChannelToken = function(seqid, input, output) {
  var args = new LineService_issueChannelToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueChannelToken.length === 1) {
    Q.fcall(this._handler.issueChannelToken, args.channelId)
      .then(function(result) {
        var result = new LineService_issueChannelToken_result({success: result});
        output.writeMessageBegin("issueChannelToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_issueChannelToken_result(err);
          output.writeMessageBegin("issueChannelToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueChannelToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.issueChannelToken(args.channelId, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_issueChannelToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("issueChannelToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueChannelToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_issueRequestToken = function(seqid, input, output) {
  var args = new LineService_issueRequestToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueRequestToken.length === 2) {
    Q.fcall(this._handler.issueRequestToken, args.channelId, args.otpId)
      .then(function(result) {
        var result = new LineService_issueRequestToken_result({success: result});
        output.writeMessageBegin("issueRequestToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_issueRequestToken_result(err);
          output.writeMessageBegin("issueRequestToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueRequestToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.issueRequestToken(args.channelId, args.otpId, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_issueRequestToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("issueRequestToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueRequestToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_issueRequestTokenWithAuthScheme = function(seqid, input, output) {
  var args = new LineService_issueRequestTokenWithAuthScheme_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.issueRequestTokenWithAuthScheme.length === 4) {
    Q.fcall(this._handler.issueRequestTokenWithAuthScheme, args.channelId, args.otpId, args.authScheme, args.returnUrl)
      .then(function(result) {
        var result = new LineService_issueRequestTokenWithAuthScheme_result({success: result});
        output.writeMessageBegin("issueRequestTokenWithAuthScheme", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_issueRequestTokenWithAuthScheme_result(err);
          output.writeMessageBegin("issueRequestTokenWithAuthScheme", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("issueRequestTokenWithAuthScheme", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.issueRequestTokenWithAuthScheme(args.channelId, args.otpId, args.authScheme, args.returnUrl, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_issueRequestTokenWithAuthScheme_result((err != null ? err : {success: result}));
        output.writeMessageBegin("issueRequestTokenWithAuthScheme", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("issueRequestTokenWithAuthScheme", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reserveCoinUse = function(seqid, input, output) {
  var args = new LineService_reserveCoinUse_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reserveCoinUse.length === 2) {
    Q.fcall(this._handler.reserveCoinUse, args.request, args.locale)
      .then(function(result) {
        var result = new LineService_reserveCoinUse_result({success: result});
        output.writeMessageBegin("reserveCoinUse", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_reserveCoinUse_result(err);
          output.writeMessageBegin("reserveCoinUse", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reserveCoinUse", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reserveCoinUse(args.request, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_reserveCoinUse_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reserveCoinUse", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reserveCoinUse", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_revokeChannel = function(seqid, input, output) {
  var args = new LineService_revokeChannel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.revokeChannel.length === 1) {
    Q.fcall(this._handler.revokeChannel, args.channelId)
      .then(function(result) {
        var result = new LineService_revokeChannel_result({success: result});
        output.writeMessageBegin("revokeChannel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_revokeChannel_result(err);
          output.writeMessageBegin("revokeChannel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revokeChannel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.revokeChannel(args.channelId, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_revokeChannel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("revokeChannel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("revokeChannel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_syncChannelData = function(seqid, input, output) {
  var args = new LineService_syncChannelData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.syncChannelData.length === 2) {
    Q.fcall(this._handler.syncChannelData, args.lastSynced, args.locale)
      .then(function(result) {
        var result = new LineService_syncChannelData_result({success: result});
        output.writeMessageBegin("syncChannelData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_syncChannelData_result(err);
          output.writeMessageBegin("syncChannelData", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("syncChannelData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.syncChannelData(args.lastSynced, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_syncChannelData_result((err != null ? err : {success: result}));
        output.writeMessageBegin("syncChannelData", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("syncChannelData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateChannelNotificationSetting = function(seqid, input, output) {
  var args = new LineService_updateChannelNotificationSetting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChannelNotificationSetting.length === 1) {
    Q.fcall(this._handler.updateChannelNotificationSetting, args.setting)
      .then(function(result) {
        var result = new LineService_updateChannelNotificationSetting_result({success: result});
        output.writeMessageBegin("updateChannelNotificationSetting", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ChannelException) {
          var result = new LineService_updateChannelNotificationSetting_result(err);
          output.writeMessageBegin("updateChannelNotificationSetting", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateChannelNotificationSetting", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChannelNotificationSetting(args.setting, function (err, result) {
      if (err == null || err instanceof ttypes.ChannelException) {
        var result = new LineService_updateChannelNotificationSetting_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateChannelNotificationSetting", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateChannelNotificationSetting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_fetchMessageOperations = function(seqid, input, output) {
  var args = new LineService_fetchMessageOperations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchMessageOperations.length === 3) {
    Q.fcall(this._handler.fetchMessageOperations, args.localRevision, args.lastOpTimestamp, args.count)
      .then(function(result) {
        var result = new LineService_fetchMessageOperations_result({success: result});
        output.writeMessageBegin("fetchMessageOperations", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_fetchMessageOperations_result(err);
          output.writeMessageBegin("fetchMessageOperations", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchMessageOperations", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchMessageOperations(args.localRevision, args.lastOpTimestamp, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_fetchMessageOperations_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fetchMessageOperations", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchMessageOperations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getLastReadMessageIds = function(seqid, input, output) {
  var args = new LineService_getLastReadMessageIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLastReadMessageIds.length === 1) {
    Q.fcall(this._handler.getLastReadMessageIds, args.chatId)
      .then(function(result) {
        var result = new LineService_getLastReadMessageIds_result({success: result});
        output.writeMessageBegin("getLastReadMessageIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getLastReadMessageIds_result(err);
          output.writeMessageBegin("getLastReadMessageIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLastReadMessageIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLastReadMessageIds(args.chatId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getLastReadMessageIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getLastReadMessageIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLastReadMessageIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_multiGetLastReadMessageIds = function(seqid, input, output) {
  var args = new LineService_multiGetLastReadMessageIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multiGetLastReadMessageIds.length === 1) {
    Q.fcall(this._handler.multiGetLastReadMessageIds, args.chatIds)
      .then(function(result) {
        var result = new LineService_multiGetLastReadMessageIds_result({success: result});
        output.writeMessageBegin("multiGetLastReadMessageIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_multiGetLastReadMessageIds_result(err);
          output.writeMessageBegin("multiGetLastReadMessageIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("multiGetLastReadMessageIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.multiGetLastReadMessageIds(args.chatIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_multiGetLastReadMessageIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("multiGetLastReadMessageIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGetLastReadMessageIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_buyCoinProduct = function(seqid, input, output) {
  var args = new LineService_buyCoinProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.buyCoinProduct.length === 1) {
    Q.fcall(this._handler.buyCoinProduct, args.paymentReservation)
      .then(function(result) {
        var result = new LineService_buyCoinProduct_result({success: result});
        output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_buyCoinProduct_result(err);
          output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.buyCoinProduct(args.paymentReservation, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_buyCoinProduct_result((err != null ? err : {success: result}));
        output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("buyCoinProduct", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_buyFreeProduct = function(seqid, input, output) {
  var args = new LineService_buyFreeProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.buyFreeProduct.length === 6) {
    Q.fcall(this._handler.buyFreeProduct, args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId)
      .then(function(result) {
        var result = new LineService_buyFreeProduct_result({success: result});
        output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_buyFreeProduct_result(err);
          output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.buyFreeProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_buyFreeProduct_result((err != null ? err : {success: result}));
        output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("buyFreeProduct", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_buyMustbuyProduct = function(seqid, input, output) {
  var args = new LineService_buyMustbuyProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.buyMustbuyProduct.length === 7) {
    Q.fcall(this._handler.buyMustbuyProduct, args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, args.serialNumber)
      .then(function(result) {
        var result = new LineService_buyMustbuyProduct_result({success: result});
        output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_buyMustbuyProduct_result(err);
          output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.buyMustbuyProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, args.serialNumber, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_buyMustbuyProduct_result((err != null ? err : {success: result}));
        output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("buyMustbuyProduct", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_checkCanReceivePresent = function(seqid, input, output) {
  var args = new LineService_checkCanReceivePresent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkCanReceivePresent.length === 4) {
    Q.fcall(this._handler.checkCanReceivePresent, args.recipientMid, args.packageId, args.language, args.country)
      .then(function(result) {
        var result = new LineService_checkCanReceivePresent_result({success: result});
        output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_checkCanReceivePresent_result(err);
          output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkCanReceivePresent(args.recipientMid, args.packageId, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_checkCanReceivePresent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkCanReceivePresent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getActivePurchases = function(seqid, input, output) {
  var args = new LineService_getActivePurchases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActivePurchases.length === 4) {
    Q.fcall(this._handler.getActivePurchases, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getActivePurchases_result({success: result});
        output.writeMessageBegin("getActivePurchases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getActivePurchases_result(err);
          output.writeMessageBegin("getActivePurchases", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivePurchases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActivePurchases(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getActivePurchases_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getActivePurchases", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActivePurchases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getActivePurchaseVersions = function(seqid, input, output) {
  var args = new LineService_getActivePurchaseVersions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActivePurchaseVersions.length === 4) {
    Q.fcall(this._handler.getActivePurchaseVersions, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getActivePurchaseVersions_result({success: result});
        output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getActivePurchaseVersions_result(err);
          output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActivePurchaseVersions(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getActivePurchaseVersions_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActivePurchaseVersions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCoinProducts = function(seqid, input, output) {
  var args = new LineService_getCoinProducts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoinProducts.length === 3) {
    Q.fcall(this._handler.getCoinProducts, args.appStoreCode, args.country, args.language)
      .then(function(result) {
        var result = new LineService_getCoinProducts_result({success: result});
        output.writeMessageBegin("getCoinProducts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCoinProducts_result(err);
          output.writeMessageBegin("getCoinProducts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinProducts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCoinProducts(args.appStoreCode, args.country, args.language, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCoinProducts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCoinProducts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoinProducts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCoinProductsByPgCode = function(seqid, input, output) {
  var args = new LineService_getCoinProductsByPgCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoinProductsByPgCode.length === 4) {
    Q.fcall(this._handler.getCoinProductsByPgCode, args.appStoreCode, args.pgCode, args.country, args.language)
      .then(function(result) {
        var result = new LineService_getCoinProductsByPgCode_result({success: result});
        output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCoinProductsByPgCode_result(err);
          output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCoinProductsByPgCode(args.appStoreCode, args.pgCode, args.country, args.language, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCoinProductsByPgCode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoinProductsByPgCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCoinPurchaseHistory = function(seqid, input, output) {
  var args = new LineService_getCoinPurchaseHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoinPurchaseHistory.length === 1) {
    Q.fcall(this._handler.getCoinPurchaseHistory, args.request)
      .then(function(result) {
        var result = new LineService_getCoinPurchaseHistory_result({success: result});
        output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCoinPurchaseHistory_result(err);
          output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCoinPurchaseHistory(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCoinPurchaseHistory_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoinPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCoinUseAndRefundHistory = function(seqid, input, output) {
  var args = new LineService_getCoinUseAndRefundHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCoinUseAndRefundHistory.length === 1) {
    Q.fcall(this._handler.getCoinUseAndRefundHistory, args.request)
      .then(function(result) {
        var result = new LineService_getCoinUseAndRefundHistory_result({success: result});
        output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCoinUseAndRefundHistory_result(err);
          output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCoinUseAndRefundHistory(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCoinUseAndRefundHistory_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCoinUseAndRefundHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getDownloads = function(seqid, input, output) {
  var args = new LineService_getDownloads_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDownloads.length === 4) {
    Q.fcall(this._handler.getDownloads, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getDownloads_result({success: result});
        output.writeMessageBegin("getDownloads", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getDownloads_result(err);
          output.writeMessageBegin("getDownloads", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDownloads", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDownloads(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getDownloads_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDownloads", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDownloads", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getEventPackages = function(seqid, input, output) {
  var args = new LineService_getEventPackages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEventPackages.length === 4) {
    Q.fcall(this._handler.getEventPackages, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getEventPackages_result({success: result});
        output.writeMessageBegin("getEventPackages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getEventPackages_result(err);
          output.writeMessageBegin("getEventPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getEventPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getEventPackages(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getEventPackages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getEventPackages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getEventPackages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getNewlyReleasedPackages = function(seqid, input, output) {
  var args = new LineService_getNewlyReleasedPackages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNewlyReleasedPackages.length === 4) {
    Q.fcall(this._handler.getNewlyReleasedPackages, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getNewlyReleasedPackages_result({success: result});
        output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getNewlyReleasedPackages_result(err);
          output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNewlyReleasedPackages(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getNewlyReleasedPackages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNewlyReleasedPackages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPopularPackages = function(seqid, input, output) {
  var args = new LineService_getPopularPackages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPopularPackages.length === 4) {
    Q.fcall(this._handler.getPopularPackages, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getPopularPackages_result({success: result});
        output.writeMessageBegin("getPopularPackages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPopularPackages_result(err);
          output.writeMessageBegin("getPopularPackages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPopularPackages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPopularPackages(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPopularPackages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPopularPackages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPopularPackages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPresentsReceived = function(seqid, input, output) {
  var args = new LineService_getPresentsReceived_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPresentsReceived.length === 4) {
    Q.fcall(this._handler.getPresentsReceived, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getPresentsReceived_result({success: result});
        output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPresentsReceived_result(err);
          output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPresentsReceived(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPresentsReceived_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPresentsReceived", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPresentsSent = function(seqid, input, output) {
  var args = new LineService_getPresentsSent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPresentsSent.length === 4) {
    Q.fcall(this._handler.getPresentsSent, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getPresentsSent_result({success: result});
        output.writeMessageBegin("getPresentsSent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPresentsSent_result(err);
          output.writeMessageBegin("getPresentsSent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPresentsSent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPresentsSent(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPresentsSent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPresentsSent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPresentsSent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProduct = function(seqid, input, output) {
  var args = new LineService_getProduct_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProduct.length === 3) {
    Q.fcall(this._handler.getProduct, args.packageID, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getProduct_result({success: result});
        output.writeMessageBegin("getProduct", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProduct_result(err);
          output.writeMessageBegin("getProduct", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProduct", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProduct(args.packageID, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProduct_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProduct", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProduct", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProductList = function(seqid, input, output) {
  var args = new LineService_getProductList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProductList.length === 3) {
    Q.fcall(this._handler.getProductList, args.productIdList, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getProductList_result({success: result});
        output.writeMessageBegin("getProductList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProductList_result(err);
          output.writeMessageBegin("getProductList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProductList(args.productIdList, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProductList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProductList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProductList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProductListWithCarrier = function(seqid, input, output) {
  var args = new LineService_getProductListWithCarrier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProductListWithCarrier.length === 4) {
    Q.fcall(this._handler.getProductListWithCarrier, args.productIdList, args.language, args.country, args.carrierCode)
      .then(function(result) {
        var result = new LineService_getProductListWithCarrier_result({success: result});
        output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProductListWithCarrier_result(err);
          output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProductListWithCarrier(args.productIdList, args.language, args.country, args.carrierCode, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProductListWithCarrier_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProductListWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProductWithCarrier = function(seqid, input, output) {
  var args = new LineService_getProductWithCarrier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProductWithCarrier.length === 4) {
    Q.fcall(this._handler.getProductWithCarrier, args.packageID, args.language, args.country, args.carrierCode)
      .then(function(result) {
        var result = new LineService_getProductWithCarrier_result({success: result});
        output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProductWithCarrier_result(err);
          output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProductWithCarrier(args.packageID, args.language, args.country, args.carrierCode, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProductWithCarrier_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProductWithCarrier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPurchaseHistory = function(seqid, input, output) {
  var args = new LineService_getPurchaseHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPurchaseHistory.length === 4) {
    Q.fcall(this._handler.getPurchaseHistory, args.start, args.size, args.language, args.country)
      .then(function(result) {
        var result = new LineService_getPurchaseHistory_result({success: result});
        output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPurchaseHistory_result(err);
          output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPurchaseHistory(args.start, args.size, args.language, args.country, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPurchaseHistory_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPurchaseHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getTotalBalance = function(seqid, input, output) {
  var args = new LineService_getTotalBalance_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTotalBalance.length === 1) {
    Q.fcall(this._handler.getTotalBalance, args.appStoreCode)
      .then(function(result) {
        var result = new LineService_getTotalBalance_result({success: result});
        output.writeMessageBegin("getTotalBalance", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getTotalBalance_result(err);
          output.writeMessageBegin("getTotalBalance", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTotalBalance", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTotalBalance(args.appStoreCode, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getTotalBalance_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getTotalBalance", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTotalBalance", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyDownloaded = function(seqid, input, output) {
  var args = new LineService_notifyDownloaded_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyDownloaded.length === 2) {
    Q.fcall(this._handler.notifyDownloaded, args.packageId, args.language)
      .then(function(result) {
        var result = new LineService_notifyDownloaded_result({success: result});
        output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyDownloaded_result(err);
          output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyDownloaded(args.packageId, args.language, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyDownloaded_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyDownloaded", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reserveCoinPurchase = function(seqid, input, output) {
  var args = new LineService_reserveCoinPurchase_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reserveCoinPurchase.length === 1) {
    Q.fcall(this._handler.reserveCoinPurchase, args.request)
      .then(function(result) {
        var result = new LineService_reserveCoinPurchase_result({success: result});
        output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reserveCoinPurchase_result(err);
          output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reserveCoinPurchase(args.request, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reserveCoinPurchase_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reserveCoinPurchase", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reservePayment = function(seqid, input, output) {
  var args = new LineService_reservePayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reservePayment.length === 1) {
    Q.fcall(this._handler.reservePayment, args.paymentReservation)
      .then(function(result) {
        var result = new LineService_reservePayment_result({success: result});
        output.writeMessageBegin("reservePayment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reservePayment_result(err);
          output.writeMessageBegin("reservePayment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reservePayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reservePayment(args.paymentReservation, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reservePayment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reservePayment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reservePayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSnsFriends = function(seqid, input, output) {
  var args = new LineService_getSnsFriends_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSnsFriends.length === 4) {
    Q.fcall(this._handler.getSnsFriends, args.snsIdType, args.snsAccessToken, args.startIdx, args.limit)
      .then(function(result) {
        var result = new LineService_getSnsFriends_result({success: result});
        output.writeMessageBegin("getSnsFriends", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSnsFriends_result(err);
          output.writeMessageBegin("getSnsFriends", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSnsFriends", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSnsFriends_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSnsFriends", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSnsFriends", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSnsMyProfile = function(seqid, input, output) {
  var args = new LineService_getSnsMyProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSnsMyProfile.length === 2) {
    Q.fcall(this._handler.getSnsMyProfile, args.snsIdType, args.snsAccessToken)
      .then(function(result) {
        var result = new LineService_getSnsMyProfile_result({success: result});
        output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSnsMyProfile_result(err);
          output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSnsMyProfile(args.snsIdType, args.snsAccessToken, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSnsMyProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSnsMyProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_postSnsInvitationMessage = function(seqid, input, output) {
  var args = new LineService_postSnsInvitationMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.postSnsInvitationMessage.length === 3) {
    Q.fcall(this._handler.postSnsInvitationMessage, args.snsIdType, args.snsAccessToken, args.toSnsUserId)
      .then(function(result) {
        var result = new LineService_postSnsInvitationMessage_result({success: result});
        output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_postSnsInvitationMessage_result(err);
          output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_postSnsInvitationMessage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postSnsInvitationMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_acceptGroupInvitation = function(seqid, input, output) {
  var args = new LineService_acceptGroupInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptGroupInvitation.length === 2) {
    Q.fcall(this._handler.acceptGroupInvitation, args.reqSeq, args.groupId)
      .then(function(result) {
        var result = new LineService_acceptGroupInvitation_result({success: result});
        output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_acceptGroupInvitation_result(err);
          output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptGroupInvitation(args.reqSeq, args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_acceptGroupInvitation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_acceptGroupInvitationByTicket = function(seqid, input, output) {
  var args = new LineService_acceptGroupInvitationByTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptGroupInvitationByTicket.length === 3) {
    Q.fcall(this._handler.acceptGroupInvitationByTicket, args.reqSeq, args.groupId, args.ticketId)
      .then(function(result) {
        var result = new LineService_acceptGroupInvitationByTicket_result({success: result});
        output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_acceptGroupInvitationByTicket_result(err);
          output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptGroupInvitationByTicket(args.reqSeq, args.groupId, args.ticketId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_acceptGroupInvitationByTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptGroupInvitationByTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findGroupByTicket = function(seqid, input, output) {
  var args = new LineService_findGroupByTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findGroupByTicket.length === 1) {
    Q.fcall(this._handler.findGroupByTicket, args.ticketId)
      .then(function(result) {
        var result = new LineService_findGroupByTicket_result({success: result});
        output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findGroupByTicket_result(err);
          output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findGroupByTicket(args.ticketId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findGroupByTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findGroupByTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_acceptProximityMatches = function(seqid, input, output) {
  var args = new LineService_acceptProximityMatches_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acceptProximityMatches.length === 2) {
    Q.fcall(this._handler.acceptProximityMatches, args.sessionId, args.ids)
      .then(function(result) {
        var result = new LineService_acceptProximityMatches_result({success: result});
        output.writeMessageBegin("acceptProximityMatches", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_acceptProximityMatches_result(err);
          output.writeMessageBegin("acceptProximityMatches", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acceptProximityMatches", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acceptProximityMatches(args.sessionId, args.ids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_acceptProximityMatches_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acceptProximityMatches", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acceptProximityMatches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_acquireCallRoute = function(seqid, input, output) {
  var args = new LineService_acquireCallRoute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acquireCallRoute.length === 1) {
    Q.fcall(this._handler.acquireCallRoute, args.to)
      .then(function(result) {
        var result = new LineService_acquireCallRoute_result({success: result});
        output.writeMessageBegin("acquireCallRoute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_acquireCallRoute_result(err);
          output.writeMessageBegin("acquireCallRoute", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireCallRoute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acquireCallRoute(args.to, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_acquireCallRoute_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acquireCallRoute", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acquireCallRoute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_acquireCallTicket = function(seqid, input, output) {
  var args = new LineService_acquireCallTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acquireCallTicket.length === 1) {
    Q.fcall(this._handler.acquireCallTicket, args.to)
      .then(function(result) {
        var result = new LineService_acquireCallTicket_result({success: result});
        output.writeMessageBegin("acquireCallTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_acquireCallTicket_result(err);
          output.writeMessageBegin("acquireCallTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireCallTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acquireCallTicket(args.to, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_acquireCallTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acquireCallTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acquireCallTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_acquireEncryptedAccessToken = function(seqid, input, output) {
  var args = new LineService_acquireEncryptedAccessToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.acquireEncryptedAccessToken.length === 1) {
    Q.fcall(this._handler.acquireEncryptedAccessToken, args.featureType)
      .then(function(result) {
        var result = new LineService_acquireEncryptedAccessToken_result({success: result});
        output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_acquireEncryptedAccessToken_result(err);
          output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.acquireEncryptedAccessToken(args.featureType, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_acquireEncryptedAccessToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("acquireEncryptedAccessToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_addSnsId = function(seqid, input, output) {
  var args = new LineService_addSnsId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addSnsId.length === 2) {
    Q.fcall(this._handler.addSnsId, args.snsIdType, args.snsAccessToken)
      .then(function(result) {
        var result = new LineService_addSnsId_result({success: result});
        output.writeMessageBegin("addSnsId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_addSnsId_result(err);
          output.writeMessageBegin("addSnsId", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addSnsId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addSnsId(args.snsIdType, args.snsAccessToken, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_addSnsId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("addSnsId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addSnsId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_blockContact = function(seqid, input, output) {
  var args = new LineService_blockContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.blockContact.length === 2) {
    Q.fcall(this._handler.blockContact, args.reqSeq, args.id)
      .then(function(result) {
        var result = new LineService_blockContact_result({success: result});
        output.writeMessageBegin("blockContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_blockContact_result(err);
          output.writeMessageBegin("blockContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.blockContact(args.reqSeq, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_blockContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("blockContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("blockContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_blockRecommendation = function(seqid, input, output) {
  var args = new LineService_blockRecommendation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.blockRecommendation.length === 2) {
    Q.fcall(this._handler.blockRecommendation, args.reqSeq, args.id)
      .then(function(result) {
        var result = new LineService_blockRecommendation_result({success: result});
        output.writeMessageBegin("blockRecommendation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_blockRecommendation_result(err);
          output.writeMessageBegin("blockRecommendation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("blockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.blockRecommendation(args.reqSeq, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_blockRecommendation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("blockRecommendation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("blockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_cancelGroupInvitation = function(seqid, input, output) {
  var args = new LineService_cancelGroupInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelGroupInvitation.length === 3) {
    Q.fcall(this._handler.cancelGroupInvitation, args.reqSeq, args.groupId, args.contactIds)
      .then(function(result) {
        var result = new LineService_cancelGroupInvitation_result({success: result});
        output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_cancelGroupInvitation_result(err);
          output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelGroupInvitation(args.reqSeq, args.groupId, args.contactIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_cancelGroupInvitation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_changeVerificationMethod = function(seqid, input, output) {
  var args = new LineService_changeVerificationMethod_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeVerificationMethod.length === 2) {
    Q.fcall(this._handler.changeVerificationMethod, args.sessionId, args.method)
      .then(function(result) {
        var result = new LineService_changeVerificationMethod_result({success: result});
        output.writeMessageBegin("changeVerificationMethod", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_changeVerificationMethod_result(err);
          output.writeMessageBegin("changeVerificationMethod", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("changeVerificationMethod", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeVerificationMethod(args.sessionId, args.method, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_changeVerificationMethod_result((err != null ? err : {success: result}));
        output.writeMessageBegin("changeVerificationMethod", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("changeVerificationMethod", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_clearIdentityCredential = function(seqid, input, output) {
  var args = new LineService_clearIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clearIdentityCredential.length === 0) {
    Q.fcall(this._handler.clearIdentityCredential)
      .then(function(result) {
        var result = new LineService_clearIdentityCredential_result({success: result});
        output.writeMessageBegin("clearIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_clearIdentityCredential_result(err);
          output.writeMessageBegin("clearIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clearIdentityCredential(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_clearIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("clearIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clearIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_clearMessageBox = function(seqid, input, output) {
  var args = new LineService_clearMessageBox_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clearMessageBox.length === 2) {
    Q.fcall(this._handler.clearMessageBox, args.channelId, args.messageBoxId)
      .then(function(result) {
        var result = new LineService_clearMessageBox_result({success: result});
        output.writeMessageBegin("clearMessageBox", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_clearMessageBox_result(err);
          output.writeMessageBegin("clearMessageBox", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearMessageBox", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clearMessageBox(args.channelId, args.messageBoxId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_clearMessageBox_result((err != null ? err : {success: result}));
        output.writeMessageBegin("clearMessageBox", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clearMessageBox", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_closeProximityMatch = function(seqid, input, output) {
  var args = new LineService_closeProximityMatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.closeProximityMatch.length === 1) {
    Q.fcall(this._handler.closeProximityMatch, args.sessionId)
      .then(function(result) {
        var result = new LineService_closeProximityMatch_result({success: result});
        output.writeMessageBegin("closeProximityMatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_closeProximityMatch_result(err);
          output.writeMessageBegin("closeProximityMatch", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("closeProximityMatch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.closeProximityMatch(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_closeProximityMatch_result((err != null ? err : {success: result}));
        output.writeMessageBegin("closeProximityMatch", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("closeProximityMatch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_commitSendMessage = function(seqid, input, output) {
  var args = new LineService_commitSendMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.commitSendMessage.length === 3) {
    Q.fcall(this._handler.commitSendMessage, args.seq, args.messageId, args.receiverMids)
      .then(function(result) {
        var result = new LineService_commitSendMessage_result({success: result});
        output.writeMessageBegin("commitSendMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_commitSendMessage_result(err);
          output.writeMessageBegin("commitSendMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.commitSendMessage(args.seq, args.messageId, args.receiverMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_commitSendMessage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("commitSendMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("commitSendMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_commitSendMessages = function(seqid, input, output) {
  var args = new LineService_commitSendMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.commitSendMessages.length === 3) {
    Q.fcall(this._handler.commitSendMessages, args.seq, args.messageIds, args.receiverMids)
      .then(function(result) {
        var result = new LineService_commitSendMessages_result({success: result});
        output.writeMessageBegin("commitSendMessages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_commitSendMessages_result(err);
          output.writeMessageBegin("commitSendMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitSendMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.commitSendMessages(args.seq, args.messageIds, args.receiverMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_commitSendMessages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("commitSendMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("commitSendMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_commitUpdateProfile = function(seqid, input, output) {
  var args = new LineService_commitUpdateProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.commitUpdateProfile.length === 3) {
    Q.fcall(this._handler.commitUpdateProfile, args.seq, args.attrs, args.receiverMids)
      .then(function(result) {
        var result = new LineService_commitUpdateProfile_result({success: result});
        output.writeMessageBegin("commitUpdateProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_commitUpdateProfile_result(err);
          output.writeMessageBegin("commitUpdateProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commitUpdateProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.commitUpdateProfile(args.seq, args.attrs, args.receiverMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_commitUpdateProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("commitUpdateProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("commitUpdateProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_confirmEmail = function(seqid, input, output) {
  var args = new LineService_confirmEmail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirmEmail.length === 2) {
    Q.fcall(this._handler.confirmEmail, args.verifier, args.pinCode)
      .then(function(result) {
        var result = new LineService_confirmEmail_result({success: result});
        output.writeMessageBegin("confirmEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_confirmEmail_result(err);
          output.writeMessageBegin("confirmEmail", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("confirmEmail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.confirmEmail(args.verifier, args.pinCode, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_confirmEmail_result((err != null ? err : {success: result}));
        output.writeMessageBegin("confirmEmail", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirmEmail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_createGroup = function(seqid, input, output) {
  var args = new LineService_createGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createGroup.length === 3) {
    Q.fcall(this._handler.createGroup, args.seq, args.name, args.contactIds)
      .then(function(result) {
        var result = new LineService_createGroup_result({success: result});
        output.writeMessageBegin("createGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_createGroup_result(err);
          output.writeMessageBegin("createGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createGroup(args.seq, args.name, args.contactIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_createGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_createQrcodeBase64Image = function(seqid, input, output) {
  var args = new LineService_createQrcodeBase64Image_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createQrcodeBase64Image.length === 7) {
    Q.fcall(this._handler.createQrcodeBase64Image, args.url, args.characterSet, args.imageSize, args.x, args.y, args.width, args.height)
      .then(function(result) {
        var result = new LineService_createQrcodeBase64Image_result({success: result});
        output.writeMessageBegin("createQrcodeBase64Image", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_createQrcodeBase64Image_result(err);
          output.writeMessageBegin("createQrcodeBase64Image", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createQrcodeBase64Image", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createQrcodeBase64Image(args.url, args.characterSet, args.imageSize, args.x, args.y, args.width, args.height, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_createQrcodeBase64Image_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createQrcodeBase64Image", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createQrcodeBase64Image", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_createRoom = function(seqid, input, output) {
  var args = new LineService_createRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createRoom.length === 2) {
    Q.fcall(this._handler.createRoom, args.reqSeq, args.contactIds)
      .then(function(result) {
        var result = new LineService_createRoom_result({success: result});
        output.writeMessageBegin("createRoom", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_createRoom_result(err);
          output.writeMessageBegin("createRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createRoom(args.reqSeq, args.contactIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_createRoom_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_createSession = function(seqid, input, output) {
  var args = new LineService_createSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createSession.length === 0) {
    Q.fcall(this._handler.createSession)
      .then(function(result) {
        var result = new LineService_createSession_result({success: result});
        output.writeMessageBegin("createSession", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_createSession_result(err);
          output.writeMessageBegin("createSession", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createSession(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_createSession_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createSession", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_fetchAnnouncements = function(seqid, input, output) {
  var args = new LineService_fetchAnnouncements_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchAnnouncements.length === 1) {
    Q.fcall(this._handler.fetchAnnouncements, args.lastFetchedIndex)
      .then(function(result) {
        var result = new LineService_fetchAnnouncements_result({success: result});
        output.writeMessageBegin("fetchAnnouncements", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_fetchAnnouncements_result(err);
          output.writeMessageBegin("fetchAnnouncements", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchAnnouncements", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchAnnouncements(args.lastFetchedIndex, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_fetchAnnouncements_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fetchAnnouncements", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchAnnouncements", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_fetchMessages = function(seqid, input, output) {
  var args = new LineService_fetchMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchMessages.length === 2) {
    Q.fcall(this._handler.fetchMessages, args.localTs, args.count)
      .then(function(result) {
        var result = new LineService_fetchMessages_result({success: result});
        output.writeMessageBegin("fetchMessages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_fetchMessages_result(err);
          output.writeMessageBegin("fetchMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchMessages(args.localTs, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_fetchMessages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fetchMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_fetchOperations = function(seqid, input, output) {
  var args = new LineService_fetchOperations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchOperations.length === 2) {
    Q.fcall(this._handler.fetchOperations, args.localRev, args.count)
      .then(function(result) {
        var result = new LineService_fetchOperations_result({success: result});
        output.writeMessageBegin("fetchOperations", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_fetchOperations_result(err);
          output.writeMessageBegin("fetchOperations", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchOperations", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchOperations(args.localRev, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_fetchOperations_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fetchOperations", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchOperations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_fetchOps = function(seqid, input, output) {
  var args = new LineService_fetchOps_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fetchOps.length === 4) {
    Q.fcall(this._handler.fetchOps, args.localRev, args.count, args.globalRev, args.individualRev)
      .then(function(result) {
        var result = new LineService_fetchOps_result({success: result});
        output.writeMessageBegin("fetchOps", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_fetchOps_result(err);
          output.writeMessageBegin("fetchOps", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetchOps", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_fetchOps_result((err != null ? err : {success: result}));
        output.writeMessageBegin("fetchOps", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fetchOps", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findAndAddContactsByEmail = function(seqid, input, output) {
  var args = new LineService_findAndAddContactsByEmail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByEmail.length === 2) {
    Q.fcall(this._handler.findAndAddContactsByEmail, args.reqSeq, args.emails)
      .then(function(result) {
        var result = new LineService_findAndAddContactsByEmail_result({success: result});
        output.writeMessageBegin("findAndAddContactsByEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findAndAddContactsByEmail_result(err);
          output.writeMessageBegin("findAndAddContactsByEmail", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByEmail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByEmail(args.reqSeq, args.emails, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findAndAddContactsByEmail_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findAndAddContactsByEmail", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByEmail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findAndAddContactsByMid = function(seqid, input, output) {
  var args = new LineService_findAndAddContactsByMid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByMid.length === 2) {
    Q.fcall(this._handler.findAndAddContactsByMid, args.reqSeq, args.mid)
      .then(function(result) {
        var result = new LineService_findAndAddContactsByMid_result({success: result});
        output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findAndAddContactsByMid_result(err);
          output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByMid(args.reqSeq, args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findAndAddContactsByMid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByMid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findAndAddContactsByPhone = function(seqid, input, output) {
  var args = new LineService_findAndAddContactsByPhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByPhone.length === 2) {
    Q.fcall(this._handler.findAndAddContactsByPhone, args.reqSeq, args.phones)
      .then(function(result) {
        var result = new LineService_findAndAddContactsByPhone_result({success: result});
        output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findAndAddContactsByPhone_result(err);
          output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByPhone(args.reqSeq, args.phones, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findAndAddContactsByPhone_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findAndAddContactsByUserid = function(seqid, input, output) {
  var args = new LineService_findAndAddContactsByUserid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findAndAddContactsByUserid.length === 2) {
    Q.fcall(this._handler.findAndAddContactsByUserid, args.reqSeq, args.userid)
      .then(function(result) {
        var result = new LineService_findAndAddContactsByUserid_result({success: result});
        output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findAndAddContactsByUserid_result(err);
          output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findAndAddContactsByUserid(args.reqSeq, args.userid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findAndAddContactsByUserid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findAndAddContactsByUserid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findContactByUserid = function(seqid, input, output) {
  var args = new LineService_findContactByUserid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactByUserid.length === 1) {
    Q.fcall(this._handler.findContactByUserid, args.userid)
      .then(function(result) {
        var result = new LineService_findContactByUserid_result({success: result});
        output.writeMessageBegin("findContactByUserid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findContactByUserid_result(err);
          output.writeMessageBegin("findContactByUserid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUserid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactByUserid(args.userid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findContactByUserid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findContactByUserid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactByUserid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findContactByUserTicket = function(seqid, input, output) {
  var args = new LineService_findContactByUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactByUserTicket.length === 1) {
    Q.fcall(this._handler.findContactByUserTicket, args.ticketId)
      .then(function(result) {
        var result = new LineService_findContactByUserTicket_result({success: result});
        output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findContactByUserTicket_result(err);
          output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactByUserTicket(args.ticketId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findContactByUserTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactByUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findContactsByEmail = function(seqid, input, output) {
  var args = new LineService_findContactsByEmail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactsByEmail.length === 1) {
    Q.fcall(this._handler.findContactsByEmail, args.emails)
      .then(function(result) {
        var result = new LineService_findContactsByEmail_result({success: result});
        output.writeMessageBegin("findContactsByEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findContactsByEmail_result(err);
          output.writeMessageBegin("findContactsByEmail", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactsByEmail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactsByEmail(args.emails, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findContactsByEmail_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findContactsByEmail", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactsByEmail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findContactsByPhone = function(seqid, input, output) {
  var args = new LineService_findContactsByPhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findContactsByPhone.length === 1) {
    Q.fcall(this._handler.findContactsByPhone, args.phones)
      .then(function(result) {
        var result = new LineService_findContactsByPhone_result({success: result});
        output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findContactsByPhone_result(err);
          output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findContactsByPhone(args.phones, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findContactsByPhone_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findContactsByPhone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_findSnsIdUserStatus = function(seqid, input, output) {
  var args = new LineService_findSnsIdUserStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findSnsIdUserStatus.length === 3) {
    Q.fcall(this._handler.findSnsIdUserStatus, args.snsIdType, args.snsAccessToken, args.udidHash)
      .then(function(result) {
        var result = new LineService_findSnsIdUserStatus_result({success: result});
        output.writeMessageBegin("findSnsIdUserStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_findSnsIdUserStatus_result(err);
          output.writeMessageBegin("findSnsIdUserStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findSnsIdUserStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findSnsIdUserStatus(args.snsIdType, args.snsAccessToken, args.udidHash, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_findSnsIdUserStatus_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findSnsIdUserStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findSnsIdUserStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_finishUpdateVerification = function(seqid, input, output) {
  var args = new LineService_finishUpdateVerification_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.finishUpdateVerification.length === 1) {
    Q.fcall(this._handler.finishUpdateVerification, args.sessionId)
      .then(function(result) {
        var result = new LineService_finishUpdateVerification_result({success: result});
        output.writeMessageBegin("finishUpdateVerification", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_finishUpdateVerification_result(err);
          output.writeMessageBegin("finishUpdateVerification", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("finishUpdateVerification", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.finishUpdateVerification(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_finishUpdateVerification_result((err != null ? err : {success: result}));
        output.writeMessageBegin("finishUpdateVerification", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("finishUpdateVerification", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_generateUserTicket = function(seqid, input, output) {
  var args = new LineService_generateUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generateUserTicket.length === 2) {
    Q.fcall(this._handler.generateUserTicket, args.expirationTime, args.maxUseCount)
      .then(function(result) {
        var result = new LineService_generateUserTicket_result({success: result});
        output.writeMessageBegin("generateUserTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_generateUserTicket_result(err);
          output.writeMessageBegin("generateUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("generateUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.generateUserTicket(args.expirationTime, args.maxUseCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_generateUserTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("generateUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generateUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getAcceptedProximityMatches = function(seqid, input, output) {
  var args = new LineService_getAcceptedProximityMatches_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAcceptedProximityMatches.length === 1) {
    Q.fcall(this._handler.getAcceptedProximityMatches, args.sessionId)
      .then(function(result) {
        var result = new LineService_getAcceptedProximityMatches_result({success: result});
        output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getAcceptedProximityMatches_result(err);
          output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAcceptedProximityMatches(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getAcceptedProximityMatches_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAcceptedProximityMatches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getActiveBuddySubscriberIds = function(seqid, input, output) {
  var args = new LineService_getActiveBuddySubscriberIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActiveBuddySubscriberIds.length === 0) {
    Q.fcall(this._handler.getActiveBuddySubscriberIds)
      .then(function(result) {
        var result = new LineService_getActiveBuddySubscriberIds_result({success: result});
        output.writeMessageBegin("getActiveBuddySubscriberIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getActiveBuddySubscriberIds_result(err);
          output.writeMessageBegin("getActiveBuddySubscriberIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActiveBuddySubscriberIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActiveBuddySubscriberIds(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getActiveBuddySubscriberIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getActiveBuddySubscriberIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActiveBuddySubscriberIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getAllContactIds = function(seqid, input, output) {
  var args = new LineService_getAllContactIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllContactIds.length === 0) {
    Q.fcall(this._handler.getAllContactIds)
      .then(function(result) {
        var result = new LineService_getAllContactIds_result({success: result});
        output.writeMessageBegin("getAllContactIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getAllContactIds_result(err);
          output.writeMessageBegin("getAllContactIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllContactIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllContactIds(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getAllContactIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllContactIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllContactIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getAuthQrcode = function(seqid, input, output) {
  var args = new LineService_getAuthQrcode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAuthQrcode.length === 2) {
    Q.fcall(this._handler.getAuthQrcode, args.keepLoggedIn, args.systemName)
      .then(function(result) {
        var result = new LineService_getAuthQrcode_result({success: result});
        output.writeMessageBegin("getAuthQrcode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getAuthQrcode_result(err);
          output.writeMessageBegin("getAuthQrcode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAuthQrcode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAuthQrcode(args.keepLoggedIn, args.systemName, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getAuthQrcode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAuthQrcode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAuthQrcode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBlockedContactIds = function(seqid, input, output) {
  var args = new LineService_getBlockedContactIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlockedContactIds.length === 0) {
    Q.fcall(this._handler.getBlockedContactIds)
      .then(function(result) {
        var result = new LineService_getBlockedContactIds_result({success: result});
        output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBlockedContactIds_result(err);
          output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlockedContactIds(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBlockedContactIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBlockedContactIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBlockedContactIdsByRange = function(seqid, input, output) {
  var args = new LineService_getBlockedContactIdsByRange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlockedContactIdsByRange.length === 2) {
    Q.fcall(this._handler.getBlockedContactIdsByRange, args.start, args.count)
      .then(function(result) {
        var result = new LineService_getBlockedContactIdsByRange_result({success: result});
        output.writeMessageBegin("getBlockedContactIdsByRange", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBlockedContactIdsByRange_result(err);
          output.writeMessageBegin("getBlockedContactIdsByRange", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedContactIdsByRange", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlockedContactIdsByRange(args.start, args.count, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBlockedContactIdsByRange_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBlockedContactIdsByRange", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBlockedContactIdsByRange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBlockedRecommendationIds = function(seqid, input, output) {
  var args = new LineService_getBlockedRecommendationIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlockedRecommendationIds.length === 0) {
    Q.fcall(this._handler.getBlockedRecommendationIds)
      .then(function(result) {
        var result = new LineService_getBlockedRecommendationIds_result({success: result});
        output.writeMessageBegin("getBlockedRecommendationIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBlockedRecommendationIds_result(err);
          output.writeMessageBegin("getBlockedRecommendationIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBlockedRecommendationIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlockedRecommendationIds(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBlockedRecommendationIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBlockedRecommendationIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBlockedRecommendationIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyBlockerIds = function(seqid, input, output) {
  var args = new LineService_getBuddyBlockerIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyBlockerIds.length === 0) {
    Q.fcall(this._handler.getBuddyBlockerIds)
      .then(function(result) {
        var result = new LineService_getBuddyBlockerIds_result({success: result});
        output.writeMessageBegin("getBuddyBlockerIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyBlockerIds_result(err);
          output.writeMessageBegin("getBuddyBlockerIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyBlockerIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyBlockerIds(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyBlockerIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyBlockerIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyBlockerIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getBuddyLocation = function(seqid, input, output) {
  var args = new LineService_getBuddyLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBuddyLocation.length === 2) {
    Q.fcall(this._handler.getBuddyLocation, args.mid, args.index)
      .then(function(result) {
        var result = new LineService_getBuddyLocation_result({success: result});
        output.writeMessageBegin("getBuddyLocation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getBuddyLocation_result(err);
          output.writeMessageBegin("getBuddyLocation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBuddyLocation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBuddyLocation(args.mid, args.index, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getBuddyLocation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getBuddyLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBuddyLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCompactContactsModifiedSince = function(seqid, input, output) {
  var args = new LineService_getCompactContactsModifiedSince_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompactContactsModifiedSince.length === 1) {
    Q.fcall(this._handler.getCompactContactsModifiedSince, args.timestamp)
      .then(function(result) {
        var result = new LineService_getCompactContactsModifiedSince_result({success: result});
        output.writeMessageBegin("getCompactContactsModifiedSince", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCompactContactsModifiedSince_result(err);
          output.writeMessageBegin("getCompactContactsModifiedSince", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactContactsModifiedSince", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCompactContactsModifiedSince(args.timestamp, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCompactContactsModifiedSince_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCompactContactsModifiedSince", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompactContactsModifiedSince", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCompactGroup = function(seqid, input, output) {
  var args = new LineService_getCompactGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompactGroup.length === 1) {
    Q.fcall(this._handler.getCompactGroup, args.groupId)
      .then(function(result) {
        var result = new LineService_getCompactGroup_result({success: result});
        output.writeMessageBegin("getCompactGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCompactGroup_result(err);
          output.writeMessageBegin("getCompactGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCompactGroup(args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCompactGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCompactGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompactGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCompactRoom = function(seqid, input, output) {
  var args = new LineService_getCompactRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCompactRoom.length === 1) {
    Q.fcall(this._handler.getCompactRoom, args.roomId)
      .then(function(result) {
        var result = new LineService_getCompactRoom_result({success: result});
        output.writeMessageBegin("getCompactRoom", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCompactRoom_result(err);
          output.writeMessageBegin("getCompactRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCompactRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCompactRoom(args.roomId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCompactRoom_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCompactRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCompactRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getContact = function(seqid, input, output) {
  var args = new LineService_getContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContact.length === 1) {
    Q.fcall(this._handler.getContact, args.id)
      .then(function(result) {
        var result = new LineService_getContact_result({success: result});
        output.writeMessageBegin("getContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getContact_result(err);
          output.writeMessageBegin("getContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContact(args.id, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getContacts = function(seqid, input, output) {
  var args = new LineService_getContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContacts.length === 1) {
    Q.fcall(this._handler.getContacts, args.ids)
      .then(function(result) {
        var result = new LineService_getContacts_result({success: result});
        output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getContacts_result(err);
          output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContacts(args.ids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getCountryWithRequestIp = function(seqid, input, output) {
  var args = new LineService_getCountryWithRequestIp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCountryWithRequestIp.length === 0) {
    Q.fcall(this._handler.getCountryWithRequestIp)
      .then(function(result) {
        var result = new LineService_getCountryWithRequestIp_result({success: result});
        output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getCountryWithRequestIp_result(err);
          output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCountryWithRequestIp(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getCountryWithRequestIp_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCountryWithRequestIp", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getFavoriteMids = function(seqid, input, output) {
  var args = new LineService_getFavoriteMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getFavoriteMids.length === 0) {
    Q.fcall(this._handler.getFavoriteMids)
      .then(function(result) {
        var result = new LineService_getFavoriteMids_result({success: result});
        output.writeMessageBegin("getFavoriteMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getFavoriteMids_result(err);
          output.writeMessageBegin("getFavoriteMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getFavoriteMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getFavoriteMids(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getFavoriteMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getFavoriteMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFavoriteMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getGroup = function(seqid, input, output) {
  var args = new LineService_getGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroup.length === 1) {
    Q.fcall(this._handler.getGroup, args.groupId)
      .then(function(result) {
        var result = new LineService_getGroup_result({success: result});
        output.writeMessageBegin("getGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getGroup_result(err);
          output.writeMessageBegin("getGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroup(args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getGroupIdsInvited = function(seqid, input, output) {
  var args = new LineService_getGroupIdsInvited_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupIdsInvited.length === 0) {
    Q.fcall(this._handler.getGroupIdsInvited)
      .then(function(result) {
        var result = new LineService_getGroupIdsInvited_result({success: result});
        output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getGroupIdsInvited_result(err);
          output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupIdsInvited(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getGroupIdsInvited_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupIdsInvited", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getGroupIdsJoined = function(seqid, input, output) {
  var args = new LineService_getGroupIdsJoined_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroupIdsJoined.length === 0) {
    Q.fcall(this._handler.getGroupIdsJoined)
      .then(function(result) {
        var result = new LineService_getGroupIdsJoined_result({success: result});
        output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getGroupIdsJoined_result(err);
          output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroupIdsJoined(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getGroupIdsJoined_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroupIdsJoined", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getGroups = function(seqid, input, output) {
  var args = new LineService_getGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getGroups.length === 1) {
    Q.fcall(this._handler.getGroups, args.groupIds)
      .then(function(result) {
        var result = new LineService_getGroups_result({success: result});
        output.writeMessageBegin("getGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getGroups_result(err);
          output.writeMessageBegin("getGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getGroups(args.groupIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getGroups_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getHiddenContactMids = function(seqid, input, output) {
  var args = new LineService_getHiddenContactMids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getHiddenContactMids.length === 0) {
    Q.fcall(this._handler.getHiddenContactMids)
      .then(function(result) {
        var result = new LineService_getHiddenContactMids_result({success: result});
        output.writeMessageBegin("getHiddenContactMids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getHiddenContactMids_result(err);
          output.writeMessageBegin("getHiddenContactMids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getHiddenContactMids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getHiddenContactMids(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getHiddenContactMids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getHiddenContactMids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getHiddenContactMids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getIdentityIdentifier = function(seqid, input, output) {
  var args = new LineService_getIdentityIdentifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getIdentityIdentifier.length === 0) {
    Q.fcall(this._handler.getIdentityIdentifier)
      .then(function(result) {
        var result = new LineService_getIdentityIdentifier_result({success: result});
        output.writeMessageBegin("getIdentityIdentifier", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getIdentityIdentifier_result(err);
          output.writeMessageBegin("getIdentityIdentifier", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getIdentityIdentifier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getIdentityIdentifier(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getIdentityIdentifier_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getIdentityIdentifier", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getIdentityIdentifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getLastAnnouncementIndex = function(seqid, input, output) {
  var args = new LineService_getLastAnnouncementIndex_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLastAnnouncementIndex.length === 0) {
    Q.fcall(this._handler.getLastAnnouncementIndex)
      .then(function(result) {
        var result = new LineService_getLastAnnouncementIndex_result({success: result});
        output.writeMessageBegin("getLastAnnouncementIndex", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getLastAnnouncementIndex_result(err);
          output.writeMessageBegin("getLastAnnouncementIndex", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLastAnnouncementIndex", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLastAnnouncementIndex(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getLastAnnouncementIndex_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getLastAnnouncementIndex", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLastAnnouncementIndex", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getLastOpRevision = function(seqid, input, output) {
  var args = new LineService_getLastOpRevision_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLastOpRevision.length === 0) {
    Q.fcall(this._handler.getLastOpRevision)
      .then(function(result) {
        var result = new LineService_getLastOpRevision_result({success: result});
        output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getLastOpRevision_result(err);
          output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLastOpRevision(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getLastOpRevision_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLastOpRevision", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBox = function(seqid, input, output) {
  var args = new LineService_getMessageBox_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBox.length === 3) {
    Q.fcall(this._handler.getMessageBox, args.channelId, args.messageBoxId, args.lastMessagesCount)
      .then(function(result) {
        var result = new LineService_getMessageBox_result({success: result});
        output.writeMessageBegin("getMessageBox", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBox_result(err);
          output.writeMessageBegin("getMessageBox", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBox", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBox(args.channelId, args.messageBoxId, args.lastMessagesCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBox_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBox", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBox", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBoxCompactWrapUp = function(seqid, input, output) {
  var args = new LineService_getMessageBoxCompactWrapUp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBoxCompactWrapUp.length === 1) {
    Q.fcall(this._handler.getMessageBoxCompactWrapUp, args.mid)
      .then(function(result) {
        var result = new LineService_getMessageBoxCompactWrapUp_result({success: result});
        output.writeMessageBegin("getMessageBoxCompactWrapUp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBoxCompactWrapUp_result(err);
          output.writeMessageBegin("getMessageBoxCompactWrapUp", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBoxCompactWrapUp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBoxCompactWrapUp(args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBoxCompactWrapUp_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBoxCompactWrapUp", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBoxCompactWrapUp", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBoxCompactWrapUpList = function(seqid, input, output) {
  var args = new LineService_getMessageBoxCompactWrapUpList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBoxCompactWrapUpList.length === 2) {
    Q.fcall(this._handler.getMessageBoxCompactWrapUpList, args.start, args.messageBoxCount)
      .then(function(result) {
        var result = new LineService_getMessageBoxCompactWrapUpList_result({success: result});
        output.writeMessageBegin("getMessageBoxCompactWrapUpList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBoxCompactWrapUpList_result(err);
          output.writeMessageBegin("getMessageBoxCompactWrapUpList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBoxCompactWrapUpList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBoxCompactWrapUpList(args.start, args.messageBoxCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBoxCompactWrapUpList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBoxCompactWrapUpList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBoxCompactWrapUpList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBoxList = function(seqid, input, output) {
  var args = new LineService_getMessageBoxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBoxList.length === 2) {
    Q.fcall(this._handler.getMessageBoxList, args.channelId, args.lastMessagesCount)
      .then(function(result) {
        var result = new LineService_getMessageBoxList_result({success: result});
        output.writeMessageBegin("getMessageBoxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBoxList_result(err);
          output.writeMessageBegin("getMessageBoxList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBoxList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBoxList(args.channelId, args.lastMessagesCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBoxList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBoxList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBoxList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBoxListByStatus = function(seqid, input, output) {
  var args = new LineService_getMessageBoxListByStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBoxListByStatus.length === 3) {
    Q.fcall(this._handler.getMessageBoxListByStatus, args.channelId, args.lastMessagesCount, args.status)
      .then(function(result) {
        var result = new LineService_getMessageBoxListByStatus_result({success: result});
        output.writeMessageBegin("getMessageBoxListByStatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBoxListByStatus_result(err);
          output.writeMessageBegin("getMessageBoxListByStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBoxListByStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBoxListByStatus(args.channelId, args.lastMessagesCount, args.status, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBoxListByStatus_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBoxListByStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBoxListByStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBoxWrapUp = function(seqid, input, output) {
  var args = new LineService_getMessageBoxWrapUp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBoxWrapUp.length === 1) {
    Q.fcall(this._handler.getMessageBoxWrapUp, args.mid)
      .then(function(result) {
        var result = new LineService_getMessageBoxWrapUp_result({success: result});
        output.writeMessageBegin("getMessageBoxWrapUp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBoxWrapUp_result(err);
          output.writeMessageBegin("getMessageBoxWrapUp", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBoxWrapUp", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBoxWrapUp(args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBoxWrapUp_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBoxWrapUp", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBoxWrapUp", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessageBoxWrapUpList = function(seqid, input, output) {
  var args = new LineService_getMessageBoxWrapUpList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessageBoxWrapUpList.length === 2) {
    Q.fcall(this._handler.getMessageBoxWrapUpList, args.start, args.messageBoxCount)
      .then(function(result) {
        var result = new LineService_getMessageBoxWrapUpList_result({success: result});
        output.writeMessageBegin("getMessageBoxWrapUpList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessageBoxWrapUpList_result(err);
          output.writeMessageBegin("getMessageBoxWrapUpList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessageBoxWrapUpList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessageBoxWrapUpList(args.start, args.messageBoxCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessageBoxWrapUpList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessageBoxWrapUpList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessageBoxWrapUpList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getMessagesBySequenceNumber = function(seqid, input, output) {
  var args = new LineService_getMessagesBySequenceNumber_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMessagesBySequenceNumber.length === 4) {
    Q.fcall(this._handler.getMessagesBySequenceNumber, args.channelId, args.messageBoxId, args.startSeq, args.endSeq)
      .then(function(result) {
        var result = new LineService_getMessagesBySequenceNumber_result({success: result});
        output.writeMessageBegin("getMessagesBySequenceNumber", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getMessagesBySequenceNumber_result(err);
          output.writeMessageBegin("getMessagesBySequenceNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMessagesBySequenceNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMessagesBySequenceNumber(args.channelId, args.messageBoxId, args.startSeq, args.endSeq, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getMessagesBySequenceNumber_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getMessagesBySequenceNumber", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMessagesBySequenceNumber", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getNextMessages = function(seqid, input, output) {
  var args = new LineService_getNextMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNextMessages.length === 3) {
    Q.fcall(this._handler.getNextMessages, args.messageBoxId, args.startSeq, args.messagesCount)
      .then(function(result) {
        var result = new LineService_getNextMessages_result({success: result});
        output.writeMessageBegin("getNextMessages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getNextMessages_result(err);
          output.writeMessageBegin("getNextMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNextMessages(args.messageBoxId, args.startSeq, args.messagesCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getNextMessages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNextMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNextMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getNotificationPolicy = function(seqid, input, output) {
  var args = new LineService_getNotificationPolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNotificationPolicy.length === 1) {
    Q.fcall(this._handler.getNotificationPolicy, args.carrier)
      .then(function(result) {
        var result = new LineService_getNotificationPolicy_result({success: result});
        output.writeMessageBegin("getNotificationPolicy", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getNotificationPolicy_result(err);
          output.writeMessageBegin("getNotificationPolicy", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNotificationPolicy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNotificationPolicy(args.carrier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getNotificationPolicy_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNotificationPolicy", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNotificationPolicy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getPreviousMessages = function(seqid, input, output) {
  var args = new LineService_getPreviousMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPreviousMessages.length === 3) {
    Q.fcall(this._handler.getPreviousMessages, args.messageBoxId, args.endSeq, args.messagesCount)
      .then(function(result) {
        var result = new LineService_getPreviousMessages_result({success: result});
        output.writeMessageBegin("getPreviousMessages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getPreviousMessages_result(err);
          output.writeMessageBegin("getPreviousMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPreviousMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPreviousMessages(args.messageBoxId, args.endSeq, args.messagesCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getPreviousMessages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getPreviousMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPreviousMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProfile = function(seqid, input, output) {
  var args = new LineService_getProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProfile.length === 0) {
    Q.fcall(this._handler.getProfile)
      .then(function(result) {
        var result = new LineService_getProfile_result({success: result});
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProfile_result(err);
          output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProfile(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProximityMatchCandidateList = function(seqid, input, output) {
  var args = new LineService_getProximityMatchCandidateList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProximityMatchCandidateList.length === 1) {
    Q.fcall(this._handler.getProximityMatchCandidateList, args.sessionId)
      .then(function(result) {
        var result = new LineService_getProximityMatchCandidateList_result({success: result});
        output.writeMessageBegin("getProximityMatchCandidateList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProximityMatchCandidateList_result(err);
          output.writeMessageBegin("getProximityMatchCandidateList", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProximityMatchCandidateList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProximityMatchCandidateList(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProximityMatchCandidateList_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProximityMatchCandidateList", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProximityMatchCandidateList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getProximityMatchCandidates = function(seqid, input, output) {
  var args = new LineService_getProximityMatchCandidates_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProximityMatchCandidates.length === 1) {
    Q.fcall(this._handler.getProximityMatchCandidates, args.sessionId)
      .then(function(result) {
        var result = new LineService_getProximityMatchCandidates_result({success: result});
        output.writeMessageBegin("getProximityMatchCandidates", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getProximityMatchCandidates_result(err);
          output.writeMessageBegin("getProximityMatchCandidates", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProximityMatchCandidates", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProximityMatchCandidates(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getProximityMatchCandidates_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProximityMatchCandidates", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProximityMatchCandidates", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getRecentMessages = function(seqid, input, output) {
  var args = new LineService_getRecentMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRecentMessages.length === 2) {
    Q.fcall(this._handler.getRecentMessages, args.messageBoxId, args.messagesCount)
      .then(function(result) {
        var result = new LineService_getRecentMessages_result({success: result});
        output.writeMessageBegin("getRecentMessages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getRecentMessages_result(err);
          output.writeMessageBegin("getRecentMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecentMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRecentMessages(args.messageBoxId, args.messagesCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getRecentMessages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRecentMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecentMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getRecommendationIds = function(seqid, input, output) {
  var args = new LineService_getRecommendationIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRecommendationIds.length === 0) {
    Q.fcall(this._handler.getRecommendationIds)
      .then(function(result) {
        var result = new LineService_getRecommendationIds_result({success: result});
        output.writeMessageBegin("getRecommendationIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getRecommendationIds_result(err);
          output.writeMessageBegin("getRecommendationIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRecommendationIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRecommendationIds(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getRecommendationIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRecommendationIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRecommendationIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getRoom = function(seqid, input, output) {
  var args = new LineService_getRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRoom.length === 1) {
    Q.fcall(this._handler.getRoom, args.roomId)
      .then(function(result) {
        var result = new LineService_getRoom_result({success: result});
        output.writeMessageBegin("getRoom", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getRoom_result(err);
          output.writeMessageBegin("getRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRoom(args.roomId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getRoom_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getRSAKeyInfo = function(seqid, input, output) {
  var args = new LineService_getRSAKeyInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRSAKeyInfo.length === 1) {
    Q.fcall(this._handler.getRSAKeyInfo, args.provider)
      .then(function(result) {
        var result = new LineService_getRSAKeyInfo_result({success: result});
        output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getRSAKeyInfo_result(err);
          output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRSAKeyInfo(args.provider, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getRSAKeyInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRSAKeyInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getServerTime = function(seqid, input, output) {
  var args = new LineService_getServerTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServerTime.length === 0) {
    Q.fcall(this._handler.getServerTime)
      .then(function(result) {
        var result = new LineService_getServerTime_result({success: result});
        output.writeMessageBegin("getServerTime", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getServerTime_result(err);
          output.writeMessageBegin("getServerTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServerTime(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getServerTime_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getServerTime", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServerTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSessions = function(seqid, input, output) {
  var args = new LineService_getSessions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSessions.length === 0) {
    Q.fcall(this._handler.getSessions)
      .then(function(result) {
        var result = new LineService_getSessions_result({success: result});
        output.writeMessageBegin("getSessions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSessions_result(err);
          output.writeMessageBegin("getSessions", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSessions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSessions(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSessions_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSessions", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSessions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSettings = function(seqid, input, output) {
  var args = new LineService_getSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSettings.length === 0) {
    Q.fcall(this._handler.getSettings)
      .then(function(result) {
        var result = new LineService_getSettings_result({success: result});
        output.writeMessageBegin("getSettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSettings_result(err);
          output.writeMessageBegin("getSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSettings(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSettingsAttributes = function(seqid, input, output) {
  var args = new LineService_getSettingsAttributes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSettingsAttributes.length === 1) {
    Q.fcall(this._handler.getSettingsAttributes, args.attrBitset)
      .then(function(result) {
        var result = new LineService_getSettingsAttributes_result({success: result});
        output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSettingsAttributes_result(err);
          output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSettingsAttributes(args.attrBitset, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSettingsAttributes_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSettingsAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getSystemConfiguration = function(seqid, input, output) {
  var args = new LineService_getSystemConfiguration_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSystemConfiguration.length === 0) {
    Q.fcall(this._handler.getSystemConfiguration)
      .then(function(result) {
        var result = new LineService_getSystemConfiguration_result({success: result});
        output.writeMessageBegin("getSystemConfiguration", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getSystemConfiguration_result(err);
          output.writeMessageBegin("getSystemConfiguration", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSystemConfiguration", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSystemConfiguration(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getSystemConfiguration_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSystemConfiguration", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSystemConfiguration", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getUserTicket = function(seqid, input, output) {
  var args = new LineService_getUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserTicket.length === 0) {
    Q.fcall(this._handler.getUserTicket)
      .then(function(result) {
        var result = new LineService_getUserTicket_result({success: result});
        output.writeMessageBegin("getUserTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getUserTicket_result(err);
          output.writeMessageBegin("getUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserTicket(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getUserTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_getWapInvitation = function(seqid, input, output) {
  var args = new LineService_getWapInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getWapInvitation.length === 1) {
    Q.fcall(this._handler.getWapInvitation, args.invitationHash)
      .then(function(result) {
        var result = new LineService_getWapInvitation_result({success: result});
        output.writeMessageBegin("getWapInvitation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_getWapInvitation_result(err);
          output.writeMessageBegin("getWapInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getWapInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getWapInvitation(args.invitationHash, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_getWapInvitation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getWapInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getWapInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_invalidateUserTicket = function(seqid, input, output) {
  var args = new LineService_invalidateUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.invalidateUserTicket.length === 0) {
    Q.fcall(this._handler.invalidateUserTicket)
      .then(function(result) {
        var result = new LineService_invalidateUserTicket_result({success: result});
        output.writeMessageBegin("invalidateUserTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_invalidateUserTicket_result(err);
          output.writeMessageBegin("invalidateUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invalidateUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.invalidateUserTicket(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_invalidateUserTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("invalidateUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("invalidateUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_inviteFriendsBySms = function(seqid, input, output) {
  var args = new LineService_inviteFriendsBySms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteFriendsBySms.length === 1) {
    Q.fcall(this._handler.inviteFriendsBySms, args.phoneNumberList)
      .then(function(result) {
        var result = new LineService_inviteFriendsBySms_result({success: result});
        output.writeMessageBegin("inviteFriendsBySms", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_inviteFriendsBySms_result(err);
          output.writeMessageBegin("inviteFriendsBySms", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteFriendsBySms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteFriendsBySms(args.phoneNumberList, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_inviteFriendsBySms_result((err != null ? err : {success: result}));
        output.writeMessageBegin("inviteFriendsBySms", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteFriendsBySms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_inviteIntoGroup = function(seqid, input, output) {
  var args = new LineService_inviteIntoGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteIntoGroup.length === 3) {
    Q.fcall(this._handler.inviteIntoGroup, args.reqSeq, args.groupId, args.contactIds)
      .then(function(result) {
        var result = new LineService_inviteIntoGroup_result({success: result});
        output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_inviteIntoGroup_result(err);
          output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteIntoGroup(args.reqSeq, args.groupId, args.contactIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_inviteIntoGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteIntoGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_inviteIntoRoom = function(seqid, input, output) {
  var args = new LineService_inviteIntoRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteIntoRoom.length === 3) {
    Q.fcall(this._handler.inviteIntoRoom, args.reqSeq, args.roomId, args.contactIds)
      .then(function(result) {
        var result = new LineService_inviteIntoRoom_result({success: result});
        output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_inviteIntoRoom_result(err);
          output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteIntoRoom(args.reqSeq, args.roomId, args.contactIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_inviteIntoRoom_result((err != null ? err : {success: result}));
        output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteIntoRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_inviteViaEmail = function(seqid, input, output) {
  var args = new LineService_inviteViaEmail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.inviteViaEmail.length === 3) {
    Q.fcall(this._handler.inviteViaEmail, args.reqSeq, args.email, args.name)
      .then(function(result) {
        var result = new LineService_inviteViaEmail_result({success: result});
        output.writeMessageBegin("inviteViaEmail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_inviteViaEmail_result(err);
          output.writeMessageBegin("inviteViaEmail", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inviteViaEmail", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.inviteViaEmail(args.reqSeq, args.email, args.name, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_inviteViaEmail_result((err != null ? err : {success: result}));
        output.writeMessageBegin("inviteViaEmail", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("inviteViaEmail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_isIdentityIdentifierAvailable = function(seqid, input, output) {
  var args = new LineService_isIdentityIdentifierAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isIdentityIdentifierAvailable.length === 2) {
    Q.fcall(this._handler.isIdentityIdentifierAvailable, args.provider, args.identifier)
      .then(function(result) {
        var result = new LineService_isIdentityIdentifierAvailable_result({success: result});
        output.writeMessageBegin("isIdentityIdentifierAvailable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_isIdentityIdentifierAvailable_result(err);
          output.writeMessageBegin("isIdentityIdentifierAvailable", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isIdentityIdentifierAvailable", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isIdentityIdentifierAvailable(args.provider, args.identifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_isIdentityIdentifierAvailable_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isIdentityIdentifierAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isIdentityIdentifierAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_isUseridAvailable = function(seqid, input, output) {
  var args = new LineService_isUseridAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isUseridAvailable.length === 1) {
    Q.fcall(this._handler.isUseridAvailable, args.userid)
      .then(function(result) {
        var result = new LineService_isUseridAvailable_result({success: result});
        output.writeMessageBegin("isUseridAvailable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_isUseridAvailable_result(err);
          output.writeMessageBegin("isUseridAvailable", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isUseridAvailable", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isUseridAvailable(args.userid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_isUseridAvailable_result((err != null ? err : {success: result}));
        output.writeMessageBegin("isUseridAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isUseridAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_kickoutFromGroup = function(seqid, input, output) {
  var args = new LineService_kickoutFromGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.kickoutFromGroup.length === 3) {
    Q.fcall(this._handler.kickoutFromGroup, args.reqSeq, args.groupId, args.contactIds)
      .then(function(result) {
        var result = new LineService_kickoutFromGroup_result({success: result});
        output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_kickoutFromGroup_result(err);
          output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.kickoutFromGroup(args.reqSeq, args.groupId, args.contactIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_kickoutFromGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("kickoutFromGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_leaveGroup = function(seqid, input, output) {
  var args = new LineService_leaveGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.leaveGroup.length === 2) {
    Q.fcall(this._handler.leaveGroup, args.reqSeq, args.groupId)
      .then(function(result) {
        var result = new LineService_leaveGroup_result({success: result});
        output.writeMessageBegin("leaveGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_leaveGroup_result(err);
          output.writeMessageBegin("leaveGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("leaveGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.leaveGroup(args.reqSeq, args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_leaveGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("leaveGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("leaveGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_leaveRoom = function(seqid, input, output) {
  var args = new LineService_leaveRoom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.leaveRoom.length === 2) {
    Q.fcall(this._handler.leaveRoom, args.reqSeq, args.roomId)
      .then(function(result) {
        var result = new LineService_leaveRoom_result({success: result});
        output.writeMessageBegin("leaveRoom", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_leaveRoom_result(err);
          output.writeMessageBegin("leaveRoom", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("leaveRoom", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.leaveRoom(args.reqSeq, args.roomId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_leaveRoom_result((err != null ? err : {success: result}));
        output.writeMessageBegin("leaveRoom", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("leaveRoom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_loginWithIdentityCredential = function(seqid, input, output) {
  var args = new LineService_loginWithIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithIdentityCredential.length === 7) {
    Q.fcall(this._handler.loginWithIdentityCredential, args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate)
      .then(function(result) {
        var result = new LineService_loginWithIdentityCredential_result({success: result});
        output.writeMessageBegin("loginWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_loginWithIdentityCredential_result(err);
          output.writeMessageBegin("loginWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithIdentityCredential(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_loginWithIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_loginWithIdentityCredentialForCertificate = function(seqid, input, output) {
  var args = new LineService_loginWithIdentityCredentialForCertificate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithIdentityCredentialForCertificate.length === 7) {
    Q.fcall(this._handler.loginWithIdentityCredentialForCertificate, args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate)
      .then(function(result) {
        var result = new LineService_loginWithIdentityCredentialForCertificate_result({success: result});
        output.writeMessageBegin("loginWithIdentityCredentialForCertificate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_loginWithIdentityCredentialForCertificate_result(err);
          output.writeMessageBegin("loginWithIdentityCredentialForCertificate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithIdentityCredentialForCertificate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithIdentityCredentialForCertificate(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_loginWithIdentityCredentialForCertificate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithIdentityCredentialForCertificate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithIdentityCredentialForCertificate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_loginWithVerifier = function(seqid, input, output) {
  var args = new LineService_loginWithVerifier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithVerifier.length === 1) {
    Q.fcall(this._handler.loginWithVerifier, args.verifier)
      .then(function(result) {
        var result = new LineService_loginWithVerifier_result({success: result});
        output.writeMessageBegin("loginWithVerifier", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_loginWithVerifier_result(err);
          output.writeMessageBegin("loginWithVerifier", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithVerifier", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithVerifier(args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_loginWithVerifier_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithVerifier", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithVerifier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_loginWithVerifierForCerificate = function(seqid, input, output) {
  var args = new LineService_loginWithVerifierForCerificate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithVerifierForCerificate.length === 1) {
    Q.fcall(this._handler.loginWithVerifierForCerificate, args.verifier)
      .then(function(result) {
        var result = new LineService_loginWithVerifierForCerificate_result({success: result});
        output.writeMessageBegin("loginWithVerifierForCerificate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_loginWithVerifierForCerificate_result(err);
          output.writeMessageBegin("loginWithVerifierForCerificate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithVerifierForCerificate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithVerifierForCerificate(args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_loginWithVerifierForCerificate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithVerifierForCerificate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithVerifierForCerificate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_loginWithVerifierForCertificate = function(seqid, input, output) {
  var args = new LineService_loginWithVerifierForCertificate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.loginWithVerifierForCertificate.length === 1) {
    Q.fcall(this._handler.loginWithVerifierForCertificate, args.verifier)
      .then(function(result) {
        var result = new LineService_loginWithVerifierForCertificate_result({success: result});
        output.writeMessageBegin("loginWithVerifierForCertificate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_loginWithVerifierForCertificate_result(err);
          output.writeMessageBegin("loginWithVerifierForCertificate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("loginWithVerifierForCertificate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.loginWithVerifierForCertificate(args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_loginWithVerifierForCertificate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("loginWithVerifierForCertificate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("loginWithVerifierForCertificate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_logout = function(seqid, input, output) {
  var args = new LineService_logout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logout.length === 0) {
    Q.fcall(this._handler.logout)
      .then(function(result) {
        var result = new LineService_logout_result({success: result});
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_logout_result(err);
          output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.logout(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_logout_result((err != null ? err : {success: result}));
        output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_logoutSession = function(seqid, input, output) {
  var args = new LineService_logoutSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logoutSession.length === 1) {
    Q.fcall(this._handler.logoutSession, args.tokenKey)
      .then(function(result) {
        var result = new LineService_logoutSession_result({success: result});
        output.writeMessageBegin("logoutSession", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_logoutSession_result(err);
          output.writeMessageBegin("logoutSession", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logoutSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.logoutSession(args.tokenKey, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_logoutSession_result((err != null ? err : {success: result}));
        output.writeMessageBegin("logoutSession", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logoutSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_noop = function(seqid, input, output) {
  var args = new LineService_noop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.noop.length === 0) {
    Q.fcall(this._handler.noop)
      .then(function(result) {
        var result = new LineService_noop_result({success: result});
        output.writeMessageBegin("noop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_noop_result(err);
          output.writeMessageBegin("noop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("noop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.noop(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_noop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("noop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("noop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifiedRedirect = function(seqid, input, output) {
  var args = new LineService_notifiedRedirect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifiedRedirect.length === 1) {
    Q.fcall(this._handler.notifiedRedirect, args.paramMap)
      .then(function(result) {
        var result = new LineService_notifiedRedirect_result({success: result});
        output.writeMessageBegin("notifiedRedirect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifiedRedirect_result(err);
          output.writeMessageBegin("notifiedRedirect", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifiedRedirect", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifiedRedirect(args.paramMap, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifiedRedirect_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifiedRedirect", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifiedRedirect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyBuddyOnAir = function(seqid, input, output) {
  var args = new LineService_notifyBuddyOnAir_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyBuddyOnAir.length === 2) {
    Q.fcall(this._handler.notifyBuddyOnAir, args.seq, args.receiverMids)
      .then(function(result) {
        var result = new LineService_notifyBuddyOnAir_result({success: result});
        output.writeMessageBegin("notifyBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyBuddyOnAir_result(err);
          output.writeMessageBegin("notifyBuddyOnAir", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyBuddyOnAir(args.seq, args.receiverMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyBuddyOnAir_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyBuddyOnAir", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyBuddyOnAir", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyIndividualEvent = function(seqid, input, output) {
  var args = new LineService_notifyIndividualEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyIndividualEvent.length === 2) {
    Q.fcall(this._handler.notifyIndividualEvent, args.notificationStatus, args.receiverMids)
      .then(function(result) {
        var result = new LineService_notifyIndividualEvent_result({success: result});
        output.writeMessageBegin("notifyIndividualEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyIndividualEvent_result(err);
          output.writeMessageBegin("notifyIndividualEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyIndividualEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyIndividualEvent(args.notificationStatus, args.receiverMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyIndividualEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyIndividualEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyIndividualEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyInstalled = function(seqid, input, output) {
  var args = new LineService_notifyInstalled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyInstalled.length === 2) {
    Q.fcall(this._handler.notifyInstalled, args.udidHash, args.applicationTypeWithExtensions)
      .then(function(result) {
        var result = new LineService_notifyInstalled_result({success: result});
        output.writeMessageBegin("notifyInstalled", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyInstalled", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyInstalled(args.udidHash, args.applicationTypeWithExtensions, function (err, result) {
      if (err == null) {
        var result = new LineService_notifyInstalled_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyInstalled", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyInstalled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyRegistrationComplete = function(seqid, input, output) {
  var args = new LineService_notifyRegistrationComplete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyRegistrationComplete.length === 2) {
    Q.fcall(this._handler.notifyRegistrationComplete, args.udidHash, args.applicationTypeWithExtensions)
      .then(function(result) {
        var result = new LineService_notifyRegistrationComplete_result({success: result});
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyRegistrationComplete(args.udidHash, args.applicationTypeWithExtensions, function (err, result) {
      if (err == null) {
        var result = new LineService_notifyRegistrationComplete_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyRegistrationComplete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifySleep = function(seqid, input, output) {
  var args = new LineService_notifySleep_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifySleep.length === 2) {
    Q.fcall(this._handler.notifySleep, args.lastRev, args.badge)
      .then(function(result) {
        var result = new LineService_notifySleep_result({success: result});
        output.writeMessageBegin("notifySleep", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifySleep_result(err);
          output.writeMessageBegin("notifySleep", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifySleep", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifySleep(args.lastRev, args.badge, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifySleep_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifySleep", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifySleep", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notifyUpdated = function(seqid, input, output) {
  var args = new LineService_notifyUpdated_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notifyUpdated.length === 2) {
    Q.fcall(this._handler.notifyUpdated, args.lastRev, args.deviceInfo)
      .then(function(result) {
        var result = new LineService_notifyUpdated_result({success: result});
        output.writeMessageBegin("notifyUpdated", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_notifyUpdated_result(err);
          output.writeMessageBegin("notifyUpdated", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notifyUpdated", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notifyUpdated(args.lastRev, args.deviceInfo, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_notifyUpdated_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notifyUpdated", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notifyUpdated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_openProximityMatch = function(seqid, input, output) {
  var args = new LineService_openProximityMatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.openProximityMatch.length === 1) {
    Q.fcall(this._handler.openProximityMatch, args.location)
      .then(function(result) {
        var result = new LineService_openProximityMatch_result({success: result});
        output.writeMessageBegin("openProximityMatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_openProximityMatch_result(err);
          output.writeMessageBegin("openProximityMatch", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("openProximityMatch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.openProximityMatch(args.location, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_openProximityMatch_result((err != null ? err : {success: result}));
        output.writeMessageBegin("openProximityMatch", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openProximityMatch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerBuddyUser = function(seqid, input, output) {
  var args = new LineService_registerBuddyUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerBuddyUser.length === 2) {
    Q.fcall(this._handler.registerBuddyUser, args.buddyId, args.registrarPassword)
      .then(function(result) {
        var result = new LineService_registerBuddyUser_result({success: result});
        output.writeMessageBegin("registerBuddyUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerBuddyUser_result(err);
          output.writeMessageBegin("registerBuddyUser", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddyUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerBuddyUser(args.buddyId, args.registrarPassword, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerBuddyUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerBuddyUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerBuddyUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerBuddyUserid = function(seqid, input, output) {
  var args = new LineService_registerBuddyUserid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerBuddyUserid.length === 2) {
    Q.fcall(this._handler.registerBuddyUserid, args.seq, args.userid)
      .then(function(result) {
        var result = new LineService_registerBuddyUserid_result({success: result});
        output.writeMessageBegin("registerBuddyUserid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerBuddyUserid_result(err);
          output.writeMessageBegin("registerBuddyUserid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerBuddyUserid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerBuddyUserid(args.seq, args.userid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerBuddyUserid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerBuddyUserid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerBuddyUserid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerDevice = function(seqid, input, output) {
  var args = new LineService_registerDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDevice.length === 1) {
    Q.fcall(this._handler.registerDevice, args.sessionId)
      .then(function(result) {
        var result = new LineService_registerDevice_result({success: result});
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerDevice_result(err);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDevice(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerDevice_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerDeviceWithIdentityCredential = function(seqid, input, output) {
  var args = new LineService_registerDeviceWithIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDeviceWithIdentityCredential.length === 4) {
    Q.fcall(this._handler.registerDeviceWithIdentityCredential, args.sessionId, args.provider, args.identifier, args.verifier)
      .then(function(result) {
        var result = new LineService_registerDeviceWithIdentityCredential_result({success: result});
        output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerDeviceWithIdentityCredential_result(err);
          output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDeviceWithIdentityCredential(args.sessionId, args.provider, args.identifier, args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerDeviceWithIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDeviceWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerDeviceWithoutPhoneNumber = function(seqid, input, output) {
  var args = new LineService_registerDeviceWithoutPhoneNumber_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDeviceWithoutPhoneNumber.length === 3) {
    Q.fcall(this._handler.registerDeviceWithoutPhoneNumber, args.region, args.udidHash, args.deviceInfo)
      .then(function(result) {
        var result = new LineService_registerDeviceWithoutPhoneNumber_result({success: result});
        output.writeMessageBegin("registerDeviceWithoutPhoneNumber", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerDeviceWithoutPhoneNumber_result(err);
          output.writeMessageBegin("registerDeviceWithoutPhoneNumber", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDeviceWithoutPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDeviceWithoutPhoneNumber(args.region, args.udidHash, args.deviceInfo, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerDeviceWithoutPhoneNumber_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerDeviceWithoutPhoneNumber", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDeviceWithoutPhoneNumber", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerDeviceWithoutPhoneNumberWithIdentityCredential = function(seqid, input, output) {
  var args = new LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerDeviceWithoutPhoneNumberWithIdentityCredential.length === 7) {
    Q.fcall(this._handler.registerDeviceWithoutPhoneNumberWithIdentityCredential, args.region, args.udidHash, args.deviceInfo, args.provider, args.identifier, args.verifier, args.mid)
      .then(function(result) {
        var result = new LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result({success: result});
        output.writeMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result(err);
          output.writeMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.region, args.udidHash, args.deviceInfo, args.provider, args.identifier, args.verifier, args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerDeviceWithoutPhoneNumberWithIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerDeviceWithoutPhoneNumberWithIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerUserid = function(seqid, input, output) {
  var args = new LineService_registerUserid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerUserid.length === 2) {
    Q.fcall(this._handler.registerUserid, args.reqSeq, args.userid)
      .then(function(result) {
        var result = new LineService_registerUserid_result({success: result});
        output.writeMessageBegin("registerUserid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerUserid_result(err);
          output.writeMessageBegin("registerUserid", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerUserid", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerUserid(args.reqSeq, args.userid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerUserid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerUserid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerUserid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerWapDevice = function(seqid, input, output) {
  var args = new LineService_registerWapDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWapDevice.length === 4) {
    Q.fcall(this._handler.registerWapDevice, args.invitationHash, args.guidHash, args.email, args.deviceInfo)
      .then(function(result) {
        var result = new LineService_registerWapDevice_result({success: result});
        output.writeMessageBegin("registerWapDevice", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerWapDevice_result(err);
          output.writeMessageBegin("registerWapDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWapDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWapDevice(args.invitationHash, args.guidHash, args.email, args.deviceInfo, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerWapDevice_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerWapDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWapDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerWithExistingSnsIdAndIdentityCredential = function(seqid, input, output) {
  var args = new LineService_registerWithExistingSnsIdAndIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWithExistingSnsIdAndIdentityCredential.length === 4) {
    Q.fcall(this._handler.registerWithExistingSnsIdAndIdentityCredential, args.identityCredential, args.region, args.udidHash, args.deviceInfo)
      .then(function(result) {
        var result = new LineService_registerWithExistingSnsIdAndIdentityCredential_result({success: result});
        output.writeMessageBegin("registerWithExistingSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerWithExistingSnsIdAndIdentityCredential_result(err);
          output.writeMessageBegin("registerWithExistingSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWithExistingSnsIdAndIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWithExistingSnsIdAndIdentityCredential(args.identityCredential, args.region, args.udidHash, args.deviceInfo, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerWithExistingSnsIdAndIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerWithExistingSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWithExistingSnsIdAndIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerWithSnsId = function(seqid, input, output) {
  var args = new LineService_registerWithSnsId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWithSnsId.length === 6) {
    Q.fcall(this._handler.registerWithSnsId, args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid)
      .then(function(result) {
        var result = new LineService_registerWithSnsId_result({success: result});
        output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerWithSnsId_result(err);
          output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWithSnsId(args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerWithSnsId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWithSnsId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_registerWithSnsIdAndIdentityCredential = function(seqid, input, output) {
  var args = new LineService_registerWithSnsIdAndIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerWithSnsIdAndIdentityCredential.length === 6) {
    Q.fcall(this._handler.registerWithSnsIdAndIdentityCredential, args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo)
      .then(function(result) {
        var result = new LineService_registerWithSnsIdAndIdentityCredential_result({success: result});
        output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_registerWithSnsIdAndIdentityCredential_result(err);
          output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerWithSnsIdAndIdentityCredential(args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_registerWithSnsIdAndIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerWithSnsIdAndIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reissueDeviceCredential = function(seqid, input, output) {
  var args = new LineService_reissueDeviceCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reissueDeviceCredential.length === 0) {
    Q.fcall(this._handler.reissueDeviceCredential)
      .then(function(result) {
        var result = new LineService_reissueDeviceCredential_result({success: result});
        output.writeMessageBegin("reissueDeviceCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reissueDeviceCredential_result(err);
          output.writeMessageBegin("reissueDeviceCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueDeviceCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reissueDeviceCredential(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reissueDeviceCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reissueDeviceCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reissueDeviceCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reissueUserTicket = function(seqid, input, output) {
  var args = new LineService_reissueUserTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reissueUserTicket.length === 2) {
    Q.fcall(this._handler.reissueUserTicket, args.expirationTime, args.maxUseCount)
      .then(function(result) {
        var result = new LineService_reissueUserTicket_result({success: result});
        output.writeMessageBegin("reissueUserTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reissueUserTicket_result(err);
          output.writeMessageBegin("reissueUserTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueUserTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reissueUserTicket(args.expirationTime, args.maxUseCount, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reissueUserTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reissueUserTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reissueUserTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reissueGroupTicket = function(seqid, input, output) {
  var args = new LineService_reissueGroupTicket_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reissueGroupTicket.length === 1) {
    Q.fcall(this._handler.reissueGroupTicket, args.groupId)
      .then(function(result) {
        var result = new LineService_reissueGroupTicket_result({success: result});
        output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reissueGroupTicket_result(err);
          output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reissueGroupTicket(args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reissueGroupTicket_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reissueGroupTicket", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_rejectGroupInvitation = function(seqid, input, output) {
  var args = new LineService_rejectGroupInvitation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rejectGroupInvitation.length === 2) {
    Q.fcall(this._handler.rejectGroupInvitation, args.reqSeq, args.groupId)
      .then(function(result) {
        var result = new LineService_rejectGroupInvitation_result({success: result});
        output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_rejectGroupInvitation_result(err);
          output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rejectGroupInvitation(args.reqSeq, args.groupId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_rejectGroupInvitation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rejectGroupInvitation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_releaseSession = function(seqid, input, output) {
  var args = new LineService_releaseSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.releaseSession.length === 0) {
    Q.fcall(this._handler.releaseSession)
      .then(function(result) {
        var result = new LineService_releaseSession_result({success: result});
        output.writeMessageBegin("releaseSession", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_releaseSession_result(err);
          output.writeMessageBegin("releaseSession", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("releaseSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.releaseSession(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_releaseSession_result((err != null ? err : {success: result}));
        output.writeMessageBegin("releaseSession", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("releaseSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeAllMessages = function(seqid, input, output) {
  var args = new LineService_removeAllMessages_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeAllMessages.length === 2) {
    Q.fcall(this._handler.removeAllMessages, args.seq, args.lastMessageId)
      .then(function(result) {
        var result = new LineService_removeAllMessages_result({success: result});
        output.writeMessageBegin("removeAllMessages", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeAllMessages_result(err);
          output.writeMessageBegin("removeAllMessages", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeAllMessages", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeAllMessages(args.seq, args.lastMessageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeAllMessages_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeAllMessages", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeAllMessages", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeBuddyLocation = function(seqid, input, output) {
  var args = new LineService_removeBuddyLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeBuddyLocation.length === 2) {
    Q.fcall(this._handler.removeBuddyLocation, args.mid, args.index)
      .then(function(result) {
        var result = new LineService_removeBuddyLocation_result({success: result});
        output.writeMessageBegin("removeBuddyLocation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeBuddyLocation_result(err);
          output.writeMessageBegin("removeBuddyLocation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeBuddyLocation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeBuddyLocation(args.mid, args.index, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeBuddyLocation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeBuddyLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeBuddyLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeMessage = function(seqid, input, output) {
  var args = new LineService_removeMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeMessage.length === 1) {
    Q.fcall(this._handler.removeMessage, args.messageId)
      .then(function(result) {
        var result = new LineService_removeMessage_result({success: result});
        output.writeMessageBegin("removeMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeMessage_result(err);
          output.writeMessageBegin("removeMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeMessage(args.messageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeMessage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeMessageFromMyHome = function(seqid, input, output) {
  var args = new LineService_removeMessageFromMyHome_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeMessageFromMyHome.length === 1) {
    Q.fcall(this._handler.removeMessageFromMyHome, args.messageId)
      .then(function(result) {
        var result = new LineService_removeMessageFromMyHome_result({success: result});
        output.writeMessageBegin("removeMessageFromMyHome", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeMessageFromMyHome_result(err);
          output.writeMessageBegin("removeMessageFromMyHome", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeMessageFromMyHome", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeMessageFromMyHome(args.messageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeMessageFromMyHome_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeMessageFromMyHome", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeMessageFromMyHome", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_removeSnsId = function(seqid, input, output) {
  var args = new LineService_removeSnsId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeSnsId.length === 1) {
    Q.fcall(this._handler.removeSnsId, args.snsIdType)
      .then(function(result) {
        var result = new LineService_removeSnsId_result({success: result});
        output.writeMessageBegin("removeSnsId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_removeSnsId_result(err);
          output.writeMessageBegin("removeSnsId", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeSnsId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeSnsId(args.snsIdType, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_removeSnsId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("removeSnsId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeSnsId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_report = function(seqid, input, output) {
  var args = new LineService_report_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.report.length === 3) {
    Q.fcall(this._handler.report, args.syncOpRevision, args.category, args.report)
      .then(function(result) {
        var result = new LineService_report_result({success: result});
        output.writeMessageBegin("report", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_report_result(err);
          output.writeMessageBegin("report", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("report", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.report(args.syncOpRevision, args.category, args.report, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_report_result((err != null ? err : {success: result}));
        output.writeMessageBegin("report", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("report", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reportContacts = function(seqid, input, output) {
  var args = new LineService_reportContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportContacts.length === 4) {
    Q.fcall(this._handler.reportContacts, args.syncOpRevision, args.category, args.contactReports, args.actionType)
      .then(function(result) {
        var result = new LineService_reportContacts_result({success: result});
        output.writeMessageBegin("reportContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reportContacts_result(err);
          output.writeMessageBegin("reportContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportContacts(args.syncOpRevision, args.category, args.contactReports, args.actionType, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reportContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reportContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reportGroups = function(seqid, input, output) {
  var args = new LineService_reportGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportGroups.length === 2) {
    Q.fcall(this._handler.reportGroups, args.syncOpRevision, args.groups)
      .then(function(result) {
        var result = new LineService_reportGroups_result({success: result});
        output.writeMessageBegin("reportGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reportGroups_result(err);
          output.writeMessageBegin("reportGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportGroups(args.syncOpRevision, args.groups, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reportGroups_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reportGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reportProfile = function(seqid, input, output) {
  var args = new LineService_reportProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportProfile.length === 2) {
    Q.fcall(this._handler.reportProfile, args.syncOpRevision, args.profile)
      .then(function(result) {
        var result = new LineService_reportProfile_result({success: result});
        output.writeMessageBegin("reportProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reportProfile_result(err);
          output.writeMessageBegin("reportProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportProfile(args.syncOpRevision, args.profile, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reportProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reportProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reportRooms = function(seqid, input, output) {
  var args = new LineService_reportRooms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportRooms.length === 2) {
    Q.fcall(this._handler.reportRooms, args.syncOpRevision, args.rooms)
      .then(function(result) {
        var result = new LineService_reportRooms_result({success: result});
        output.writeMessageBegin("reportRooms", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reportRooms_result(err);
          output.writeMessageBegin("reportRooms", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportRooms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportRooms(args.syncOpRevision, args.rooms, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reportRooms_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reportRooms", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportRooms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reportSettings = function(seqid, input, output) {
  var args = new LineService_reportSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportSettings.length === 2) {
    Q.fcall(this._handler.reportSettings, args.syncOpRevision, args.settings)
      .then(function(result) {
        var result = new LineService_reportSettings_result({success: result});
        output.writeMessageBegin("reportSettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reportSettings_result(err);
          output.writeMessageBegin("reportSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportSettings(args.syncOpRevision, args.settings, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reportSettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reportSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_reportSpammer = function(seqid, input, output) {
  var args = new LineService_reportSpammer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reportSpammer.length === 3) {
    Q.fcall(this._handler.reportSpammer, args.spammerMid, args.spammerReasons, args.spamMessageIds)
      .then(function(result) {
        var result = new LineService_reportSpammer_result({success: result});
        output.writeMessageBegin("reportSpammer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_reportSpammer_result(err);
          output.writeMessageBegin("reportSpammer", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reportSpammer", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reportSpammer(args.spammerMid, args.spammerReasons, args.spamMessageIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_reportSpammer_result((err != null ? err : {success: result}));
        output.writeMessageBegin("reportSpammer", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reportSpammer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_requestAccountPasswordReset = function(seqid, input, output) {
  var args = new LineService_requestAccountPasswordReset_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestAccountPasswordReset.length === 3) {
    Q.fcall(this._handler.requestAccountPasswordReset, args.provider, args.identifier, args.locale)
      .then(function(result) {
        var result = new LineService_requestAccountPasswordReset_result({success: result});
        output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_requestAccountPasswordReset_result(err);
          output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestAccountPasswordReset(args.provider, args.identifier, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_requestAccountPasswordReset_result((err != null ? err : {success: result}));
        output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestAccountPasswordReset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_requestEmailConfirmation = function(seqid, input, output) {
  var args = new LineService_requestEmailConfirmation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestEmailConfirmation.length === 1) {
    Q.fcall(this._handler.requestEmailConfirmation, args.emailConfirmation)
      .then(function(result) {
        var result = new LineService_requestEmailConfirmation_result({success: result});
        output.writeMessageBegin("requestEmailConfirmation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_requestEmailConfirmation_result(err);
          output.writeMessageBegin("requestEmailConfirmation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestEmailConfirmation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestEmailConfirmation(args.emailConfirmation, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_requestEmailConfirmation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("requestEmailConfirmation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestEmailConfirmation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_requestIdentityUnbind = function(seqid, input, output) {
  var args = new LineService_requestIdentityUnbind_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.requestIdentityUnbind.length === 2) {
    Q.fcall(this._handler.requestIdentityUnbind, args.provider, args.identifier)
      .then(function(result) {
        var result = new LineService_requestIdentityUnbind_result({success: result});
        output.writeMessageBegin("requestIdentityUnbind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_requestIdentityUnbind_result(err);
          output.writeMessageBegin("requestIdentityUnbind", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("requestIdentityUnbind", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.requestIdentityUnbind(args.provider, args.identifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_requestIdentityUnbind_result((err != null ? err : {success: result}));
        output.writeMessageBegin("requestIdentityUnbind", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("requestIdentityUnbind", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_resendEmailConfirmation = function(seqid, input, output) {
  var args = new LineService_resendEmailConfirmation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resendEmailConfirmation.length === 1) {
    Q.fcall(this._handler.resendEmailConfirmation, args.verifier)
      .then(function(result) {
        var result = new LineService_resendEmailConfirmation_result({success: result});
        output.writeMessageBegin("resendEmailConfirmation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_resendEmailConfirmation_result(err);
          output.writeMessageBegin("resendEmailConfirmation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("resendEmailConfirmation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resendEmailConfirmation(args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_resendEmailConfirmation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("resendEmailConfirmation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resendEmailConfirmation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_resendPinCode = function(seqid, input, output) {
  var args = new LineService_resendPinCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resendPinCode.length === 1) {
    Q.fcall(this._handler.resendPinCode, args.sessionId)
      .then(function(result) {
        var result = new LineService_resendPinCode_result({success: result});
        output.writeMessageBegin("resendPinCode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_resendPinCode_result(err);
          output.writeMessageBegin("resendPinCode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("resendPinCode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resendPinCode(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_resendPinCode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("resendPinCode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resendPinCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_resendPinCodeBySMS = function(seqid, input, output) {
  var args = new LineService_resendPinCodeBySMS_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.resendPinCodeBySMS.length === 1) {
    Q.fcall(this._handler.resendPinCodeBySMS, args.sessionId)
      .then(function(result) {
        var result = new LineService_resendPinCodeBySMS_result({success: result});
        output.writeMessageBegin("resendPinCodeBySMS", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_resendPinCodeBySMS_result(err);
          output.writeMessageBegin("resendPinCodeBySMS", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("resendPinCodeBySMS", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.resendPinCodeBySMS(args.sessionId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_resendPinCodeBySMS_result((err != null ? err : {success: result}));
        output.writeMessageBegin("resendPinCodeBySMS", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("resendPinCodeBySMS", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendChatChecked = function(seqid, input, output) {
  var args = new LineService_sendChatChecked_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendChatChecked.length === 3) {
    Q.fcall(this._handler.sendChatChecked, args.seq, args.consumer, args.lastMessageId)
      .then(function(result) {
        var result = new LineService_sendChatChecked_result({success: result});
        output.writeMessageBegin("sendChatChecked", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendChatChecked_result(err);
          output.writeMessageBegin("sendChatChecked", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendChatChecked", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendChatChecked(args.seq, args.consumer, args.lastMessageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendChatChecked_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendChatChecked", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendChatChecked", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendChatRemoved = function(seqid, input, output) {
  var args = new LineService_sendChatRemoved_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendChatRemoved.length === 3) {
    Q.fcall(this._handler.sendChatRemoved, args.seq, args.consumer, args.lastMessageId)
      .then(function(result) {
        var result = new LineService_sendChatRemoved_result({success: result});
        output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendChatRemoved_result(err);
          output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendChatRemoved(args.seq, args.consumer, args.lastMessageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendChatRemoved_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendChatRemoved", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendContentPreviewUpdated = function(seqid, input, output) {
  var args = new LineService_sendContentPreviewUpdated_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendContentPreviewUpdated.length === 3) {
    Q.fcall(this._handler.sendContentPreviewUpdated, args.esq, args.messageId, args.receiverMids)
      .then(function(result) {
        var result = new LineService_sendContentPreviewUpdated_result({success: result});
        output.writeMessageBegin("sendContentPreviewUpdated", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendContentPreviewUpdated_result(err);
          output.writeMessageBegin("sendContentPreviewUpdated", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendContentPreviewUpdated", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendContentPreviewUpdated(args.esq, args.messageId, args.receiverMids, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendContentPreviewUpdated_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendContentPreviewUpdated", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendContentPreviewUpdated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendContentReceipt = function(seqid, input, output) {
  var args = new LineService_sendContentReceipt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendContentReceipt.length === 3) {
    Q.fcall(this._handler.sendContentReceipt, args.seq, args.consumer, args.messageId)
      .then(function(result) {
        var result = new LineService_sendContentReceipt_result({success: result});
        output.writeMessageBegin("sendContentReceipt", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendContentReceipt_result(err);
          output.writeMessageBegin("sendContentReceipt", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendContentReceipt", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendContentReceipt(args.seq, args.consumer, args.messageId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendContentReceipt_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendContentReceipt", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendContentReceipt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendDummyPush = function(seqid, input, output) {
  var args = new LineService_sendDummyPush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendDummyPush.length === 0) {
    Q.fcall(this._handler.sendDummyPush)
      .then(function(result) {
        var result = new LineService_sendDummyPush_result({success: result});
        output.writeMessageBegin("sendDummyPush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendDummyPush_result(err);
          output.writeMessageBegin("sendDummyPush", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendDummyPush", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendDummyPush(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendDummyPush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendDummyPush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendDummyPush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendEvent = function(seqid, input, output) {
  var args = new LineService_sendEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendEvent.length === 2) {
    Q.fcall(this._handler.sendEvent, args.seq, args.message)
      .then(function(result) {
        var result = new LineService_sendEvent_result({success: result});
        output.writeMessageBegin("sendEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendEvent_result(err);
          output.writeMessageBegin("sendEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendEvent(args.seq, args.message, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendMessage = function(seqid, input, output) {
  var args = new LineService_sendMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessage.length === 2) {
    Q.fcall(this._handler.sendMessage, args.seq, args.message)
      .then(function(result) {
        var result = new LineService_sendMessage_result({success: result});
        output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendMessage_result(err);
          output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessage(args.seq, args.message, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendMessage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendMessageIgnored = function(seqid, input, output) {
  var args = new LineService_sendMessageIgnored_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessageIgnored.length === 3) {
    Q.fcall(this._handler.sendMessageIgnored, args.seq, args.consumer, args.messageIds)
      .then(function(result) {
        var result = new LineService_sendMessageIgnored_result({success: result});
        output.writeMessageBegin("sendMessageIgnored", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendMessageIgnored_result(err);
          output.writeMessageBegin("sendMessageIgnored", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageIgnored", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessageIgnored(args.seq, args.consumer, args.messageIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendMessageIgnored_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendMessageIgnored", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMessageIgnored", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendMessageReceipt = function(seqid, input, output) {
  var args = new LineService_sendMessageReceipt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessageReceipt.length === 3) {
    Q.fcall(this._handler.sendMessageReceipt, args.seq, args.consumer, args.messageIds)
      .then(function(result) {
        var result = new LineService_sendMessageReceipt_result({success: result});
        output.writeMessageBegin("sendMessageReceipt", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendMessageReceipt_result(err);
          output.writeMessageBegin("sendMessageReceipt", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageReceipt", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessageReceipt(args.seq, args.consumer, args.messageIds, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendMessageReceipt_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendMessageReceipt", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMessageReceipt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_sendMessageToMyHome = function(seqid, input, output) {
  var args = new LineService_sendMessageToMyHome_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendMessageToMyHome.length === 2) {
    Q.fcall(this._handler.sendMessageToMyHome, args.seq, args.message)
      .then(function(result) {
        var result = new LineService_sendMessageToMyHome_result({success: result});
        output.writeMessageBegin("sendMessageToMyHome", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_sendMessageToMyHome_result(err);
          output.writeMessageBegin("sendMessageToMyHome", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendMessageToMyHome", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendMessageToMyHome(args.seq, args.message, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_sendMessageToMyHome_result((err != null ? err : {success: result}));
        output.writeMessageBegin("sendMessageToMyHome", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendMessageToMyHome", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_setBuddyLocation = function(seqid, input, output) {
  var args = new LineService_setBuddyLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setBuddyLocation.length === 3) {
    Q.fcall(this._handler.setBuddyLocation, args.mid, args.index, args.location)
      .then(function(result) {
        var result = new LineService_setBuddyLocation_result({success: result});
        output.writeMessageBegin("setBuddyLocation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_setBuddyLocation_result(err);
          output.writeMessageBegin("setBuddyLocation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setBuddyLocation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setBuddyLocation(args.mid, args.index, args.location, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_setBuddyLocation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("setBuddyLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setBuddyLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_setIdentityCredential = function(seqid, input, output) {
  var args = new LineService_setIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setIdentityCredential.length === 3) {
    Q.fcall(this._handler.setIdentityCredential, args.provider, args.identifier, args.verifier)
      .then(function(result) {
        var result = new LineService_setIdentityCredential_result({success: result});
        output.writeMessageBegin("setIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_setIdentityCredential_result(err);
          output.writeMessageBegin("setIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setIdentityCredential(args.provider, args.identifier, args.verifier, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_setIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("setIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_setNotificationsEnabled = function(seqid, input, output) {
  var args = new LineService_setNotificationsEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setNotificationsEnabled.length === 4) {
    Q.fcall(this._handler.setNotificationsEnabled, args.reqSeq, args.type, args.target, args.enablement)
      .then(function(result) {
        var result = new LineService_setNotificationsEnabled_result({success: result});
        output.writeMessageBegin("setNotificationsEnabled", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_setNotificationsEnabled_result(err);
          output.writeMessageBegin("setNotificationsEnabled", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setNotificationsEnabled", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setNotificationsEnabled(args.reqSeq, args.type, args.target, args.enablement, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_setNotificationsEnabled_result((err != null ? err : {success: result}));
        output.writeMessageBegin("setNotificationsEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setNotificationsEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_startUpdateVerification = function(seqid, input, output) {
  var args = new LineService_startUpdateVerification_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startUpdateVerification.length === 7) {
    Q.fcall(this._handler.startUpdateVerification, args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.locale)
      .then(function(result) {
        var result = new LineService_startUpdateVerification_result({success: result});
        output.writeMessageBegin("startUpdateVerification", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_startUpdateVerification_result(err);
          output.writeMessageBegin("startUpdateVerification", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startUpdateVerification", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.startUpdateVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_startUpdateVerification_result((err != null ? err : {success: result}));
        output.writeMessageBegin("startUpdateVerification", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startUpdateVerification", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_startVerification = function(seqid, input, output) {
  var args = new LineService_startVerification_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startVerification.length === 8) {
    Q.fcall(this._handler.startVerification, args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.mid, args.locale)
      .then(function(result) {
        var result = new LineService_startVerification_result({success: result});
        output.writeMessageBegin("startVerification", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_startVerification_result(err);
          output.writeMessageBegin("startVerification", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startVerification", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.startVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.mid, args.locale, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_startVerification_result((err != null ? err : {success: result}));
        output.writeMessageBegin("startVerification", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startVerification", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_storeUpdateProfileAttribute = function(seqid, input, output) {
  var args = new LineService_storeUpdateProfileAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeUpdateProfileAttribute.length === 3) {
    Q.fcall(this._handler.storeUpdateProfileAttribute, args.seq, args.profileAttribute, args.value)
      .then(function(result) {
        var result = new LineService_storeUpdateProfileAttribute_result({success: result});
        output.writeMessageBegin("storeUpdateProfileAttribute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_storeUpdateProfileAttribute_result(err);
          output.writeMessageBegin("storeUpdateProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeUpdateProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeUpdateProfileAttribute(args.seq, args.profileAttribute, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_storeUpdateProfileAttribute_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeUpdateProfileAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeUpdateProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_syncContactBySnsIds = function(seqid, input, output) {
  var args = new LineService_syncContactBySnsIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.syncContactBySnsIds.length === 2) {
    Q.fcall(this._handler.syncContactBySnsIds, args.reqSeq, args.modifications)
      .then(function(result) {
        var result = new LineService_syncContactBySnsIds_result({success: result});
        output.writeMessageBegin("syncContactBySnsIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_syncContactBySnsIds_result(err);
          output.writeMessageBegin("syncContactBySnsIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("syncContactBySnsIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.syncContactBySnsIds(args.reqSeq, args.modifications, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_syncContactBySnsIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("syncContactBySnsIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("syncContactBySnsIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_syncContacts = function(seqid, input, output) {
  var args = new LineService_syncContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.syncContacts.length === 2) {
    Q.fcall(this._handler.syncContacts, args.reqSeq, args.localContacts)
      .then(function(result) {
        var result = new LineService_syncContacts_result({success: result});
        output.writeMessageBegin("syncContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_syncContacts_result(err);
          output.writeMessageBegin("syncContacts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("syncContacts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.syncContacts(args.reqSeq, args.localContacts, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_syncContacts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("syncContacts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("syncContacts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_trySendMessage = function(seqid, input, output) {
  var args = new LineService_trySendMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.trySendMessage.length === 2) {
    Q.fcall(this._handler.trySendMessage, args.seq, args.message)
      .then(function(result) {
        var result = new LineService_trySendMessage_result({success: result});
        output.writeMessageBegin("trySendMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_trySendMessage_result(err);
          output.writeMessageBegin("trySendMessage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("trySendMessage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.trySendMessage(args.seq, args.message, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_trySendMessage_result((err != null ? err : {success: result}));
        output.writeMessageBegin("trySendMessage", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("trySendMessage", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unblockContact = function(seqid, input, output) {
  var args = new LineService_unblockContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unblockContact.length === 2) {
    Q.fcall(this._handler.unblockContact, args.reqSeq, args.id)
      .then(function(result) {
        var result = new LineService_unblockContact_result({success: result});
        output.writeMessageBegin("unblockContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unblockContact_result(err);
          output.writeMessageBegin("unblockContact", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockContact", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unblockContact(args.reqSeq, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unblockContact_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unblockContact", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unblockContact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unblockRecommendation = function(seqid, input, output) {
  var args = new LineService_unblockRecommendation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unblockRecommendation.length === 2) {
    Q.fcall(this._handler.unblockRecommendation, args.reqSeq, args.id)
      .then(function(result) {
        var result = new LineService_unblockRecommendation_result({success: result});
        output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unblockRecommendation_result(err);
          output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unblockRecommendation(args.reqSeq, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unblockRecommendation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unblockRecommendation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_unregisterUserAndDevice = function(seqid, input, output) {
  var args = new LineService_unregisterUserAndDevice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregisterUserAndDevice.length === 0) {
    Q.fcall(this._handler.unregisterUserAndDevice)
      .then(function(result) {
        var result = new LineService_unregisterUserAndDevice_result({success: result});
        output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_unregisterUserAndDevice_result(err);
          output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.unregisterUserAndDevice(function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_unregisterUserAndDevice_result((err != null ? err : {success: result}));
        output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregisterUserAndDevice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateApnsDeviceToken = function(seqid, input, output) {
  var args = new LineService_updateApnsDeviceToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateApnsDeviceToken.length === 1) {
    Q.fcall(this._handler.updateApnsDeviceToken, args.apnsDeviceToken)
      .then(function(result) {
        var result = new LineService_updateApnsDeviceToken_result({success: result});
        output.writeMessageBegin("updateApnsDeviceToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateApnsDeviceToken_result(err);
          output.writeMessageBegin("updateApnsDeviceToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateApnsDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateApnsDeviceToken(args.apnsDeviceToken, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateApnsDeviceToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateApnsDeviceToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateApnsDeviceToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateBuddySetting = function(seqid, input, output) {
  var args = new LineService_updateBuddySetting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBuddySetting.length === 2) {
    Q.fcall(this._handler.updateBuddySetting, args.key, args.value)
      .then(function(result) {
        var result = new LineService_updateBuddySetting_result({success: result});
        output.writeMessageBegin("updateBuddySetting", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateBuddySetting_result(err);
          output.writeMessageBegin("updateBuddySetting", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBuddySetting", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBuddySetting(args.key, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateBuddySetting_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateBuddySetting", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBuddySetting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateC2DMRegistrationId = function(seqid, input, output) {
  var args = new LineService_updateC2DMRegistrationId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateC2DMRegistrationId.length === 1) {
    Q.fcall(this._handler.updateC2DMRegistrationId, args.registrationId)
      .then(function(result) {
        var result = new LineService_updateC2DMRegistrationId_result({success: result});
        output.writeMessageBegin("updateC2DMRegistrationId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateC2DMRegistrationId_result(err);
          output.writeMessageBegin("updateC2DMRegistrationId", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateC2DMRegistrationId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateC2DMRegistrationId(args.registrationId, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateC2DMRegistrationId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateC2DMRegistrationId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateC2DMRegistrationId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateContactSetting = function(seqid, input, output) {
  var args = new LineService_updateContactSetting_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateContactSetting.length === 4) {
    Q.fcall(this._handler.updateContactSetting, args.reqSeq, args.mid, args.flag, args.value)
      .then(function(result) {
        var result = new LineService_updateContactSetting_result({success: result});
        output.writeMessageBegin("updateContactSetting", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateContactSetting_result(err);
          output.writeMessageBegin("updateContactSetting", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateContactSetting", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateContactSetting(args.reqSeq, args.mid, args.flag, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateContactSetting_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateContactSetting", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateContactSetting", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateCustomModeSettings = function(seqid, input, output) {
  var args = new LineService_updateCustomModeSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateCustomModeSettings.length === 2) {
    Q.fcall(this._handler.updateCustomModeSettings, args.customMode, args.paramMap)
      .then(function(result) {
        var result = new LineService_updateCustomModeSettings_result({success: result});
        output.writeMessageBegin("updateCustomModeSettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateCustomModeSettings_result(err);
          output.writeMessageBegin("updateCustomModeSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateCustomModeSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateCustomModeSettings(args.customMode, args.paramMap, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateCustomModeSettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateCustomModeSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateCustomModeSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateDeviceInfo = function(seqid, input, output) {
  var args = new LineService_updateDeviceInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDeviceInfo.length === 2) {
    Q.fcall(this._handler.updateDeviceInfo, args.deviceUid, args.deviceInfo)
      .then(function(result) {
        var result = new LineService_updateDeviceInfo_result({success: result});
        output.writeMessageBegin("updateDeviceInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateDeviceInfo_result(err);
          output.writeMessageBegin("updateDeviceInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateDeviceInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDeviceInfo(args.deviceUid, args.deviceInfo, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateDeviceInfo_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateDeviceInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDeviceInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateGroup = function(seqid, input, output) {
  var args = new LineService_updateGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateGroup.length === 2) {
    Q.fcall(this._handler.updateGroup, args.reqSeq, args.group)
      .then(function(result) {
        var result = new LineService_updateGroup_result({success: result});
        output.writeMessageBegin("updateGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateGroup_result(err);
          output.writeMessageBegin("updateGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateGroup(args.reqSeq, args.group, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateNotificationToken = function(seqid, input, output) {
  var args = new LineService_updateNotificationToken_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateNotificationToken.length === 2) {
    Q.fcall(this._handler.updateNotificationToken, args.type, args.token)
      .then(function(result) {
        var result = new LineService_updateNotificationToken_result({success: result});
        output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateNotificationToken_result(err);
          output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateNotificationToken(args.type, args.token, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateNotificationToken_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNotificationToken", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateNotificationTokenWithBytes = function(seqid, input, output) {
  var args = new LineService_updateNotificationTokenWithBytes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateNotificationTokenWithBytes.length === 2) {
    Q.fcall(this._handler.updateNotificationTokenWithBytes, args.type, args.token)
      .then(function(result) {
        var result = new LineService_updateNotificationTokenWithBytes_result({success: result});
        output.writeMessageBegin("updateNotificationTokenWithBytes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateNotificationTokenWithBytes_result(err);
          output.writeMessageBegin("updateNotificationTokenWithBytes", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateNotificationTokenWithBytes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateNotificationTokenWithBytes(args.type, args.token, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateNotificationTokenWithBytes_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateNotificationTokenWithBytes", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNotificationTokenWithBytes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateProfile = function(seqid, input, output) {
  var args = new LineService_updateProfile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateProfile.length === 2) {
    Q.fcall(this._handler.updateProfile, args.reqSeq, args.profile)
      .then(function(result) {
        var result = new LineService_updateProfile_result({success: result});
        output.writeMessageBegin("updateProfile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateProfile_result(err);
          output.writeMessageBegin("updateProfile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateProfile(args.reqSeq, args.profile, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateProfile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateProfile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateProfile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateProfileAttribute = function(seqid, input, output) {
  var args = new LineService_updateProfileAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateProfileAttribute.length === 3) {
    Q.fcall(this._handler.updateProfileAttribute, args.reqSeq, args.attr, args.value)
      .then(function(result) {
        var result = new LineService_updateProfileAttribute_result({success: result});
        output.writeMessageBegin("updateProfileAttribute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateProfileAttribute_result(err);
          output.writeMessageBegin("updateProfileAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateProfileAttribute(args.reqSeq, args.attr, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateProfileAttribute_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateProfileAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateProfileAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateRegion = function(seqid, input, output) {
  var args = new LineService_updateRegion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateRegion.length === 1) {
    Q.fcall(this._handler.updateRegion, args.region)
      .then(function(result) {
        var result = new LineService_updateRegion_result({success: result});
        output.writeMessageBegin("updateRegion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateRegion_result(err);
          output.writeMessageBegin("updateRegion", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateRegion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateRegion(args.region, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateRegion_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateRegion", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateRegion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateSettings = function(seqid, input, output) {
  var args = new LineService_updateSettings_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSettings.length === 2) {
    Q.fcall(this._handler.updateSettings, args.reqSeq, args.settings)
      .then(function(result) {
        var result = new LineService_updateSettings_result({success: result});
        output.writeMessageBegin("updateSettings", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateSettings_result(err);
          output.writeMessageBegin("updateSettings", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSettings", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSettings(args.reqSeq, args.settings, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateSettings_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateSettings2 = function(seqid, input, output) {
  var args = new LineService_updateSettings2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSettings2.length === 2) {
    Q.fcall(this._handler.updateSettings2, args.reqSeq, args.settings)
      .then(function(result) {
        var result = new LineService_updateSettings2_result({success: result});
        output.writeMessageBegin("updateSettings2", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateSettings2_result(err);
          output.writeMessageBegin("updateSettings2", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSettings2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSettings2(args.reqSeq, args.settings, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateSettings2_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateSettings2", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSettings2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateSettingsAttribute = function(seqid, input, output) {
  var args = new LineService_updateSettingsAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSettingsAttribute.length === 3) {
    Q.fcall(this._handler.updateSettingsAttribute, args.reqSeq, args.attr, args.value)
      .then(function(result) {
        var result = new LineService_updateSettingsAttribute_result({success: result});
        output.writeMessageBegin("updateSettingsAttribute", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateSettingsAttribute_result(err);
          output.writeMessageBegin("updateSettingsAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSettingsAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSettingsAttribute(args.reqSeq, args.attr, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateSettingsAttribute_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateSettingsAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSettingsAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_updateSettingsAttributes = function(seqid, input, output) {
  var args = new LineService_updateSettingsAttributes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSettingsAttributes.length === 3) {
    Q.fcall(this._handler.updateSettingsAttributes, args.reqSeq, args.attrBitset, args.settings)
      .then(function(result) {
        var result = new LineService_updateSettingsAttributes_result({success: result});
        output.writeMessageBegin("updateSettingsAttributes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_updateSettingsAttributes_result(err);
          output.writeMessageBegin("updateSettingsAttributes", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSettingsAttributes", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSettingsAttributes(args.reqSeq, args.attrBitset, args.settings, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_updateSettingsAttributes_result((err != null ? err : {success: result}));
        output.writeMessageBegin("updateSettingsAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSettingsAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_verifyIdentityCredential = function(seqid, input, output) {
  var args = new LineService_verifyIdentityCredential_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyIdentityCredential.length === 3) {
    Q.fcall(this._handler.verifyIdentityCredential, args.identityProvider, args.identifier, args.password)
      .then(function(result) {
        var result = new LineService_verifyIdentityCredential_result({success: result});
        output.writeMessageBegin("verifyIdentityCredential", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_verifyIdentityCredential_result(err);
          output.writeMessageBegin("verifyIdentityCredential", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyIdentityCredential(args.identityProvider, args.identifier, args.password, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_verifyIdentityCredential_result((err != null ? err : {success: result}));
        output.writeMessageBegin("verifyIdentityCredential", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyIdentityCredential", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_verifyIdentityCredentialWithResult = function(seqid, input, output) {
  var args = new LineService_verifyIdentityCredentialWithResult_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyIdentityCredentialWithResult.length === 1) {
    Q.fcall(this._handler.verifyIdentityCredentialWithResult, args.identityCredential)
      .then(function(result) {
        var result = new LineService_verifyIdentityCredentialWithResult_result({success: result});
        output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_verifyIdentityCredentialWithResult_result(err);
          output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyIdentityCredentialWithResult(args.identityCredential, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_verifyIdentityCredentialWithResult_result((err != null ? err : {success: result}));
        output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyIdentityCredentialWithResult", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_verifyPhone = function(seqid, input, output) {
  var args = new LineService_verifyPhone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyPhone.length === 3) {
    Q.fcall(this._handler.verifyPhone, args.sessionId, args.pinCode, args.udidHash)
      .then(function(result) {
        var result = new LineService_verifyPhone_result({success: result});
        output.writeMessageBegin("verifyPhone", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_verifyPhone_result(err);
          output.writeMessageBegin("verifyPhone", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyPhone", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyPhone(args.sessionId, args.pinCode, args.udidHash, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_verifyPhone_result((err != null ? err : {success: result}));
        output.writeMessageBegin("verifyPhone", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyPhone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_verifyQrcode = function(seqid, input, output) {
  var args = new LineService_verifyQrcode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyQrcode.length === 2) {
    Q.fcall(this._handler.verifyQrcode, args.verifier, args.pinCode)
      .then(function(result) {
        var result = new LineService_verifyQrcode_result({success: result});
        output.writeMessageBegin("verifyQrcode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.TalkException) {
          var result = new LineService_verifyQrcode_result(err);
          output.writeMessageBegin("verifyQrcode", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyQrcode", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyQrcode(args.verifier, args.pinCode, function (err, result) {
      if (err == null || err instanceof ttypes.TalkException) {
        var result = new LineService_verifyQrcode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("verifyQrcode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verifyQrcode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

LineServiceProcessor.prototype.process_notify = function(seqid, input, output) {
  var args = new LineService_notify_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.notify.length === 1) {
    Q.fcall(this._handler.notify, args.event)
      .then(function(result) {
        var result = new LineService_notify_result({success: result});
        output.writeMessageBegin("notify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.UniversalNotificationServiceException) {
          var result = new LineService_notify_result(err);
          output.writeMessageBegin("notify", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("notify", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.notify(args.event, function (err, result) {
      if (err == null || err instanceof ttypes.UniversalNotificationServiceException) {
        var result = new LineService_notify_result((err != null ? err : {success: result}));
        output.writeMessageBegin("notify", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("notify", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

